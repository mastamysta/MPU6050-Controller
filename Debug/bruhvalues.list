
bruhvalues.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004a3c  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000224  08004bcc  08004bcc  00014bcc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004df0  08004df0  0002006c  2**0
                  CONTENTS
  4 .ARM          00000000  08004df0  08004df0  0002006c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004df0  08004df0  0002006c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004df0  08004df0  00014df0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004df4  08004df4  00014df4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000006c  20000000  08004df8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0002006c  2**0
                  CONTENTS
 10 .bss          00000238  2000006c  2000006c  0002006c  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  200002a4  200002a4  0002006c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0002006c  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  0002009c  2**0
                  CONTENTS, READONLY
 14 .debug_info   0000def3  00000000  00000000  000200df  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00002205  00000000  00000000  0002dfd2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00000de8  00000000  00000000  000301d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00000ac7  00000000  00000000  00030fc0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  0001c23c  00000000  00000000  00031a87  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   000107ab  00000000  00000000  0004dcc3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000a2fd9  00000000  00000000  0005e46e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  000041e0  00000000  00000000  00101448  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000071  00000000  00000000  00105628  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000006c 	.word	0x2000006c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08004bb4 	.word	0x08004bb4

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000070 	.word	0x20000070
 80001cc:	08004bb4 	.word	0x08004bb4

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <HAL_TIM_PeriodElapsedCallback>:
uint32_t milis = 0;

uint32_t skips = 0;

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000270:	b480      	push	{r7}
 8000272:	b083      	sub	sp, #12
 8000274:	af00      	add	r7, sp, #0
 8000276:	6078      	str	r0, [r7, #4]
	milis++;
 8000278:	4b05      	ldr	r3, [pc, #20]	; (8000290 <HAL_TIM_PeriodElapsedCallback+0x20>)
 800027a:	681b      	ldr	r3, [r3, #0]
 800027c:	3301      	adds	r3, #1
 800027e:	4a04      	ldr	r2, [pc, #16]	; (8000290 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000280:	6013      	str	r3, [r2, #0]
}
 8000282:	bf00      	nop
 8000284:	370c      	adds	r7, #12
 8000286:	46bd      	mov	sp, r7
 8000288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop
 8000290:	20000140 	.word	0x20000140

08000294 <HAL_GPIO_EXTI_Callback>:

uint32_t data_ready_cnt = 0;

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000294:	b480      	push	{r7}
 8000296:	b083      	sub	sp, #12
 8000298:	af00      	add	r7, sp, #0
 800029a:	4603      	mov	r3, r0
 800029c:	80fb      	strh	r3, [r7, #6]
	// Data ready callback!
	data_ready_cnt++;
 800029e:	4b05      	ldr	r3, [pc, #20]	; (80002b4 <HAL_GPIO_EXTI_Callback+0x20>)
 80002a0:	681b      	ldr	r3, [r3, #0]
 80002a2:	3301      	adds	r3, #1
 80002a4:	4a03      	ldr	r2, [pc, #12]	; (80002b4 <HAL_GPIO_EXTI_Callback+0x20>)
 80002a6:	6013      	str	r3, [r2, #0]
}
 80002a8:	bf00      	nop
 80002aa:	370c      	adds	r7, #12
 80002ac:	46bd      	mov	sp, r7
 80002ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002b2:	4770      	bx	lr
 80002b4:	20000148 	.word	0x20000148

080002b8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80002b8:	b590      	push	{r4, r7, lr}
 80002ba:	b085      	sub	sp, #20
 80002bc:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80002be:	f000 fcd7 	bl	8000c70 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80002c2:	f000 f857 	bl	8000374 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80002c6:	f000 f913 	bl	80004f0 <MX_GPIO_Init>
  MX_I2C1_Init();
 80002ca:	f000 f8ab 	bl	8000424 <MX_I2C1_Init>
  MX_TIM16_Init();
 80002ce:	f000 f8e9 	bl	80004a4 <MX_TIM16_Init>
  /* USER CODE BEGIN 2 */

  HAL_TIM_Base_Start_IT(&htim16);
 80002d2:	4822      	ldr	r0, [pc, #136]	; (800035c <main+0xa4>)
 80002d4:	f003 faa2 	bl	800381c <HAL_TIM_Base_Start_IT>

  if(MPUInit(&hi2c1, false))
 80002d8:	2100      	movs	r1, #0
 80002da:	4821      	ldr	r0, [pc, #132]	; (8000360 <main+0xa8>)
 80002dc:	f000 fa00 	bl	80006e0 <MPUInit>
 80002e0:	4603      	mov	r3, r0
 80002e2:	2b00      	cmp	r3, #0
 80002e4:	d001      	beq.n	80002ea <main+0x32>
  {
	  int a = 0;
 80002e6:	2300      	movs	r3, #0
 80002e8:	60fb      	str	r3, [r7, #12]
  }

  MPUSetDataReadyInterruptEnable(true);
 80002ea:	2001      	movs	r0, #1
 80002ec:	f000 f9d8 	bl	80006a0 <MPUSetDataReadyInterruptEnable>
  /* USER CODE BEGIN WHILE */
  while (1)
  {

	 // Perform readout once every 5 miliseconds.
	if (milis >= 40)
 80002f0:	4b1c      	ldr	r3, [pc, #112]	; (8000364 <main+0xac>)
 80002f2:	681b      	ldr	r3, [r3, #0]
 80002f4:	2b27      	cmp	r3, #39	; 0x27
 80002f6:	d92b      	bls.n	8000350 <main+0x98>
	{
		milis = 0;
 80002f8:	4b1a      	ldr	r3, [pc, #104]	; (8000364 <main+0xac>)
 80002fa:	2200      	movs	r2, #0
 80002fc:	601a      	str	r2, [r3, #0]

		skips=0;
 80002fe:	4b1a      	ldr	r3, [pc, #104]	; (8000368 <main+0xb0>)
 8000300:	2200      	movs	r2, #0
 8000302:	601a      	str	r2, [r3, #0]

		float tmp[3] = {0, 0, 0};
 8000304:	f04f 0300 	mov.w	r3, #0
 8000308:	603b      	str	r3, [r7, #0]
 800030a:	f04f 0300 	mov.w	r3, #0
 800030e:	607b      	str	r3, [r7, #4]
 8000310:	f04f 0300 	mov.w	r3, #0
 8000314:	60bb      	str	r3, [r7, #8]

		if(!MPUGetAccel(tmp))
 8000316:	463b      	mov	r3, r7
 8000318:	4618      	mov	r0, r3
 800031a:	f000 fa21 	bl	8000760 <MPUGetAccel>
 800031e:	4603      	mov	r3, r0
 8000320:	2b00      	cmp	r3, #0
 8000322:	d106      	bne.n	8000332 <main+0x7a>
		{
			memcpy(&accelData, &tmp, sizeof(tmp));
 8000324:	4b11      	ldr	r3, [pc, #68]	; (800036c <main+0xb4>)
 8000326:	461c      	mov	r4, r3
 8000328:	463b      	mov	r3, r7
 800032a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800032e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
		}


		if(!MPUGetGyro(tmp))
 8000332:	463b      	mov	r3, r7
 8000334:	4618      	mov	r0, r3
 8000336:	f000 fa77 	bl	8000828 <MPUGetGyro>
 800033a:	4603      	mov	r3, r0
 800033c:	2b00      	cmp	r3, #0
 800033e:	d1d7      	bne.n	80002f0 <main+0x38>
		{
			memcpy(&gyroData, &tmp, sizeof(tmp));
 8000340:	4b0b      	ldr	r3, [pc, #44]	; (8000370 <main+0xb8>)
 8000342:	461c      	mov	r4, r3
 8000344:	463b      	mov	r3, r7
 8000346:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800034a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800034e:	e7cf      	b.n	80002f0 <main+0x38>
		}

	}
	else
	{
		skips++;
 8000350:	4b05      	ldr	r3, [pc, #20]	; (8000368 <main+0xb0>)
 8000352:	681b      	ldr	r3, [r3, #0]
 8000354:	3301      	adds	r3, #1
 8000356:	4a04      	ldr	r2, [pc, #16]	; (8000368 <main+0xb0>)
 8000358:	6013      	str	r3, [r2, #0]
	if (milis >= 40)
 800035a:	e7c9      	b.n	80002f0 <main+0x38>
 800035c:	200000dc 	.word	0x200000dc
 8000360:	20000088 	.word	0x20000088
 8000364:	20000140 	.word	0x20000140
 8000368:	20000144 	.word	0x20000144
 800036c:	20000128 	.word	0x20000128
 8000370:	20000134 	.word	0x20000134

08000374 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000374:	b580      	push	{r7, lr}
 8000376:	b096      	sub	sp, #88	; 0x58
 8000378:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800037a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800037e:	2228      	movs	r2, #40	; 0x28
 8000380:	2100      	movs	r1, #0
 8000382:	4618      	mov	r0, r3
 8000384:	f003 fe8c 	bl	80040a0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000388:	f107 031c 	add.w	r3, r7, #28
 800038c:	2200      	movs	r2, #0
 800038e:	601a      	str	r2, [r3, #0]
 8000390:	605a      	str	r2, [r3, #4]
 8000392:	609a      	str	r2, [r3, #8]
 8000394:	60da      	str	r2, [r3, #12]
 8000396:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000398:	1d3b      	adds	r3, r7, #4
 800039a:	2200      	movs	r2, #0
 800039c:	601a      	str	r2, [r3, #0]
 800039e:	605a      	str	r2, [r3, #4]
 80003a0:	609a      	str	r2, [r3, #8]
 80003a2:	60da      	str	r2, [r3, #12]
 80003a4:	611a      	str	r2, [r3, #16]
 80003a6:	615a      	str	r2, [r3, #20]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80003a8:	2302      	movs	r3, #2
 80003aa:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80003ac:	2301      	movs	r3, #1
 80003ae:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80003b0:	2310      	movs	r3, #16
 80003b2:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80003b4:	2302      	movs	r3, #2
 80003b6:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80003b8:	2300      	movs	r3, #0
 80003ba:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 80003bc:	f44f 1360 	mov.w	r3, #3670016	; 0x380000
 80003c0:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80003c2:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80003c6:	4618      	mov	r0, r3
 80003c8:	f001 fe86 	bl	80020d8 <HAL_RCC_OscConfig>
 80003cc:	4603      	mov	r3, r0
 80003ce:	2b00      	cmp	r3, #0
 80003d0:	d001      	beq.n	80003d6 <SystemClock_Config+0x62>
  {
    Error_Handler();
 80003d2:	f000 f8cd 	bl	8000570 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80003d6:	230f      	movs	r3, #15
 80003d8:	61fb      	str	r3, [r7, #28]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80003da:	2302      	movs	r3, #2
 80003dc:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80003de:	2300      	movs	r3, #0
 80003e0:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80003e2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80003e6:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80003e8:	2300      	movs	r3, #0
 80003ea:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80003ec:	f107 031c 	add.w	r3, r7, #28
 80003f0:	2102      	movs	r1, #2
 80003f2:	4618      	mov	r0, r3
 80003f4:	f002 feae 	bl	8003154 <HAL_RCC_ClockConfig>
 80003f8:	4603      	mov	r3, r0
 80003fa:	2b00      	cmp	r3, #0
 80003fc:	d001      	beq.n	8000402 <SystemClock_Config+0x8e>
  {
    Error_Handler();
 80003fe:	f000 f8b7 	bl	8000570 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8000402:	2320      	movs	r3, #32
 8000404:	607b      	str	r3, [r7, #4]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 8000406:	2300      	movs	r3, #0
 8000408:	613b      	str	r3, [r7, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800040a:	1d3b      	adds	r3, r7, #4
 800040c:	4618      	mov	r0, r3
 800040e:	f003 f887 	bl	8003520 <HAL_RCCEx_PeriphCLKConfig>
 8000412:	4603      	mov	r3, r0
 8000414:	2b00      	cmp	r3, #0
 8000416:	d001      	beq.n	800041c <SystemClock_Config+0xa8>
  {
    Error_Handler();
 8000418:	f000 f8aa 	bl	8000570 <Error_Handler>
  }
}
 800041c:	bf00      	nop
 800041e:	3758      	adds	r7, #88	; 0x58
 8000420:	46bd      	mov	sp, r7
 8000422:	bd80      	pop	{r7, pc}

08000424 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000424:	b580      	push	{r7, lr}
 8000426:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000428:	4b1b      	ldr	r3, [pc, #108]	; (8000498 <MX_I2C1_Init+0x74>)
 800042a:	4a1c      	ldr	r2, [pc, #112]	; (800049c <MX_I2C1_Init+0x78>)
 800042c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x2000090E;
 800042e:	4b1a      	ldr	r3, [pc, #104]	; (8000498 <MX_I2C1_Init+0x74>)
 8000430:	4a1b      	ldr	r2, [pc, #108]	; (80004a0 <MX_I2C1_Init+0x7c>)
 8000432:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000434:	4b18      	ldr	r3, [pc, #96]	; (8000498 <MX_I2C1_Init+0x74>)
 8000436:	2200      	movs	r2, #0
 8000438:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800043a:	4b17      	ldr	r3, [pc, #92]	; (8000498 <MX_I2C1_Init+0x74>)
 800043c:	2201      	movs	r2, #1
 800043e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000440:	4b15      	ldr	r3, [pc, #84]	; (8000498 <MX_I2C1_Init+0x74>)
 8000442:	2200      	movs	r2, #0
 8000444:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000446:	4b14      	ldr	r3, [pc, #80]	; (8000498 <MX_I2C1_Init+0x74>)
 8000448:	2200      	movs	r2, #0
 800044a:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800044c:	4b12      	ldr	r3, [pc, #72]	; (8000498 <MX_I2C1_Init+0x74>)
 800044e:	2200      	movs	r2, #0
 8000450:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000452:	4b11      	ldr	r3, [pc, #68]	; (8000498 <MX_I2C1_Init+0x74>)
 8000454:	2200      	movs	r2, #0
 8000456:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000458:	4b0f      	ldr	r3, [pc, #60]	; (8000498 <MX_I2C1_Init+0x74>)
 800045a:	2200      	movs	r2, #0
 800045c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800045e:	480e      	ldr	r0, [pc, #56]	; (8000498 <MX_I2C1_Init+0x74>)
 8000460:	f000 ff08 	bl	8001274 <HAL_I2C_Init>
 8000464:	4603      	mov	r3, r0
 8000466:	2b00      	cmp	r3, #0
 8000468:	d001      	beq.n	800046e <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 800046a:	f000 f881 	bl	8000570 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800046e:	2100      	movs	r1, #0
 8000470:	4809      	ldr	r0, [pc, #36]	; (8000498 <MX_I2C1_Init+0x74>)
 8000472:	f001 fd99 	bl	8001fa8 <HAL_I2CEx_ConfigAnalogFilter>
 8000476:	4603      	mov	r3, r0
 8000478:	2b00      	cmp	r3, #0
 800047a:	d001      	beq.n	8000480 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 800047c:	f000 f878 	bl	8000570 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000480:	2100      	movs	r1, #0
 8000482:	4805      	ldr	r0, [pc, #20]	; (8000498 <MX_I2C1_Init+0x74>)
 8000484:	f001 fddb 	bl	800203e <HAL_I2CEx_ConfigDigitalFilter>
 8000488:	4603      	mov	r3, r0
 800048a:	2b00      	cmp	r3, #0
 800048c:	d001      	beq.n	8000492 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 800048e:	f000 f86f 	bl	8000570 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000492:	bf00      	nop
 8000494:	bd80      	pop	{r7, pc}
 8000496:	bf00      	nop
 8000498:	20000088 	.word	0x20000088
 800049c:	40005400 	.word	0x40005400
 80004a0:	2000090e 	.word	0x2000090e

080004a4 <MX_TIM16_Init>:
  * @brief TIM16 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM16_Init(void)
{
 80004a4:	b580      	push	{r7, lr}
 80004a6:	af00      	add	r7, sp, #0
  /* USER CODE END TIM16_Init 0 */

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 80004a8:	4b0f      	ldr	r3, [pc, #60]	; (80004e8 <MX_TIM16_Init+0x44>)
 80004aa:	4a10      	ldr	r2, [pc, #64]	; (80004ec <MX_TIM16_Init+0x48>)
 80004ac:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 63;
 80004ae:	4b0e      	ldr	r3, [pc, #56]	; (80004e8 <MX_TIM16_Init+0x44>)
 80004b0:	223f      	movs	r2, #63	; 0x3f
 80004b2:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 80004b4:	4b0c      	ldr	r3, [pc, #48]	; (80004e8 <MX_TIM16_Init+0x44>)
 80004b6:	2200      	movs	r2, #0
 80004b8:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 1000;
 80004ba:	4b0b      	ldr	r3, [pc, #44]	; (80004e8 <MX_TIM16_Init+0x44>)
 80004bc:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80004c0:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80004c2:	4b09      	ldr	r3, [pc, #36]	; (80004e8 <MX_TIM16_Init+0x44>)
 80004c4:	2200      	movs	r2, #0
 80004c6:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 80004c8:	4b07      	ldr	r3, [pc, #28]	; (80004e8 <MX_TIM16_Init+0x44>)
 80004ca:	2200      	movs	r2, #0
 80004cc:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80004ce:	4b06      	ldr	r3, [pc, #24]	; (80004e8 <MX_TIM16_Init+0x44>)
 80004d0:	2200      	movs	r2, #0
 80004d2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 80004d4:	4804      	ldr	r0, [pc, #16]	; (80004e8 <MX_TIM16_Init+0x44>)
 80004d6:	f003 f949 	bl	800376c <HAL_TIM_Base_Init>
 80004da:	4603      	mov	r3, r0
 80004dc:	2b00      	cmp	r3, #0
 80004de:	d001      	beq.n	80004e4 <MX_TIM16_Init+0x40>
  {
    Error_Handler();
 80004e0:	f000 f846 	bl	8000570 <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */

}
 80004e4:	bf00      	nop
 80004e6:	bd80      	pop	{r7, pc}
 80004e8:	200000dc 	.word	0x200000dc
 80004ec:	40014400 	.word	0x40014400

080004f0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80004f0:	b580      	push	{r7, lr}
 80004f2:	b088      	sub	sp, #32
 80004f4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80004f6:	f107 030c 	add.w	r3, r7, #12
 80004fa:	2200      	movs	r2, #0
 80004fc:	601a      	str	r2, [r3, #0]
 80004fe:	605a      	str	r2, [r3, #4]
 8000500:	609a      	str	r2, [r3, #8]
 8000502:	60da      	str	r2, [r3, #12]
 8000504:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000506:	4b18      	ldr	r3, [pc, #96]	; (8000568 <MX_GPIO_Init+0x78>)
 8000508:	695b      	ldr	r3, [r3, #20]
 800050a:	4a17      	ldr	r2, [pc, #92]	; (8000568 <MX_GPIO_Init+0x78>)
 800050c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000510:	6153      	str	r3, [r2, #20]
 8000512:	4b15      	ldr	r3, [pc, #84]	; (8000568 <MX_GPIO_Init+0x78>)
 8000514:	695b      	ldr	r3, [r3, #20]
 8000516:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800051a:	60bb      	str	r3, [r7, #8]
 800051c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800051e:	4b12      	ldr	r3, [pc, #72]	; (8000568 <MX_GPIO_Init+0x78>)
 8000520:	695b      	ldr	r3, [r3, #20]
 8000522:	4a11      	ldr	r2, [pc, #68]	; (8000568 <MX_GPIO_Init+0x78>)
 8000524:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000528:	6153      	str	r3, [r2, #20]
 800052a:	4b0f      	ldr	r3, [pc, #60]	; (8000568 <MX_GPIO_Init+0x78>)
 800052c:	695b      	ldr	r3, [r3, #20]
 800052e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000532:	607b      	str	r3, [r7, #4]
 8000534:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin : PF0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000536:	2301      	movs	r3, #1
 8000538:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800053a:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800053e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000540:	2300      	movs	r3, #0
 8000542:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000544:	f107 030c 	add.w	r3, r7, #12
 8000548:	4619      	mov	r1, r3
 800054a:	4808      	ldr	r0, [pc, #32]	; (800056c <MX_GPIO_Init+0x7c>)
 800054c:	f000 fd08 	bl	8000f60 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 8000550:	2200      	movs	r2, #0
 8000552:	2100      	movs	r1, #0
 8000554:	2006      	movs	r0, #6
 8000556:	f000 fccc 	bl	8000ef2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 800055a:	2006      	movs	r0, #6
 800055c:	f000 fce5 	bl	8000f2a <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000560:	bf00      	nop
 8000562:	3720      	adds	r7, #32
 8000564:	46bd      	mov	sp, r7
 8000566:	bd80      	pop	{r7, pc}
 8000568:	40021000 	.word	0x40021000
 800056c:	48001400 	.word	0x48001400

08000570 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000570:	b480      	push	{r7}
 8000572:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000574:	b672      	cpsid	i
}
 8000576:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000578:	e7fe      	b.n	8000578 <Error_Handler+0x8>

0800057a <twos_complement_size_to_float>:

// HAL_I2C handle for connection to MPU_6050
static I2C_HandleTypeDef *i2cHandle;

static float twos_complement_size_to_float(uint16_t input)
{
 800057a:	b480      	push	{r7}
 800057c:	b085      	sub	sp, #20
 800057e:	af00      	add	r7, sp, #0
 8000580:	4603      	mov	r3, r0
 8000582:	80fb      	strh	r3, [r7, #6]
	bool neg = false;
 8000584:	2300      	movs	r3, #0
 8000586:	73fb      	strb	r3, [r7, #15]

	// Negative number need to be taken out of two's complement
	if (input >> 15)
 8000588:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800058c:	2b00      	cmp	r3, #0
 800058e:	da04      	bge.n	800059a <twos_complement_size_to_float+0x20>
	{
		neg = true;
 8000590:	2301      	movs	r3, #1
 8000592:	73fb      	strb	r3, [r7, #15]
		input = ~(input) + 1;
 8000594:	88fb      	ldrh	r3, [r7, #6]
 8000596:	425b      	negs	r3, r3
 8000598:	80fb      	strh	r3, [r7, #6]
	}

	return neg ? -input : input;
 800059a:	7bfb      	ldrb	r3, [r7, #15]
 800059c:	2b00      	cmp	r3, #0
 800059e:	d006      	beq.n	80005ae <twos_complement_size_to_float+0x34>
 80005a0:	88fb      	ldrh	r3, [r7, #6]
 80005a2:	425b      	negs	r3, r3
 80005a4:	ee07 3a90 	vmov	s15, r3
 80005a8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80005ac:	e004      	b.n	80005b8 <twos_complement_size_to_float+0x3e>
 80005ae:	88fb      	ldrh	r3, [r7, #6]
 80005b0:	ee07 3a90 	vmov	s15, r3
 80005b4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
}
 80005b8:	eeb0 0a67 	vmov.f32	s0, s15
 80005bc:	3714      	adds	r7, #20
 80005be:	46bd      	mov	sp, r7
 80005c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005c4:	4770      	bx	lr
	...

080005c8 <mpu_read_value_register>:

// Specifically for burst reading the HIGH-LOW register pair scheme on the MPU60X0 gyro/accel.
static uint8_t mpu_read_value_register(uint8_t mpu_high_addr, uint16_t* data)
{
 80005c8:	b580      	push	{r7, lr}
 80005ca:	b088      	sub	sp, #32
 80005cc:	af04      	add	r7, sp, #16
 80005ce:	4603      	mov	r3, r0
 80005d0:	6039      	str	r1, [r7, #0]
 80005d2:	71fb      	strb	r3, [r7, #7]
	HAL_StatusTypeDef ret;

	// Burst read most-significant byte, then least significant byte.
	// Burst read is used because a pair of individual reads requires the master to check
	// whether the slave data has been updated since the first read.
	if ((ret = HAL_I2C_Mem_Read(i2cHandle,
 80005d4:	4b16      	ldr	r3, [pc, #88]	; (8000630 <mpu_read_value_register+0x68>)
 80005d6:	6818      	ldr	r0, [r3, #0]
 80005d8:	4b16      	ldr	r3, [pc, #88]	; (8000634 <mpu_read_value_register+0x6c>)
 80005da:	781b      	ldrb	r3, [r3, #0]
 80005dc:	b299      	uxth	r1, r3
 80005de:	79fb      	ldrb	r3, [r7, #7]
 80005e0:	b29a      	uxth	r2, r3
 80005e2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80005e6:	9302      	str	r3, [sp, #8]
 80005e8:	2302      	movs	r3, #2
 80005ea:	9301      	str	r3, [sp, #4]
 80005ec:	683b      	ldr	r3, [r7, #0]
 80005ee:	9300      	str	r3, [sp, #0]
 80005f0:	2301      	movs	r3, #1
 80005f2:	f000 ffe3 	bl	80015bc <HAL_I2C_Mem_Read>
 80005f6:	4603      	mov	r3, r0
 80005f8:	73fb      	strb	r3, [r7, #15]
 80005fa:	7bfb      	ldrb	r3, [r7, #15]
 80005fc:	2b00      	cmp	r3, #0
 80005fe:	d006      	beq.n	800060e <mpu_read_value_register+0x46>
								I2C_MEMADD_SIZE_8BIT,
								data,
								DATA_SIZE_TWO_BYTE,
								I2C_TIMEOUT_ONE_SECOND)) != HAL_OK)
	{
		printf("ERROR: Failed to read ACCEL_ZOUT_H. HALStatus: %i\n", ret);
 8000600:	7bfb      	ldrb	r3, [r7, #15]
 8000602:	4619      	mov	r1, r3
 8000604:	480c      	ldr	r0, [pc, #48]	; (8000638 <mpu_read_value_register+0x70>)
 8000606:	f003 fc05 	bl	8003e14 <iprintf>
		return MPU_RETCODE_ERR;
 800060a:	2301      	movs	r3, #1
 800060c:	e00c      	b.n	8000628 <mpu_read_value_register+0x60>
	}

	// Swap low and high bytes as MSB is read first

	uint8_t tmp = ((uint8_t*)data)[1];
 800060e:	683b      	ldr	r3, [r7, #0]
 8000610:	785b      	ldrb	r3, [r3, #1]
 8000612:	73bb      	strb	r3, [r7, #14]
	*data = *data << 8;
 8000614:	683b      	ldr	r3, [r7, #0]
 8000616:	881b      	ldrh	r3, [r3, #0]
 8000618:	021b      	lsls	r3, r3, #8
 800061a:	b29a      	uxth	r2, r3
 800061c:	683b      	ldr	r3, [r7, #0]
 800061e:	801a      	strh	r2, [r3, #0]
	((uint8_t*)data)[0] = tmp;
 8000620:	683b      	ldr	r3, [r7, #0]
 8000622:	7bba      	ldrb	r2, [r7, #14]
 8000624:	701a      	strb	r2, [r3, #0]

	return MPU_RETCODE_OK;
 8000626:	2300      	movs	r3, #0
}
 8000628:	4618      	mov	r0, r3
 800062a:	3710      	adds	r7, #16
 800062c:	46bd      	mov	sp, r7
 800062e:	bd80      	pop	{r7, pc}
 8000630:	2000014c 	.word	0x2000014c
 8000634:	20000000 	.word	0x20000000
 8000638:	08004bcc 	.word	0x08004bcc

0800063c <mpu_write_reg>:

// Write a single-byte register
static uint8_t mpu_write_reg(uint8_t reg_addr, uint8_t data)
{
 800063c:	b580      	push	{r7, lr}
 800063e:	b088      	sub	sp, #32
 8000640:	af04      	add	r7, sp, #16
 8000642:	4603      	mov	r3, r0
 8000644:	460a      	mov	r2, r1
 8000646:	71fb      	strb	r3, [r7, #7]
 8000648:	4613      	mov	r3, r2
 800064a:	71bb      	strb	r3, [r7, #6]
	HAL_StatusTypeDef ret;

	if ((ret = HAL_I2C_Mem_Write(i2cHandle,
 800064c:	4b11      	ldr	r3, [pc, #68]	; (8000694 <mpu_write_reg+0x58>)
 800064e:	6818      	ldr	r0, [r3, #0]
 8000650:	4b11      	ldr	r3, [pc, #68]	; (8000698 <mpu_write_reg+0x5c>)
 8000652:	781b      	ldrb	r3, [r3, #0]
 8000654:	b299      	uxth	r1, r3
 8000656:	79fb      	ldrb	r3, [r7, #7]
 8000658:	b29a      	uxth	r2, r3
 800065a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800065e:	9302      	str	r3, [sp, #8]
 8000660:	2301      	movs	r3, #1
 8000662:	9301      	str	r3, [sp, #4]
 8000664:	1dbb      	adds	r3, r7, #6
 8000666:	9300      	str	r3, [sp, #0]
 8000668:	2301      	movs	r3, #1
 800066a:	f000 fe93 	bl	8001394 <HAL_I2C_Mem_Write>
 800066e:	4603      	mov	r3, r0
 8000670:	73fb      	strb	r3, [r7, #15]
 8000672:	7bfb      	ldrb	r3, [r7, #15]
 8000674:	2b00      	cmp	r3, #0
 8000676:	d007      	beq.n	8000688 <mpu_write_reg+0x4c>
									I2C_MEMADD_SIZE_8BIT,
									&data,
									DATA_SIZE_ONE_BYTE,
									I2C_TIMEOUT_ONE_SECOND)) != HAL_OK)
	{
		printf("ERROR: Failed to set register %i. HALStatus: %i\n", reg_addr, ret);
 8000678:	79fb      	ldrb	r3, [r7, #7]
 800067a:	7bfa      	ldrb	r2, [r7, #15]
 800067c:	4619      	mov	r1, r3
 800067e:	4807      	ldr	r0, [pc, #28]	; (800069c <mpu_write_reg+0x60>)
 8000680:	f003 fbc8 	bl	8003e14 <iprintf>
		return MPU_RETCODE_ERR;
 8000684:	2301      	movs	r3, #1
 8000686:	e000      	b.n	800068a <mpu_write_reg+0x4e>
	}

	return MPU_RETCODE_OK;
 8000688:	2300      	movs	r3, #0
}
 800068a:	4618      	mov	r0, r3
 800068c:	3710      	adds	r7, #16
 800068e:	46bd      	mov	sp, r7
 8000690:	bd80      	pop	{r7, pc}
 8000692:	bf00      	nop
 8000694:	2000014c 	.word	0x2000014c
 8000698:	20000000 	.word	0x20000000
 800069c:	08004c00 	.word	0x08004c00

080006a0 <MPUSetDataReadyInterruptEnable>:

	return MPU_RETCODE_OK;
}

uint8_t MPUSetDataReadyInterruptEnable(bool value)
{
 80006a0:	b580      	push	{r7, lr}
 80006a2:	b082      	sub	sp, #8
 80006a4:	af00      	add	r7, sp, #0
 80006a6:	4603      	mov	r3, r0
 80006a8:	71fb      	strb	r3, [r7, #7]
	if(mpu_write_reg(intEnableAddr, value ? intEnableEnabled : intEnableDisabled))
 80006aa:	2238      	movs	r2, #56	; 0x38
 80006ac:	79fb      	ldrb	r3, [r7, #7]
 80006ae:	2b00      	cmp	r3, #0
 80006b0:	d001      	beq.n	80006b6 <MPUSetDataReadyInterruptEnable+0x16>
 80006b2:	2301      	movs	r3, #1
 80006b4:	e000      	b.n	80006b8 <MPUSetDataReadyInterruptEnable+0x18>
 80006b6:	2300      	movs	r3, #0
 80006b8:	4619      	mov	r1, r3
 80006ba:	4610      	mov	r0, r2
 80006bc:	f7ff ffbe 	bl	800063c <mpu_write_reg>
 80006c0:	4603      	mov	r3, r0
 80006c2:	2b00      	cmp	r3, #0
 80006c4:	d004      	beq.n	80006d0 <MPUSetDataReadyInterruptEnable+0x30>
	{
		printf("ERROR: Failed to enable/disable data ready interrupt.");
 80006c6:	4805      	ldr	r0, [pc, #20]	; (80006dc <MPUSetDataReadyInterruptEnable+0x3c>)
 80006c8:	f003 fba4 	bl	8003e14 <iprintf>
		return MPU_RETCODE_ERR;
 80006cc:	2301      	movs	r3, #1
 80006ce:	e000      	b.n	80006d2 <MPUSetDataReadyInterruptEnable+0x32>
	}

	return MPU_RETCODE_OK;
 80006d0:	2300      	movs	r3, #0
}
 80006d2:	4618      	mov	r0, r3
 80006d4:	3708      	adds	r7, #8
 80006d6:	46bd      	mov	sp, r7
 80006d8:	bd80      	pop	{r7, pc}
 80006da:	bf00      	nop
 80006dc:	08004ca8 	.word	0x08004ca8

080006e0 <MPUInit>:

uint8_t MPUInit(I2C_HandleTypeDef *hi2c1, bool AD0)
{
 80006e0:	b580      	push	{r7, lr}
 80006e2:	b084      	sub	sp, #16
 80006e4:	af00      	add	r7, sp, #0
 80006e6:	6078      	str	r0, [r7, #4]
 80006e8:	460b      	mov	r3, r1
 80006ea:	70fb      	strb	r3, [r7, #3]
	HAL_StatusTypeDef ret;

	// Store I2C handle in static variable, so it needn't be passed to all calls.
	i2cHandle = hi2c1;
 80006ec:	4a19      	ldr	r2, [pc, #100]	; (8000754 <MPUInit+0x74>)
 80006ee:	687b      	ldr	r3, [r7, #4]
 80006f0:	6013      	str	r3, [r2, #0]

	// Update LSB of i2cAddr depending on AD0 pin. Shift left for R/W flag.
	i2cAddr |= (AD0 << 1);
 80006f2:	78fb      	ldrb	r3, [r7, #3]
 80006f4:	005b      	lsls	r3, r3, #1
 80006f6:	b25a      	sxtb	r2, r3
 80006f8:	4b17      	ldr	r3, [pc, #92]	; (8000758 <MPUInit+0x78>)
 80006fa:	781b      	ldrb	r3, [r3, #0]
 80006fc:	b25b      	sxtb	r3, r3
 80006fe:	4313      	orrs	r3, r2
 8000700:	b25b      	sxtb	r3, r3
 8000702:	b2da      	uxtb	r2, r3
 8000704:	4b14      	ldr	r3, [pc, #80]	; (8000758 <MPUInit+0x78>)
 8000706:	701a      	strb	r2, [r3, #0]

	while((ret = HAL_I2C_IsDeviceReady(i2cHandle, i2cAddr, 64, 1000)) != HAL_OK);
 8000708:	bf00      	nop
 800070a:	4b12      	ldr	r3, [pc, #72]	; (8000754 <MPUInit+0x74>)
 800070c:	6818      	ldr	r0, [r3, #0]
 800070e:	4b12      	ldr	r3, [pc, #72]	; (8000758 <MPUInit+0x78>)
 8000710:	781b      	ldrb	r3, [r3, #0]
 8000712:	b299      	uxth	r1, r3
 8000714:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000718:	2240      	movs	r2, #64	; 0x40
 800071a:	f001 f869 	bl	80017f0 <HAL_I2C_IsDeviceReady>
 800071e:	4603      	mov	r3, r0
 8000720:	73fb      	strb	r3, [r7, #15]
 8000722:	7bfb      	ldrb	r3, [r7, #15]
 8000724:	2b00      	cmp	r3, #0
 8000726:	d1f0      	bne.n	800070a <MPUInit+0x2a>

	if(mpu_write_reg(pwrMgmtAddr, pwrMgmtNoSleep))
 8000728:	236b      	movs	r3, #107	; 0x6b
 800072a:	2200      	movs	r2, #0
 800072c:	4611      	mov	r1, r2
 800072e:	4618      	mov	r0, r3
 8000730:	f7ff ff84 	bl	800063c <mpu_write_reg>
 8000734:	4603      	mov	r3, r0
 8000736:	2b00      	cmp	r3, #0
 8000738:	d006      	beq.n	8000748 <MPUInit+0x68>
	{
		printf("ERROR: Failed to reset PWR_MGMT1 register. HALStatus: %i\n", ret);
 800073a:	7bfb      	ldrb	r3, [r7, #15]
 800073c:	4619      	mov	r1, r3
 800073e:	4807      	ldr	r0, [pc, #28]	; (800075c <MPUInit+0x7c>)
 8000740:	f003 fb68 	bl	8003e14 <iprintf>
		return MPU_RETCODE_ERR;
 8000744:	2301      	movs	r3, #1
 8000746:	e000      	b.n	800074a <MPUInit+0x6a>
	}

	return MPU_RETCODE_OK;
 8000748:	2300      	movs	r3, #0
}
 800074a:	4618      	mov	r0, r3
 800074c:	3710      	adds	r7, #16
 800074e:	46bd      	mov	sp, r7
 8000750:	bd80      	pop	{r7, pc}
 8000752:	bf00      	nop
 8000754:	2000014c 	.word	0x2000014c
 8000758:	20000000 	.word	0x20000000
 800075c:	08004ce0 	.word	0x08004ce0

08000760 <MPUGetAccel>:

uint8_t MPUGetAccel(float *oData)
{
 8000760:	b590      	push	{r4, r7, lr}
 8000762:	b087      	sub	sp, #28
 8000764:	af00      	add	r7, sp, #0
 8000766:	6078      	str	r0, [r7, #4]
	HAL_StatusTypeDef ret;
	uint16_t data[3] = {0, 0, 0};
 8000768:	2300      	movs	r3, #0
 800076a:	81bb      	strh	r3, [r7, #12]
 800076c:	2300      	movs	r3, #0
 800076e:	81fb      	strh	r3, [r7, #14]
 8000770:	2300      	movs	r3, #0
 8000772:	823b      	strh	r3, [r7, #16]

	memset(oData, 0, sizeof(float) * 3);
 8000774:	220c      	movs	r2, #12
 8000776:	2100      	movs	r1, #0
 8000778:	6878      	ldr	r0, [r7, #4]
 800077a:	f003 fc91 	bl	80040a0 <memset>

	if (!i2cHandle)
 800077e:	4b27      	ldr	r3, [pc, #156]	; (800081c <MPUGetAccel+0xbc>)
 8000780:	681b      	ldr	r3, [r3, #0]
 8000782:	2b00      	cmp	r3, #0
 8000784:	d104      	bne.n	8000790 <MPUGetAccel+0x30>
	{
		printf("ERROR: Must initialise MPU6050 before attempting to read.\n");
 8000786:	4826      	ldr	r0, [pc, #152]	; (8000820 <MPUGetAccel+0xc0>)
 8000788:	f003 fbaa 	bl	8003ee0 <puts>
		return MPU_RETCODE_ERR;
 800078c:	2301      	movs	r3, #1
 800078e:	e041      	b.n	8000814 <MPUGetAccel+0xb4>
	}

	mpu_read_value_register(accelZHighAddr, &data[ACCEL_Z_INDEX]);
 8000790:	223f      	movs	r2, #63	; 0x3f
 8000792:	f107 030c 	add.w	r3, r7, #12
 8000796:	3304      	adds	r3, #4
 8000798:	4619      	mov	r1, r3
 800079a:	4610      	mov	r0, r2
 800079c:	f7ff ff14 	bl	80005c8 <mpu_read_value_register>
	mpu_read_value_register(accelYHighAddr, &data[ACCEL_Y_INDEX]);
 80007a0:	223d      	movs	r2, #61	; 0x3d
 80007a2:	f107 030c 	add.w	r3, r7, #12
 80007a6:	3302      	adds	r3, #2
 80007a8:	4619      	mov	r1, r3
 80007aa:	4610      	mov	r0, r2
 80007ac:	f7ff ff0c 	bl	80005c8 <mpu_read_value_register>
	mpu_read_value_register(accelXHighAddr, &data[ACCEL_X_INDEX]);
 80007b0:	223b      	movs	r2, #59	; 0x3b
 80007b2:	f107 030c 	add.w	r3, r7, #12
 80007b6:	4619      	mov	r1, r3
 80007b8:	4610      	mov	r0, r2
 80007ba:	f7ff ff05 	bl	80005c8 <mpu_read_value_register>

	// Normalise the data
	for (int i = 0; i <= 2; i++)
 80007be:	2300      	movs	r3, #0
 80007c0:	617b      	str	r3, [r7, #20]
 80007c2:	e023      	b.n	800080c <MPUGetAccel+0xac>
	{
		oData[i] = twos_complement_size_to_float(data[i]);
 80007c4:	697b      	ldr	r3, [r7, #20]
 80007c6:	005b      	lsls	r3, r3, #1
 80007c8:	3318      	adds	r3, #24
 80007ca:	443b      	add	r3, r7
 80007cc:	f833 1c0c 	ldrh.w	r1, [r3, #-12]
 80007d0:	697b      	ldr	r3, [r7, #20]
 80007d2:	009b      	lsls	r3, r3, #2
 80007d4:	687a      	ldr	r2, [r7, #4]
 80007d6:	18d4      	adds	r4, r2, r3
 80007d8:	4608      	mov	r0, r1
 80007da:	f7ff fece 	bl	800057a <twos_complement_size_to_float>
 80007de:	eef0 7a40 	vmov.f32	s15, s0
 80007e2:	edc4 7a00 	vstr	s15, [r4]
		oData[i] = oData[i] / 16384; // scale factor for 1g
 80007e6:	697b      	ldr	r3, [r7, #20]
 80007e8:	009b      	lsls	r3, r3, #2
 80007ea:	687a      	ldr	r2, [r7, #4]
 80007ec:	4413      	add	r3, r2
 80007ee:	ed93 7a00 	vldr	s14, [r3]
 80007f2:	697b      	ldr	r3, [r7, #20]
 80007f4:	009b      	lsls	r3, r3, #2
 80007f6:	687a      	ldr	r2, [r7, #4]
 80007f8:	4413      	add	r3, r2
 80007fa:	eddf 6a0a 	vldr	s13, [pc, #40]	; 8000824 <MPUGetAccel+0xc4>
 80007fe:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000802:	edc3 7a00 	vstr	s15, [r3]
	for (int i = 0; i <= 2; i++)
 8000806:	697b      	ldr	r3, [r7, #20]
 8000808:	3301      	adds	r3, #1
 800080a:	617b      	str	r3, [r7, #20]
 800080c:	697b      	ldr	r3, [r7, #20]
 800080e:	2b02      	cmp	r3, #2
 8000810:	ddd8      	ble.n	80007c4 <MPUGetAccel+0x64>
	}

	return MPU_RETCODE_OK;
 8000812:	2300      	movs	r3, #0
}
 8000814:	4618      	mov	r0, r3
 8000816:	371c      	adds	r7, #28
 8000818:	46bd      	mov	sp, r7
 800081a:	bd90      	pop	{r4, r7, pc}
 800081c:	2000014c 	.word	0x2000014c
 8000820:	08004d1c 	.word	0x08004d1c
 8000824:	46800000 	.word	0x46800000

08000828 <MPUGetGyro>:

uint8_t MPUGetGyro(float *oData)
{
 8000828:	b590      	push	{r4, r7, lr}
 800082a:	b087      	sub	sp, #28
 800082c:	af00      	add	r7, sp, #0
 800082e:	6078      	str	r0, [r7, #4]
	HAL_StatusTypeDef ret;
	uint16_t data[3] = {0, 0, 0};
 8000830:	2300      	movs	r3, #0
 8000832:	81bb      	strh	r3, [r7, #12]
 8000834:	2300      	movs	r3, #0
 8000836:	81fb      	strh	r3, [r7, #14]
 8000838:	2300      	movs	r3, #0
 800083a:	823b      	strh	r3, [r7, #16]

	memset(oData, 0, sizeof(uint16_t) * 3);
 800083c:	2206      	movs	r2, #6
 800083e:	2100      	movs	r1, #0
 8000840:	6878      	ldr	r0, [r7, #4]
 8000842:	f003 fc2d 	bl	80040a0 <memset>

	if (!i2cHandle)
 8000846:	4b29      	ldr	r3, [pc, #164]	; (80008ec <MPUGetGyro+0xc4>)
 8000848:	681b      	ldr	r3, [r3, #0]
 800084a:	2b00      	cmp	r3, #0
 800084c:	d104      	bne.n	8000858 <MPUGetGyro+0x30>
	{
		printf("ERROR: Must initialise MPU6050 before attempting to read.\n");
 800084e:	4828      	ldr	r0, [pc, #160]	; (80008f0 <MPUGetGyro+0xc8>)
 8000850:	f003 fb46 	bl	8003ee0 <puts>
		return MPU_RETCODE_ERR;
 8000854:	2301      	movs	r3, #1
 8000856:	e044      	b.n	80008e2 <MPUGetGyro+0xba>
	}

	mpu_read_value_register(gyroZHighAddr, &data[GYRO_Z_INDEX]);
 8000858:	2347      	movs	r3, #71	; 0x47
 800085a:	b2da      	uxtb	r2, r3
 800085c:	f107 030c 	add.w	r3, r7, #12
 8000860:	3304      	adds	r3, #4
 8000862:	4619      	mov	r1, r3
 8000864:	4610      	mov	r0, r2
 8000866:	f7ff feaf 	bl	80005c8 <mpu_read_value_register>
	mpu_read_value_register(gyroYHighAddr, &data[GYRO_Y_INDEX]);
 800086a:	2345      	movs	r3, #69	; 0x45
 800086c:	b2da      	uxtb	r2, r3
 800086e:	f107 030c 	add.w	r3, r7, #12
 8000872:	3302      	adds	r3, #2
 8000874:	4619      	mov	r1, r3
 8000876:	4610      	mov	r0, r2
 8000878:	f7ff fea6 	bl	80005c8 <mpu_read_value_register>
	mpu_read_value_register(gyroXHighAddr, &data[GYRO_X_INDEX]);
 800087c:	2343      	movs	r3, #67	; 0x43
 800087e:	b2db      	uxtb	r3, r3
 8000880:	f107 020c 	add.w	r2, r7, #12
 8000884:	4611      	mov	r1, r2
 8000886:	4618      	mov	r0, r3
 8000888:	f7ff fe9e 	bl	80005c8 <mpu_read_value_register>

	// Get two's complement of data.
	for (int i = 0; i <= 2; i++)
 800088c:	2300      	movs	r3, #0
 800088e:	617b      	str	r3, [r7, #20]
 8000890:	e023      	b.n	80008da <MPUGetGyro+0xb2>
	{
		oData[i] = twos_complement_size_to_float(data[i]);
 8000892:	697b      	ldr	r3, [r7, #20]
 8000894:	005b      	lsls	r3, r3, #1
 8000896:	3318      	adds	r3, #24
 8000898:	443b      	add	r3, r7
 800089a:	f833 1c0c 	ldrh.w	r1, [r3, #-12]
 800089e:	697b      	ldr	r3, [r7, #20]
 80008a0:	009b      	lsls	r3, r3, #2
 80008a2:	687a      	ldr	r2, [r7, #4]
 80008a4:	18d4      	adds	r4, r2, r3
 80008a6:	4608      	mov	r0, r1
 80008a8:	f7ff fe67 	bl	800057a <twos_complement_size_to_float>
 80008ac:	eef0 7a40 	vmov.f32	s15, s0
 80008b0:	edc4 7a00 	vstr	s15, [r4]
		oData[i] = oData[i] / 131; // Scale factor for degrees per second.
 80008b4:	697b      	ldr	r3, [r7, #20]
 80008b6:	009b      	lsls	r3, r3, #2
 80008b8:	687a      	ldr	r2, [r7, #4]
 80008ba:	4413      	add	r3, r2
 80008bc:	ed93 7a00 	vldr	s14, [r3]
 80008c0:	697b      	ldr	r3, [r7, #20]
 80008c2:	009b      	lsls	r3, r3, #2
 80008c4:	687a      	ldr	r2, [r7, #4]
 80008c6:	4413      	add	r3, r2
 80008c8:	eddf 6a0a 	vldr	s13, [pc, #40]	; 80008f4 <MPUGetGyro+0xcc>
 80008cc:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80008d0:	edc3 7a00 	vstr	s15, [r3]
	for (int i = 0; i <= 2; i++)
 80008d4:	697b      	ldr	r3, [r7, #20]
 80008d6:	3301      	adds	r3, #1
 80008d8:	617b      	str	r3, [r7, #20]
 80008da:	697b      	ldr	r3, [r7, #20]
 80008dc:	2b02      	cmp	r3, #2
 80008de:	ddd8      	ble.n	8000892 <MPUGetGyro+0x6a>
	}

	return MPU_RETCODE_OK;
 80008e0:	2300      	movs	r3, #0
}
 80008e2:	4618      	mov	r0, r3
 80008e4:	371c      	adds	r7, #28
 80008e6:	46bd      	mov	sp, r7
 80008e8:	bd90      	pop	{r4, r7, pc}
 80008ea:	bf00      	nop
 80008ec:	2000014c 	.word	0x2000014c
 80008f0:	08004d1c 	.word	0x08004d1c
 80008f4:	43030000 	.word	0x43030000

080008f8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80008f8:	b480      	push	{r7}
 80008fa:	b083      	sub	sp, #12
 80008fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80008fe:	4b0f      	ldr	r3, [pc, #60]	; (800093c <HAL_MspInit+0x44>)
 8000900:	699b      	ldr	r3, [r3, #24]
 8000902:	4a0e      	ldr	r2, [pc, #56]	; (800093c <HAL_MspInit+0x44>)
 8000904:	f043 0301 	orr.w	r3, r3, #1
 8000908:	6193      	str	r3, [r2, #24]
 800090a:	4b0c      	ldr	r3, [pc, #48]	; (800093c <HAL_MspInit+0x44>)
 800090c:	699b      	ldr	r3, [r3, #24]
 800090e:	f003 0301 	and.w	r3, r3, #1
 8000912:	607b      	str	r3, [r7, #4]
 8000914:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000916:	4b09      	ldr	r3, [pc, #36]	; (800093c <HAL_MspInit+0x44>)
 8000918:	69db      	ldr	r3, [r3, #28]
 800091a:	4a08      	ldr	r2, [pc, #32]	; (800093c <HAL_MspInit+0x44>)
 800091c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000920:	61d3      	str	r3, [r2, #28]
 8000922:	4b06      	ldr	r3, [pc, #24]	; (800093c <HAL_MspInit+0x44>)
 8000924:	69db      	ldr	r3, [r3, #28]
 8000926:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800092a:	603b      	str	r3, [r7, #0]
 800092c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800092e:	bf00      	nop
 8000930:	370c      	adds	r7, #12
 8000932:	46bd      	mov	sp, r7
 8000934:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000938:	4770      	bx	lr
 800093a:	bf00      	nop
 800093c:	40021000 	.word	0x40021000

08000940 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000940:	b580      	push	{r7, lr}
 8000942:	b08a      	sub	sp, #40	; 0x28
 8000944:	af00      	add	r7, sp, #0
 8000946:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000948:	f107 0314 	add.w	r3, r7, #20
 800094c:	2200      	movs	r2, #0
 800094e:	601a      	str	r2, [r3, #0]
 8000950:	605a      	str	r2, [r3, #4]
 8000952:	609a      	str	r2, [r3, #8]
 8000954:	60da      	str	r2, [r3, #12]
 8000956:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000958:	687b      	ldr	r3, [r7, #4]
 800095a:	681b      	ldr	r3, [r3, #0]
 800095c:	4a1b      	ldr	r2, [pc, #108]	; (80009cc <HAL_I2C_MspInit+0x8c>)
 800095e:	4293      	cmp	r3, r2
 8000960:	d12f      	bne.n	80009c2 <HAL_I2C_MspInit+0x82>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000962:	4b1b      	ldr	r3, [pc, #108]	; (80009d0 <HAL_I2C_MspInit+0x90>)
 8000964:	695b      	ldr	r3, [r3, #20]
 8000966:	4a1a      	ldr	r2, [pc, #104]	; (80009d0 <HAL_I2C_MspInit+0x90>)
 8000968:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800096c:	6153      	str	r3, [r2, #20]
 800096e:	4b18      	ldr	r3, [pc, #96]	; (80009d0 <HAL_I2C_MspInit+0x90>)
 8000970:	695b      	ldr	r3, [r3, #20]
 8000972:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000976:	613b      	str	r3, [r7, #16]
 8000978:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800097a:	23c0      	movs	r3, #192	; 0xc0
 800097c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800097e:	2312      	movs	r3, #18
 8000980:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000982:	2301      	movs	r3, #1
 8000984:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000986:	2303      	movs	r3, #3
 8000988:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800098a:	2304      	movs	r3, #4
 800098c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800098e:	f107 0314 	add.w	r3, r7, #20
 8000992:	4619      	mov	r1, r3
 8000994:	480f      	ldr	r0, [pc, #60]	; (80009d4 <HAL_I2C_MspInit+0x94>)
 8000996:	f000 fae3 	bl	8000f60 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800099a:	4b0d      	ldr	r3, [pc, #52]	; (80009d0 <HAL_I2C_MspInit+0x90>)
 800099c:	69db      	ldr	r3, [r3, #28]
 800099e:	4a0c      	ldr	r2, [pc, #48]	; (80009d0 <HAL_I2C_MspInit+0x90>)
 80009a0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80009a4:	61d3      	str	r3, [r2, #28]
 80009a6:	4b0a      	ldr	r3, [pc, #40]	; (80009d0 <HAL_I2C_MspInit+0x90>)
 80009a8:	69db      	ldr	r3, [r3, #28]
 80009aa:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80009ae:	60fb      	str	r3, [r7, #12]
 80009b0:	68fb      	ldr	r3, [r7, #12]
    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 80009b2:	2200      	movs	r2, #0
 80009b4:	2100      	movs	r1, #0
 80009b6:	201f      	movs	r0, #31
 80009b8:	f000 fa9b 	bl	8000ef2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 80009bc:	201f      	movs	r0, #31
 80009be:	f000 fab4 	bl	8000f2a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80009c2:	bf00      	nop
 80009c4:	3728      	adds	r7, #40	; 0x28
 80009c6:	46bd      	mov	sp, r7
 80009c8:	bd80      	pop	{r7, pc}
 80009ca:	bf00      	nop
 80009cc:	40005400 	.word	0x40005400
 80009d0:	40021000 	.word	0x40021000
 80009d4:	48000400 	.word	0x48000400

080009d8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80009d8:	b580      	push	{r7, lr}
 80009da:	b084      	sub	sp, #16
 80009dc:	af00      	add	r7, sp, #0
 80009de:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM16)
 80009e0:	687b      	ldr	r3, [r7, #4]
 80009e2:	681b      	ldr	r3, [r3, #0]
 80009e4:	4a0d      	ldr	r2, [pc, #52]	; (8000a1c <HAL_TIM_Base_MspInit+0x44>)
 80009e6:	4293      	cmp	r3, r2
 80009e8:	d113      	bne.n	8000a12 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM16_MspInit 0 */

  /* USER CODE END TIM16_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM16_CLK_ENABLE();
 80009ea:	4b0d      	ldr	r3, [pc, #52]	; (8000a20 <HAL_TIM_Base_MspInit+0x48>)
 80009ec:	699b      	ldr	r3, [r3, #24]
 80009ee:	4a0c      	ldr	r2, [pc, #48]	; (8000a20 <HAL_TIM_Base_MspInit+0x48>)
 80009f0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80009f4:	6193      	str	r3, [r2, #24]
 80009f6:	4b0a      	ldr	r3, [pc, #40]	; (8000a20 <HAL_TIM_Base_MspInit+0x48>)
 80009f8:	699b      	ldr	r3, [r3, #24]
 80009fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80009fe:	60fb      	str	r3, [r7, #12]
 8000a00:	68fb      	ldr	r3, [r7, #12]
    /* TIM16 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 8000a02:	2200      	movs	r2, #0
 8000a04:	2100      	movs	r1, #0
 8000a06:	2019      	movs	r0, #25
 8000a08:	f000 fa73 	bl	8000ef2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8000a0c:	2019      	movs	r0, #25
 8000a0e:	f000 fa8c 	bl	8000f2a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM16_MspInit 1 */

  /* USER CODE END TIM16_MspInit 1 */
  }

}
 8000a12:	bf00      	nop
 8000a14:	3710      	adds	r7, #16
 8000a16:	46bd      	mov	sp, r7
 8000a18:	bd80      	pop	{r7, pc}
 8000a1a:	bf00      	nop
 8000a1c:	40014400 	.word	0x40014400
 8000a20:	40021000 	.word	0x40021000

08000a24 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000a24:	b480      	push	{r7}
 8000a26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000a28:	e7fe      	b.n	8000a28 <NMI_Handler+0x4>

08000a2a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000a2a:	b480      	push	{r7}
 8000a2c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000a2e:	e7fe      	b.n	8000a2e <HardFault_Handler+0x4>

08000a30 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000a30:	b480      	push	{r7}
 8000a32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000a34:	e7fe      	b.n	8000a34 <MemManage_Handler+0x4>

08000a36 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000a36:	b480      	push	{r7}
 8000a38:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000a3a:	e7fe      	b.n	8000a3a <BusFault_Handler+0x4>

08000a3c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000a3c:	b480      	push	{r7}
 8000a3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000a40:	e7fe      	b.n	8000a40 <UsageFault_Handler+0x4>

08000a42 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000a42:	b480      	push	{r7}
 8000a44:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000a46:	bf00      	nop
 8000a48:	46bd      	mov	sp, r7
 8000a4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a4e:	4770      	bx	lr

08000a50 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000a50:	b480      	push	{r7}
 8000a52:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000a54:	bf00      	nop
 8000a56:	46bd      	mov	sp, r7
 8000a58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a5c:	4770      	bx	lr

08000a5e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000a5e:	b480      	push	{r7}
 8000a60:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000a62:	bf00      	nop
 8000a64:	46bd      	mov	sp, r7
 8000a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a6a:	4770      	bx	lr

08000a6c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000a6c:	b580      	push	{r7, lr}
 8000a6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000a70:	f000 f944 	bl	8000cfc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000a74:	bf00      	nop
 8000a76:	bd80      	pop	{r7, pc}

08000a78 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line 0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8000a78:	b580      	push	{r7, lr}
 8000a7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 8000a7c:	2001      	movs	r0, #1
 8000a7e:	f000 fbe1 	bl	8001244 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8000a82:	bf00      	nop
 8000a84:	bd80      	pop	{r7, pc}
	...

08000a88 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update and TIM16 interrupts.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 8000a88:	b580      	push	{r7, lr}
 8000a8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim16);
 8000a8c:	4802      	ldr	r0, [pc, #8]	; (8000a98 <TIM1_UP_TIM16_IRQHandler+0x10>)
 8000a8e:	f002 ff21 	bl	80038d4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 8000a92:	bf00      	nop
 8000a94:	bd80      	pop	{r7, pc}
 8000a96:	bf00      	nop
 8000a98:	200000dc 	.word	0x200000dc

08000a9c <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event global interrupt / I2C1 wake-up interrupt through EXT line 23.
  */
void I2C1_EV_IRQHandler(void)
{
 8000a9c:	b580      	push	{r7, lr}
 8000a9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8000aa0:	4802      	ldr	r0, [pc, #8]	; (8000aac <I2C1_EV_IRQHandler+0x10>)
 8000aa2:	f000 ffae 	bl	8001a02 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 8000aa6:	bf00      	nop
 8000aa8:	bd80      	pop	{r7, pc}
 8000aaa:	bf00      	nop
 8000aac:	20000088 	.word	0x20000088

08000ab0 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000ab0:	b580      	push	{r7, lr}
 8000ab2:	b086      	sub	sp, #24
 8000ab4:	af00      	add	r7, sp, #0
 8000ab6:	60f8      	str	r0, [r7, #12]
 8000ab8:	60b9      	str	r1, [r7, #8]
 8000aba:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000abc:	2300      	movs	r3, #0
 8000abe:	617b      	str	r3, [r7, #20]
 8000ac0:	e00a      	b.n	8000ad8 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000ac2:	f3af 8000 	nop.w
 8000ac6:	4601      	mov	r1, r0
 8000ac8:	68bb      	ldr	r3, [r7, #8]
 8000aca:	1c5a      	adds	r2, r3, #1
 8000acc:	60ba      	str	r2, [r7, #8]
 8000ace:	b2ca      	uxtb	r2, r1
 8000ad0:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000ad2:	697b      	ldr	r3, [r7, #20]
 8000ad4:	3301      	adds	r3, #1
 8000ad6:	617b      	str	r3, [r7, #20]
 8000ad8:	697a      	ldr	r2, [r7, #20]
 8000ada:	687b      	ldr	r3, [r7, #4]
 8000adc:	429a      	cmp	r2, r3
 8000ade:	dbf0      	blt.n	8000ac2 <_read+0x12>
  }

  return len;
 8000ae0:	687b      	ldr	r3, [r7, #4]
}
 8000ae2:	4618      	mov	r0, r3
 8000ae4:	3718      	adds	r7, #24
 8000ae6:	46bd      	mov	sp, r7
 8000ae8:	bd80      	pop	{r7, pc}

08000aea <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000aea:	b580      	push	{r7, lr}
 8000aec:	b086      	sub	sp, #24
 8000aee:	af00      	add	r7, sp, #0
 8000af0:	60f8      	str	r0, [r7, #12]
 8000af2:	60b9      	str	r1, [r7, #8]
 8000af4:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000af6:	2300      	movs	r3, #0
 8000af8:	617b      	str	r3, [r7, #20]
 8000afa:	e009      	b.n	8000b10 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000afc:	68bb      	ldr	r3, [r7, #8]
 8000afe:	1c5a      	adds	r2, r3, #1
 8000b00:	60ba      	str	r2, [r7, #8]
 8000b02:	781b      	ldrb	r3, [r3, #0]
 8000b04:	4618      	mov	r0, r3
 8000b06:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000b0a:	697b      	ldr	r3, [r7, #20]
 8000b0c:	3301      	adds	r3, #1
 8000b0e:	617b      	str	r3, [r7, #20]
 8000b10:	697a      	ldr	r2, [r7, #20]
 8000b12:	687b      	ldr	r3, [r7, #4]
 8000b14:	429a      	cmp	r2, r3
 8000b16:	dbf1      	blt.n	8000afc <_write+0x12>
  }
  return len;
 8000b18:	687b      	ldr	r3, [r7, #4]
}
 8000b1a:	4618      	mov	r0, r3
 8000b1c:	3718      	adds	r7, #24
 8000b1e:	46bd      	mov	sp, r7
 8000b20:	bd80      	pop	{r7, pc}

08000b22 <_close>:

int _close(int file)
{
 8000b22:	b480      	push	{r7}
 8000b24:	b083      	sub	sp, #12
 8000b26:	af00      	add	r7, sp, #0
 8000b28:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000b2a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8000b2e:	4618      	mov	r0, r3
 8000b30:	370c      	adds	r7, #12
 8000b32:	46bd      	mov	sp, r7
 8000b34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b38:	4770      	bx	lr

08000b3a <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000b3a:	b480      	push	{r7}
 8000b3c:	b083      	sub	sp, #12
 8000b3e:	af00      	add	r7, sp, #0
 8000b40:	6078      	str	r0, [r7, #4]
 8000b42:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000b44:	683b      	ldr	r3, [r7, #0]
 8000b46:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000b4a:	605a      	str	r2, [r3, #4]
  return 0;
 8000b4c:	2300      	movs	r3, #0
}
 8000b4e:	4618      	mov	r0, r3
 8000b50:	370c      	adds	r7, #12
 8000b52:	46bd      	mov	sp, r7
 8000b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b58:	4770      	bx	lr

08000b5a <_isatty>:

int _isatty(int file)
{
 8000b5a:	b480      	push	{r7}
 8000b5c:	b083      	sub	sp, #12
 8000b5e:	af00      	add	r7, sp, #0
 8000b60:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000b62:	2301      	movs	r3, #1
}
 8000b64:	4618      	mov	r0, r3
 8000b66:	370c      	adds	r7, #12
 8000b68:	46bd      	mov	sp, r7
 8000b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b6e:	4770      	bx	lr

08000b70 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000b70:	b480      	push	{r7}
 8000b72:	b085      	sub	sp, #20
 8000b74:	af00      	add	r7, sp, #0
 8000b76:	60f8      	str	r0, [r7, #12]
 8000b78:	60b9      	str	r1, [r7, #8]
 8000b7a:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000b7c:	2300      	movs	r3, #0
}
 8000b7e:	4618      	mov	r0, r3
 8000b80:	3714      	adds	r7, #20
 8000b82:	46bd      	mov	sp, r7
 8000b84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b88:	4770      	bx	lr
	...

08000b8c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000b8c:	b580      	push	{r7, lr}
 8000b8e:	b086      	sub	sp, #24
 8000b90:	af00      	add	r7, sp, #0
 8000b92:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000b94:	4a14      	ldr	r2, [pc, #80]	; (8000be8 <_sbrk+0x5c>)
 8000b96:	4b15      	ldr	r3, [pc, #84]	; (8000bec <_sbrk+0x60>)
 8000b98:	1ad3      	subs	r3, r2, r3
 8000b9a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000b9c:	697b      	ldr	r3, [r7, #20]
 8000b9e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000ba0:	4b13      	ldr	r3, [pc, #76]	; (8000bf0 <_sbrk+0x64>)
 8000ba2:	681b      	ldr	r3, [r3, #0]
 8000ba4:	2b00      	cmp	r3, #0
 8000ba6:	d102      	bne.n	8000bae <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000ba8:	4b11      	ldr	r3, [pc, #68]	; (8000bf0 <_sbrk+0x64>)
 8000baa:	4a12      	ldr	r2, [pc, #72]	; (8000bf4 <_sbrk+0x68>)
 8000bac:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000bae:	4b10      	ldr	r3, [pc, #64]	; (8000bf0 <_sbrk+0x64>)
 8000bb0:	681a      	ldr	r2, [r3, #0]
 8000bb2:	687b      	ldr	r3, [r7, #4]
 8000bb4:	4413      	add	r3, r2
 8000bb6:	693a      	ldr	r2, [r7, #16]
 8000bb8:	429a      	cmp	r2, r3
 8000bba:	d207      	bcs.n	8000bcc <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000bbc:	f003 fabe 	bl	800413c <__errno>
 8000bc0:	4603      	mov	r3, r0
 8000bc2:	220c      	movs	r2, #12
 8000bc4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000bc6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000bca:	e009      	b.n	8000be0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000bcc:	4b08      	ldr	r3, [pc, #32]	; (8000bf0 <_sbrk+0x64>)
 8000bce:	681b      	ldr	r3, [r3, #0]
 8000bd0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000bd2:	4b07      	ldr	r3, [pc, #28]	; (8000bf0 <_sbrk+0x64>)
 8000bd4:	681a      	ldr	r2, [r3, #0]
 8000bd6:	687b      	ldr	r3, [r7, #4]
 8000bd8:	4413      	add	r3, r2
 8000bda:	4a05      	ldr	r2, [pc, #20]	; (8000bf0 <_sbrk+0x64>)
 8000bdc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000bde:	68fb      	ldr	r3, [r7, #12]
}
 8000be0:	4618      	mov	r0, r3
 8000be2:	3718      	adds	r7, #24
 8000be4:	46bd      	mov	sp, r7
 8000be6:	bd80      	pop	{r7, pc}
 8000be8:	20003000 	.word	0x20003000
 8000bec:	00000400 	.word	0x00000400
 8000bf0:	20000150 	.word	0x20000150
 8000bf4:	200002a8 	.word	0x200002a8

08000bf8 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000bf8:	b480      	push	{r7}
 8000bfa:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000bfc:	4b06      	ldr	r3, [pc, #24]	; (8000c18 <SystemInit+0x20>)
 8000bfe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000c02:	4a05      	ldr	r2, [pc, #20]	; (8000c18 <SystemInit+0x20>)
 8000c04:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000c08:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000c0c:	bf00      	nop
 8000c0e:	46bd      	mov	sp, r7
 8000c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c14:	4770      	bx	lr
 8000c16:	bf00      	nop
 8000c18:	e000ed00 	.word	0xe000ed00

08000c1c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000c1c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000c54 <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8000c20:	f7ff ffea 	bl	8000bf8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000c24:	480c      	ldr	r0, [pc, #48]	; (8000c58 <LoopForever+0x6>)
  ldr r1, =_edata
 8000c26:	490d      	ldr	r1, [pc, #52]	; (8000c5c <LoopForever+0xa>)
  ldr r2, =_sidata
 8000c28:	4a0d      	ldr	r2, [pc, #52]	; (8000c60 <LoopForever+0xe>)
  movs r3, #0
 8000c2a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000c2c:	e002      	b.n	8000c34 <LoopCopyDataInit>

08000c2e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000c2e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000c30:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000c32:	3304      	adds	r3, #4

08000c34 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000c34:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000c36:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000c38:	d3f9      	bcc.n	8000c2e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000c3a:	4a0a      	ldr	r2, [pc, #40]	; (8000c64 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000c3c:	4c0a      	ldr	r4, [pc, #40]	; (8000c68 <LoopForever+0x16>)
  movs r3, #0
 8000c3e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000c40:	e001      	b.n	8000c46 <LoopFillZerobss>

08000c42 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000c42:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000c44:	3204      	adds	r2, #4

08000c46 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000c46:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000c48:	d3fb      	bcc.n	8000c42 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000c4a:	f003 fa7d 	bl	8004148 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000c4e:	f7ff fb33 	bl	80002b8 <main>

08000c52 <LoopForever>:

LoopForever:
    b LoopForever
 8000c52:	e7fe      	b.n	8000c52 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000c54:	20003000 	.word	0x20003000
  ldr r0, =_sdata
 8000c58:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000c5c:	2000006c 	.word	0x2000006c
  ldr r2, =_sidata
 8000c60:	08004df8 	.word	0x08004df8
  ldr r2, =_sbss
 8000c64:	2000006c 	.word	0x2000006c
  ldr r4, =_ebss
 8000c68:	200002a4 	.word	0x200002a4

08000c6c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000c6c:	e7fe      	b.n	8000c6c <ADC1_2_IRQHandler>
	...

08000c70 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000c70:	b580      	push	{r7, lr}
 8000c72:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000c74:	4b08      	ldr	r3, [pc, #32]	; (8000c98 <HAL_Init+0x28>)
 8000c76:	681b      	ldr	r3, [r3, #0]
 8000c78:	4a07      	ldr	r2, [pc, #28]	; (8000c98 <HAL_Init+0x28>)
 8000c7a:	f043 0310 	orr.w	r3, r3, #16
 8000c7e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000c80:	2003      	movs	r0, #3
 8000c82:	f000 f92b 	bl	8000edc <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000c86:	200f      	movs	r0, #15
 8000c88:	f000 f808 	bl	8000c9c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000c8c:	f7ff fe34 	bl	80008f8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000c90:	2300      	movs	r3, #0
}
 8000c92:	4618      	mov	r0, r3
 8000c94:	bd80      	pop	{r7, pc}
 8000c96:	bf00      	nop
 8000c98:	40022000 	.word	0x40022000

08000c9c <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000c9c:	b580      	push	{r7, lr}
 8000c9e:	b082      	sub	sp, #8
 8000ca0:	af00      	add	r7, sp, #0
 8000ca2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000ca4:	4b12      	ldr	r3, [pc, #72]	; (8000cf0 <HAL_InitTick+0x54>)
 8000ca6:	681a      	ldr	r2, [r3, #0]
 8000ca8:	4b12      	ldr	r3, [pc, #72]	; (8000cf4 <HAL_InitTick+0x58>)
 8000caa:	781b      	ldrb	r3, [r3, #0]
 8000cac:	4619      	mov	r1, r3
 8000cae:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000cb2:	fbb3 f3f1 	udiv	r3, r3, r1
 8000cb6:	fbb2 f3f3 	udiv	r3, r2, r3
 8000cba:	4618      	mov	r0, r3
 8000cbc:	f000 f943 	bl	8000f46 <HAL_SYSTICK_Config>
 8000cc0:	4603      	mov	r3, r0
 8000cc2:	2b00      	cmp	r3, #0
 8000cc4:	d001      	beq.n	8000cca <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000cc6:	2301      	movs	r3, #1
 8000cc8:	e00e      	b.n	8000ce8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000cca:	687b      	ldr	r3, [r7, #4]
 8000ccc:	2b0f      	cmp	r3, #15
 8000cce:	d80a      	bhi.n	8000ce6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000cd0:	2200      	movs	r2, #0
 8000cd2:	6879      	ldr	r1, [r7, #4]
 8000cd4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000cd8:	f000 f90b 	bl	8000ef2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000cdc:	4a06      	ldr	r2, [pc, #24]	; (8000cf8 <HAL_InitTick+0x5c>)
 8000cde:	687b      	ldr	r3, [r7, #4]
 8000ce0:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8000ce2:	2300      	movs	r3, #0
 8000ce4:	e000      	b.n	8000ce8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000ce6:	2301      	movs	r3, #1
}
 8000ce8:	4618      	mov	r0, r3
 8000cea:	3708      	adds	r7, #8
 8000cec:	46bd      	mov	sp, r7
 8000cee:	bd80      	pop	{r7, pc}
 8000cf0:	20000004 	.word	0x20000004
 8000cf4:	2000000c 	.word	0x2000000c
 8000cf8:	20000008 	.word	0x20000008

08000cfc <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000cfc:	b480      	push	{r7}
 8000cfe:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000d00:	4b06      	ldr	r3, [pc, #24]	; (8000d1c <HAL_IncTick+0x20>)
 8000d02:	781b      	ldrb	r3, [r3, #0]
 8000d04:	461a      	mov	r2, r3
 8000d06:	4b06      	ldr	r3, [pc, #24]	; (8000d20 <HAL_IncTick+0x24>)
 8000d08:	681b      	ldr	r3, [r3, #0]
 8000d0a:	4413      	add	r3, r2
 8000d0c:	4a04      	ldr	r2, [pc, #16]	; (8000d20 <HAL_IncTick+0x24>)
 8000d0e:	6013      	str	r3, [r2, #0]
}
 8000d10:	bf00      	nop
 8000d12:	46bd      	mov	sp, r7
 8000d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d18:	4770      	bx	lr
 8000d1a:	bf00      	nop
 8000d1c:	2000000c 	.word	0x2000000c
 8000d20:	20000154 	.word	0x20000154

08000d24 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000d24:	b480      	push	{r7}
 8000d26:	af00      	add	r7, sp, #0
  return uwTick;  
 8000d28:	4b03      	ldr	r3, [pc, #12]	; (8000d38 <HAL_GetTick+0x14>)
 8000d2a:	681b      	ldr	r3, [r3, #0]
}
 8000d2c:	4618      	mov	r0, r3
 8000d2e:	46bd      	mov	sp, r7
 8000d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d34:	4770      	bx	lr
 8000d36:	bf00      	nop
 8000d38:	20000154 	.word	0x20000154

08000d3c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d3c:	b480      	push	{r7}
 8000d3e:	b085      	sub	sp, #20
 8000d40:	af00      	add	r7, sp, #0
 8000d42:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000d44:	687b      	ldr	r3, [r7, #4]
 8000d46:	f003 0307 	and.w	r3, r3, #7
 8000d4a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000d4c:	4b0c      	ldr	r3, [pc, #48]	; (8000d80 <__NVIC_SetPriorityGrouping+0x44>)
 8000d4e:	68db      	ldr	r3, [r3, #12]
 8000d50:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000d52:	68ba      	ldr	r2, [r7, #8]
 8000d54:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000d58:	4013      	ands	r3, r2
 8000d5a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000d5c:	68fb      	ldr	r3, [r7, #12]
 8000d5e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000d60:	68bb      	ldr	r3, [r7, #8]
 8000d62:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000d64:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000d68:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000d6c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000d6e:	4a04      	ldr	r2, [pc, #16]	; (8000d80 <__NVIC_SetPriorityGrouping+0x44>)
 8000d70:	68bb      	ldr	r3, [r7, #8]
 8000d72:	60d3      	str	r3, [r2, #12]
}
 8000d74:	bf00      	nop
 8000d76:	3714      	adds	r7, #20
 8000d78:	46bd      	mov	sp, r7
 8000d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d7e:	4770      	bx	lr
 8000d80:	e000ed00 	.word	0xe000ed00

08000d84 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000d84:	b480      	push	{r7}
 8000d86:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000d88:	4b04      	ldr	r3, [pc, #16]	; (8000d9c <__NVIC_GetPriorityGrouping+0x18>)
 8000d8a:	68db      	ldr	r3, [r3, #12]
 8000d8c:	0a1b      	lsrs	r3, r3, #8
 8000d8e:	f003 0307 	and.w	r3, r3, #7
}
 8000d92:	4618      	mov	r0, r3
 8000d94:	46bd      	mov	sp, r7
 8000d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d9a:	4770      	bx	lr
 8000d9c:	e000ed00 	.word	0xe000ed00

08000da0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000da0:	b480      	push	{r7}
 8000da2:	b083      	sub	sp, #12
 8000da4:	af00      	add	r7, sp, #0
 8000da6:	4603      	mov	r3, r0
 8000da8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000daa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dae:	2b00      	cmp	r3, #0
 8000db0:	db0b      	blt.n	8000dca <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000db2:	79fb      	ldrb	r3, [r7, #7]
 8000db4:	f003 021f 	and.w	r2, r3, #31
 8000db8:	4907      	ldr	r1, [pc, #28]	; (8000dd8 <__NVIC_EnableIRQ+0x38>)
 8000dba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dbe:	095b      	lsrs	r3, r3, #5
 8000dc0:	2001      	movs	r0, #1
 8000dc2:	fa00 f202 	lsl.w	r2, r0, r2
 8000dc6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000dca:	bf00      	nop
 8000dcc:	370c      	adds	r7, #12
 8000dce:	46bd      	mov	sp, r7
 8000dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dd4:	4770      	bx	lr
 8000dd6:	bf00      	nop
 8000dd8:	e000e100 	.word	0xe000e100

08000ddc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000ddc:	b480      	push	{r7}
 8000dde:	b083      	sub	sp, #12
 8000de0:	af00      	add	r7, sp, #0
 8000de2:	4603      	mov	r3, r0
 8000de4:	6039      	str	r1, [r7, #0]
 8000de6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000de8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dec:	2b00      	cmp	r3, #0
 8000dee:	db0a      	blt.n	8000e06 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000df0:	683b      	ldr	r3, [r7, #0]
 8000df2:	b2da      	uxtb	r2, r3
 8000df4:	490c      	ldr	r1, [pc, #48]	; (8000e28 <__NVIC_SetPriority+0x4c>)
 8000df6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dfa:	0112      	lsls	r2, r2, #4
 8000dfc:	b2d2      	uxtb	r2, r2
 8000dfe:	440b      	add	r3, r1
 8000e00:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000e04:	e00a      	b.n	8000e1c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e06:	683b      	ldr	r3, [r7, #0]
 8000e08:	b2da      	uxtb	r2, r3
 8000e0a:	4908      	ldr	r1, [pc, #32]	; (8000e2c <__NVIC_SetPriority+0x50>)
 8000e0c:	79fb      	ldrb	r3, [r7, #7]
 8000e0e:	f003 030f 	and.w	r3, r3, #15
 8000e12:	3b04      	subs	r3, #4
 8000e14:	0112      	lsls	r2, r2, #4
 8000e16:	b2d2      	uxtb	r2, r2
 8000e18:	440b      	add	r3, r1
 8000e1a:	761a      	strb	r2, [r3, #24]
}
 8000e1c:	bf00      	nop
 8000e1e:	370c      	adds	r7, #12
 8000e20:	46bd      	mov	sp, r7
 8000e22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e26:	4770      	bx	lr
 8000e28:	e000e100 	.word	0xe000e100
 8000e2c:	e000ed00 	.word	0xe000ed00

08000e30 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000e30:	b480      	push	{r7}
 8000e32:	b089      	sub	sp, #36	; 0x24
 8000e34:	af00      	add	r7, sp, #0
 8000e36:	60f8      	str	r0, [r7, #12]
 8000e38:	60b9      	str	r1, [r7, #8]
 8000e3a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000e3c:	68fb      	ldr	r3, [r7, #12]
 8000e3e:	f003 0307 	and.w	r3, r3, #7
 8000e42:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000e44:	69fb      	ldr	r3, [r7, #28]
 8000e46:	f1c3 0307 	rsb	r3, r3, #7
 8000e4a:	2b04      	cmp	r3, #4
 8000e4c:	bf28      	it	cs
 8000e4e:	2304      	movcs	r3, #4
 8000e50:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000e52:	69fb      	ldr	r3, [r7, #28]
 8000e54:	3304      	adds	r3, #4
 8000e56:	2b06      	cmp	r3, #6
 8000e58:	d902      	bls.n	8000e60 <NVIC_EncodePriority+0x30>
 8000e5a:	69fb      	ldr	r3, [r7, #28]
 8000e5c:	3b03      	subs	r3, #3
 8000e5e:	e000      	b.n	8000e62 <NVIC_EncodePriority+0x32>
 8000e60:	2300      	movs	r3, #0
 8000e62:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e64:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000e68:	69bb      	ldr	r3, [r7, #24]
 8000e6a:	fa02 f303 	lsl.w	r3, r2, r3
 8000e6e:	43da      	mvns	r2, r3
 8000e70:	68bb      	ldr	r3, [r7, #8]
 8000e72:	401a      	ands	r2, r3
 8000e74:	697b      	ldr	r3, [r7, #20]
 8000e76:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000e78:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000e7c:	697b      	ldr	r3, [r7, #20]
 8000e7e:	fa01 f303 	lsl.w	r3, r1, r3
 8000e82:	43d9      	mvns	r1, r3
 8000e84:	687b      	ldr	r3, [r7, #4]
 8000e86:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e88:	4313      	orrs	r3, r2
         );
}
 8000e8a:	4618      	mov	r0, r3
 8000e8c:	3724      	adds	r7, #36	; 0x24
 8000e8e:	46bd      	mov	sp, r7
 8000e90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e94:	4770      	bx	lr
	...

08000e98 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000e98:	b580      	push	{r7, lr}
 8000e9a:	b082      	sub	sp, #8
 8000e9c:	af00      	add	r7, sp, #0
 8000e9e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000ea0:	687b      	ldr	r3, [r7, #4]
 8000ea2:	3b01      	subs	r3, #1
 8000ea4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000ea8:	d301      	bcc.n	8000eae <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000eaa:	2301      	movs	r3, #1
 8000eac:	e00f      	b.n	8000ece <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000eae:	4a0a      	ldr	r2, [pc, #40]	; (8000ed8 <SysTick_Config+0x40>)
 8000eb0:	687b      	ldr	r3, [r7, #4]
 8000eb2:	3b01      	subs	r3, #1
 8000eb4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000eb6:	210f      	movs	r1, #15
 8000eb8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000ebc:	f7ff ff8e 	bl	8000ddc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000ec0:	4b05      	ldr	r3, [pc, #20]	; (8000ed8 <SysTick_Config+0x40>)
 8000ec2:	2200      	movs	r2, #0
 8000ec4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000ec6:	4b04      	ldr	r3, [pc, #16]	; (8000ed8 <SysTick_Config+0x40>)
 8000ec8:	2207      	movs	r2, #7
 8000eca:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000ecc:	2300      	movs	r3, #0
}
 8000ece:	4618      	mov	r0, r3
 8000ed0:	3708      	adds	r7, #8
 8000ed2:	46bd      	mov	sp, r7
 8000ed4:	bd80      	pop	{r7, pc}
 8000ed6:	bf00      	nop
 8000ed8:	e000e010 	.word	0xe000e010

08000edc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000edc:	b580      	push	{r7, lr}
 8000ede:	b082      	sub	sp, #8
 8000ee0:	af00      	add	r7, sp, #0
 8000ee2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000ee4:	6878      	ldr	r0, [r7, #4]
 8000ee6:	f7ff ff29 	bl	8000d3c <__NVIC_SetPriorityGrouping>
}
 8000eea:	bf00      	nop
 8000eec:	3708      	adds	r7, #8
 8000eee:	46bd      	mov	sp, r7
 8000ef0:	bd80      	pop	{r7, pc}

08000ef2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000ef2:	b580      	push	{r7, lr}
 8000ef4:	b086      	sub	sp, #24
 8000ef6:	af00      	add	r7, sp, #0
 8000ef8:	4603      	mov	r3, r0
 8000efa:	60b9      	str	r1, [r7, #8]
 8000efc:	607a      	str	r2, [r7, #4]
 8000efe:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000f00:	2300      	movs	r3, #0
 8000f02:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000f04:	f7ff ff3e 	bl	8000d84 <__NVIC_GetPriorityGrouping>
 8000f08:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000f0a:	687a      	ldr	r2, [r7, #4]
 8000f0c:	68b9      	ldr	r1, [r7, #8]
 8000f0e:	6978      	ldr	r0, [r7, #20]
 8000f10:	f7ff ff8e 	bl	8000e30 <NVIC_EncodePriority>
 8000f14:	4602      	mov	r2, r0
 8000f16:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000f1a:	4611      	mov	r1, r2
 8000f1c:	4618      	mov	r0, r3
 8000f1e:	f7ff ff5d 	bl	8000ddc <__NVIC_SetPriority>
}
 8000f22:	bf00      	nop
 8000f24:	3718      	adds	r7, #24
 8000f26:	46bd      	mov	sp, r7
 8000f28:	bd80      	pop	{r7, pc}

08000f2a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f2a:	b580      	push	{r7, lr}
 8000f2c:	b082      	sub	sp, #8
 8000f2e:	af00      	add	r7, sp, #0
 8000f30:	4603      	mov	r3, r0
 8000f32:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000f34:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f38:	4618      	mov	r0, r3
 8000f3a:	f7ff ff31 	bl	8000da0 <__NVIC_EnableIRQ>
}
 8000f3e:	bf00      	nop
 8000f40:	3708      	adds	r7, #8
 8000f42:	46bd      	mov	sp, r7
 8000f44:	bd80      	pop	{r7, pc}

08000f46 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000f46:	b580      	push	{r7, lr}
 8000f48:	b082      	sub	sp, #8
 8000f4a:	af00      	add	r7, sp, #0
 8000f4c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000f4e:	6878      	ldr	r0, [r7, #4]
 8000f50:	f7ff ffa2 	bl	8000e98 <SysTick_Config>
 8000f54:	4603      	mov	r3, r0
}
 8000f56:	4618      	mov	r0, r3
 8000f58:	3708      	adds	r7, #8
 8000f5a:	46bd      	mov	sp, r7
 8000f5c:	bd80      	pop	{r7, pc}
	...

08000f60 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000f60:	b480      	push	{r7}
 8000f62:	b087      	sub	sp, #28
 8000f64:	af00      	add	r7, sp, #0
 8000f66:	6078      	str	r0, [r7, #4]
 8000f68:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000f6a:	2300      	movs	r3, #0
 8000f6c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000f6e:	e14e      	b.n	800120e <HAL_GPIO_Init+0x2ae>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000f70:	683b      	ldr	r3, [r7, #0]
 8000f72:	681a      	ldr	r2, [r3, #0]
 8000f74:	2101      	movs	r1, #1
 8000f76:	697b      	ldr	r3, [r7, #20]
 8000f78:	fa01 f303 	lsl.w	r3, r1, r3
 8000f7c:	4013      	ands	r3, r2
 8000f7e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000f80:	68fb      	ldr	r3, [r7, #12]
 8000f82:	2b00      	cmp	r3, #0
 8000f84:	f000 8140 	beq.w	8001208 <HAL_GPIO_Init+0x2a8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000f88:	683b      	ldr	r3, [r7, #0]
 8000f8a:	685b      	ldr	r3, [r3, #4]
 8000f8c:	f003 0303 	and.w	r3, r3, #3
 8000f90:	2b01      	cmp	r3, #1
 8000f92:	d005      	beq.n	8000fa0 <HAL_GPIO_Init+0x40>
 8000f94:	683b      	ldr	r3, [r7, #0]
 8000f96:	685b      	ldr	r3, [r3, #4]
 8000f98:	f003 0303 	and.w	r3, r3, #3
 8000f9c:	2b02      	cmp	r3, #2
 8000f9e:	d130      	bne.n	8001002 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000fa0:	687b      	ldr	r3, [r7, #4]
 8000fa2:	689b      	ldr	r3, [r3, #8]
 8000fa4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8000fa6:	697b      	ldr	r3, [r7, #20]
 8000fa8:	005b      	lsls	r3, r3, #1
 8000faa:	2203      	movs	r2, #3
 8000fac:	fa02 f303 	lsl.w	r3, r2, r3
 8000fb0:	43db      	mvns	r3, r3
 8000fb2:	693a      	ldr	r2, [r7, #16]
 8000fb4:	4013      	ands	r3, r2
 8000fb6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000fb8:	683b      	ldr	r3, [r7, #0]
 8000fba:	68da      	ldr	r2, [r3, #12]
 8000fbc:	697b      	ldr	r3, [r7, #20]
 8000fbe:	005b      	lsls	r3, r3, #1
 8000fc0:	fa02 f303 	lsl.w	r3, r2, r3
 8000fc4:	693a      	ldr	r2, [r7, #16]
 8000fc6:	4313      	orrs	r3, r2
 8000fc8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	693a      	ldr	r2, [r7, #16]
 8000fce:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	685b      	ldr	r3, [r3, #4]
 8000fd4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000fd6:	2201      	movs	r2, #1
 8000fd8:	697b      	ldr	r3, [r7, #20]
 8000fda:	fa02 f303 	lsl.w	r3, r2, r3
 8000fde:	43db      	mvns	r3, r3
 8000fe0:	693a      	ldr	r2, [r7, #16]
 8000fe2:	4013      	ands	r3, r2
 8000fe4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000fe6:	683b      	ldr	r3, [r7, #0]
 8000fe8:	685b      	ldr	r3, [r3, #4]
 8000fea:	091b      	lsrs	r3, r3, #4
 8000fec:	f003 0201 	and.w	r2, r3, #1
 8000ff0:	697b      	ldr	r3, [r7, #20]
 8000ff2:	fa02 f303 	lsl.w	r3, r2, r3
 8000ff6:	693a      	ldr	r2, [r7, #16]
 8000ff8:	4313      	orrs	r3, r2
 8000ffa:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	693a      	ldr	r2, [r7, #16]
 8001000:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001002:	683b      	ldr	r3, [r7, #0]
 8001004:	685b      	ldr	r3, [r3, #4]
 8001006:	f003 0303 	and.w	r3, r3, #3
 800100a:	2b03      	cmp	r3, #3
 800100c:	d017      	beq.n	800103e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	68db      	ldr	r3, [r3, #12]
 8001012:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8001014:	697b      	ldr	r3, [r7, #20]
 8001016:	005b      	lsls	r3, r3, #1
 8001018:	2203      	movs	r2, #3
 800101a:	fa02 f303 	lsl.w	r3, r2, r3
 800101e:	43db      	mvns	r3, r3
 8001020:	693a      	ldr	r2, [r7, #16]
 8001022:	4013      	ands	r3, r2
 8001024:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001026:	683b      	ldr	r3, [r7, #0]
 8001028:	689a      	ldr	r2, [r3, #8]
 800102a:	697b      	ldr	r3, [r7, #20]
 800102c:	005b      	lsls	r3, r3, #1
 800102e:	fa02 f303 	lsl.w	r3, r2, r3
 8001032:	693a      	ldr	r2, [r7, #16]
 8001034:	4313      	orrs	r3, r2
 8001036:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	693a      	ldr	r2, [r7, #16]
 800103c:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800103e:	683b      	ldr	r3, [r7, #0]
 8001040:	685b      	ldr	r3, [r3, #4]
 8001042:	f003 0303 	and.w	r3, r3, #3
 8001046:	2b02      	cmp	r3, #2
 8001048:	d123      	bne.n	8001092 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800104a:	697b      	ldr	r3, [r7, #20]
 800104c:	08da      	lsrs	r2, r3, #3
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	3208      	adds	r2, #8
 8001052:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001056:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001058:	697b      	ldr	r3, [r7, #20]
 800105a:	f003 0307 	and.w	r3, r3, #7
 800105e:	009b      	lsls	r3, r3, #2
 8001060:	220f      	movs	r2, #15
 8001062:	fa02 f303 	lsl.w	r3, r2, r3
 8001066:	43db      	mvns	r3, r3
 8001068:	693a      	ldr	r2, [r7, #16]
 800106a:	4013      	ands	r3, r2
 800106c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800106e:	683b      	ldr	r3, [r7, #0]
 8001070:	691a      	ldr	r2, [r3, #16]
 8001072:	697b      	ldr	r3, [r7, #20]
 8001074:	f003 0307 	and.w	r3, r3, #7
 8001078:	009b      	lsls	r3, r3, #2
 800107a:	fa02 f303 	lsl.w	r3, r2, r3
 800107e:	693a      	ldr	r2, [r7, #16]
 8001080:	4313      	orrs	r3, r2
 8001082:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001084:	697b      	ldr	r3, [r7, #20]
 8001086:	08da      	lsrs	r2, r3, #3
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	3208      	adds	r2, #8
 800108c:	6939      	ldr	r1, [r7, #16]
 800108e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	681b      	ldr	r3, [r3, #0]
 8001096:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8001098:	697b      	ldr	r3, [r7, #20]
 800109a:	005b      	lsls	r3, r3, #1
 800109c:	2203      	movs	r2, #3
 800109e:	fa02 f303 	lsl.w	r3, r2, r3
 80010a2:	43db      	mvns	r3, r3
 80010a4:	693a      	ldr	r2, [r7, #16]
 80010a6:	4013      	ands	r3, r2
 80010a8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80010aa:	683b      	ldr	r3, [r7, #0]
 80010ac:	685b      	ldr	r3, [r3, #4]
 80010ae:	f003 0203 	and.w	r2, r3, #3
 80010b2:	697b      	ldr	r3, [r7, #20]
 80010b4:	005b      	lsls	r3, r3, #1
 80010b6:	fa02 f303 	lsl.w	r3, r2, r3
 80010ba:	693a      	ldr	r2, [r7, #16]
 80010bc:	4313      	orrs	r3, r2
 80010be:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	693a      	ldr	r2, [r7, #16]
 80010c4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80010c6:	683b      	ldr	r3, [r7, #0]
 80010c8:	685b      	ldr	r3, [r3, #4]
 80010ca:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80010ce:	2b00      	cmp	r3, #0
 80010d0:	f000 809a 	beq.w	8001208 <HAL_GPIO_Init+0x2a8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80010d4:	4b55      	ldr	r3, [pc, #340]	; (800122c <HAL_GPIO_Init+0x2cc>)
 80010d6:	699b      	ldr	r3, [r3, #24]
 80010d8:	4a54      	ldr	r2, [pc, #336]	; (800122c <HAL_GPIO_Init+0x2cc>)
 80010da:	f043 0301 	orr.w	r3, r3, #1
 80010de:	6193      	str	r3, [r2, #24]
 80010e0:	4b52      	ldr	r3, [pc, #328]	; (800122c <HAL_GPIO_Init+0x2cc>)
 80010e2:	699b      	ldr	r3, [r3, #24]
 80010e4:	f003 0301 	and.w	r3, r3, #1
 80010e8:	60bb      	str	r3, [r7, #8]
 80010ea:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80010ec:	4a50      	ldr	r2, [pc, #320]	; (8001230 <HAL_GPIO_Init+0x2d0>)
 80010ee:	697b      	ldr	r3, [r7, #20]
 80010f0:	089b      	lsrs	r3, r3, #2
 80010f2:	3302      	adds	r3, #2
 80010f4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80010f8:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80010fa:	697b      	ldr	r3, [r7, #20]
 80010fc:	f003 0303 	and.w	r3, r3, #3
 8001100:	009b      	lsls	r3, r3, #2
 8001102:	220f      	movs	r2, #15
 8001104:	fa02 f303 	lsl.w	r3, r2, r3
 8001108:	43db      	mvns	r3, r3
 800110a:	693a      	ldr	r2, [r7, #16]
 800110c:	4013      	ands	r3, r2
 800110e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001116:	d013      	beq.n	8001140 <HAL_GPIO_Init+0x1e0>
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	4a46      	ldr	r2, [pc, #280]	; (8001234 <HAL_GPIO_Init+0x2d4>)
 800111c:	4293      	cmp	r3, r2
 800111e:	d00d      	beq.n	800113c <HAL_GPIO_Init+0x1dc>
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	4a45      	ldr	r2, [pc, #276]	; (8001238 <HAL_GPIO_Init+0x2d8>)
 8001124:	4293      	cmp	r3, r2
 8001126:	d007      	beq.n	8001138 <HAL_GPIO_Init+0x1d8>
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	4a44      	ldr	r2, [pc, #272]	; (800123c <HAL_GPIO_Init+0x2dc>)
 800112c:	4293      	cmp	r3, r2
 800112e:	d101      	bne.n	8001134 <HAL_GPIO_Init+0x1d4>
 8001130:	2303      	movs	r3, #3
 8001132:	e006      	b.n	8001142 <HAL_GPIO_Init+0x1e2>
 8001134:	2305      	movs	r3, #5
 8001136:	e004      	b.n	8001142 <HAL_GPIO_Init+0x1e2>
 8001138:	2302      	movs	r3, #2
 800113a:	e002      	b.n	8001142 <HAL_GPIO_Init+0x1e2>
 800113c:	2301      	movs	r3, #1
 800113e:	e000      	b.n	8001142 <HAL_GPIO_Init+0x1e2>
 8001140:	2300      	movs	r3, #0
 8001142:	697a      	ldr	r2, [r7, #20]
 8001144:	f002 0203 	and.w	r2, r2, #3
 8001148:	0092      	lsls	r2, r2, #2
 800114a:	4093      	lsls	r3, r2
 800114c:	693a      	ldr	r2, [r7, #16]
 800114e:	4313      	orrs	r3, r2
 8001150:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001152:	4937      	ldr	r1, [pc, #220]	; (8001230 <HAL_GPIO_Init+0x2d0>)
 8001154:	697b      	ldr	r3, [r7, #20]
 8001156:	089b      	lsrs	r3, r3, #2
 8001158:	3302      	adds	r3, #2
 800115a:	693a      	ldr	r2, [r7, #16]
 800115c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001160:	4b37      	ldr	r3, [pc, #220]	; (8001240 <HAL_GPIO_Init+0x2e0>)
 8001162:	689b      	ldr	r3, [r3, #8]
 8001164:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001166:	68fb      	ldr	r3, [r7, #12]
 8001168:	43db      	mvns	r3, r3
 800116a:	693a      	ldr	r2, [r7, #16]
 800116c:	4013      	ands	r3, r2
 800116e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001170:	683b      	ldr	r3, [r7, #0]
 8001172:	685b      	ldr	r3, [r3, #4]
 8001174:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001178:	2b00      	cmp	r3, #0
 800117a:	d003      	beq.n	8001184 <HAL_GPIO_Init+0x224>
        {
          temp |= iocurrent;
 800117c:	693a      	ldr	r2, [r7, #16]
 800117e:	68fb      	ldr	r3, [r7, #12]
 8001180:	4313      	orrs	r3, r2
 8001182:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8001184:	4a2e      	ldr	r2, [pc, #184]	; (8001240 <HAL_GPIO_Init+0x2e0>)
 8001186:	693b      	ldr	r3, [r7, #16]
 8001188:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800118a:	4b2d      	ldr	r3, [pc, #180]	; (8001240 <HAL_GPIO_Init+0x2e0>)
 800118c:	68db      	ldr	r3, [r3, #12]
 800118e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001190:	68fb      	ldr	r3, [r7, #12]
 8001192:	43db      	mvns	r3, r3
 8001194:	693a      	ldr	r2, [r7, #16]
 8001196:	4013      	ands	r3, r2
 8001198:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800119a:	683b      	ldr	r3, [r7, #0]
 800119c:	685b      	ldr	r3, [r3, #4]
 800119e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80011a2:	2b00      	cmp	r3, #0
 80011a4:	d003      	beq.n	80011ae <HAL_GPIO_Init+0x24e>
        {
          temp |= iocurrent;
 80011a6:	693a      	ldr	r2, [r7, #16]
 80011a8:	68fb      	ldr	r3, [r7, #12]
 80011aa:	4313      	orrs	r3, r2
 80011ac:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 80011ae:	4a24      	ldr	r2, [pc, #144]	; (8001240 <HAL_GPIO_Init+0x2e0>)
 80011b0:	693b      	ldr	r3, [r7, #16]
 80011b2:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80011b4:	4b22      	ldr	r3, [pc, #136]	; (8001240 <HAL_GPIO_Init+0x2e0>)
 80011b6:	685b      	ldr	r3, [r3, #4]
 80011b8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80011ba:	68fb      	ldr	r3, [r7, #12]
 80011bc:	43db      	mvns	r3, r3
 80011be:	693a      	ldr	r2, [r7, #16]
 80011c0:	4013      	ands	r3, r2
 80011c2:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80011c4:	683b      	ldr	r3, [r7, #0]
 80011c6:	685b      	ldr	r3, [r3, #4]
 80011c8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80011cc:	2b00      	cmp	r3, #0
 80011ce:	d003      	beq.n	80011d8 <HAL_GPIO_Init+0x278>
        {
          temp |= iocurrent;
 80011d0:	693a      	ldr	r2, [r7, #16]
 80011d2:	68fb      	ldr	r3, [r7, #12]
 80011d4:	4313      	orrs	r3, r2
 80011d6:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 80011d8:	4a19      	ldr	r2, [pc, #100]	; (8001240 <HAL_GPIO_Init+0x2e0>)
 80011da:	693b      	ldr	r3, [r7, #16]
 80011dc:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80011de:	4b18      	ldr	r3, [pc, #96]	; (8001240 <HAL_GPIO_Init+0x2e0>)
 80011e0:	681b      	ldr	r3, [r3, #0]
 80011e2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80011e4:	68fb      	ldr	r3, [r7, #12]
 80011e6:	43db      	mvns	r3, r3
 80011e8:	693a      	ldr	r2, [r7, #16]
 80011ea:	4013      	ands	r3, r2
 80011ec:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80011ee:	683b      	ldr	r3, [r7, #0]
 80011f0:	685b      	ldr	r3, [r3, #4]
 80011f2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80011f6:	2b00      	cmp	r3, #0
 80011f8:	d003      	beq.n	8001202 <HAL_GPIO_Init+0x2a2>
        {
          temp |= iocurrent;
 80011fa:	693a      	ldr	r2, [r7, #16]
 80011fc:	68fb      	ldr	r3, [r7, #12]
 80011fe:	4313      	orrs	r3, r2
 8001200:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8001202:	4a0f      	ldr	r2, [pc, #60]	; (8001240 <HAL_GPIO_Init+0x2e0>)
 8001204:	693b      	ldr	r3, [r7, #16]
 8001206:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001208:	697b      	ldr	r3, [r7, #20]
 800120a:	3301      	adds	r3, #1
 800120c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800120e:	683b      	ldr	r3, [r7, #0]
 8001210:	681a      	ldr	r2, [r3, #0]
 8001212:	697b      	ldr	r3, [r7, #20]
 8001214:	fa22 f303 	lsr.w	r3, r2, r3
 8001218:	2b00      	cmp	r3, #0
 800121a:	f47f aea9 	bne.w	8000f70 <HAL_GPIO_Init+0x10>
  }
}
 800121e:	bf00      	nop
 8001220:	bf00      	nop
 8001222:	371c      	adds	r7, #28
 8001224:	46bd      	mov	sp, r7
 8001226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800122a:	4770      	bx	lr
 800122c:	40021000 	.word	0x40021000
 8001230:	40010000 	.word	0x40010000
 8001234:	48000400 	.word	0x48000400
 8001238:	48000800 	.word	0x48000800
 800123c:	48000c00 	.word	0x48000c00
 8001240:	40010400 	.word	0x40010400

08001244 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001244:	b580      	push	{r7, lr}
 8001246:	b082      	sub	sp, #8
 8001248:	af00      	add	r7, sp, #0
 800124a:	4603      	mov	r3, r0
 800124c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800124e:	4b08      	ldr	r3, [pc, #32]	; (8001270 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001250:	695a      	ldr	r2, [r3, #20]
 8001252:	88fb      	ldrh	r3, [r7, #6]
 8001254:	4013      	ands	r3, r2
 8001256:	2b00      	cmp	r3, #0
 8001258:	d006      	beq.n	8001268 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800125a:	4a05      	ldr	r2, [pc, #20]	; (8001270 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800125c:	88fb      	ldrh	r3, [r7, #6]
 800125e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001260:	88fb      	ldrh	r3, [r7, #6]
 8001262:	4618      	mov	r0, r3
 8001264:	f7ff f816 	bl	8000294 <HAL_GPIO_EXTI_Callback>
  }
}
 8001268:	bf00      	nop
 800126a:	3708      	adds	r7, #8
 800126c:	46bd      	mov	sp, r7
 800126e:	bd80      	pop	{r7, pc}
 8001270:	40010400 	.word	0x40010400

08001274 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001274:	b580      	push	{r7, lr}
 8001276:	b082      	sub	sp, #8
 8001278:	af00      	add	r7, sp, #0
 800127a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	2b00      	cmp	r3, #0
 8001280:	d101      	bne.n	8001286 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001282:	2301      	movs	r3, #1
 8001284:	e081      	b.n	800138a <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800128c:	b2db      	uxtb	r3, r3
 800128e:	2b00      	cmp	r3, #0
 8001290:	d106      	bne.n	80012a0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	2200      	movs	r2, #0
 8001296:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800129a:	6878      	ldr	r0, [r7, #4]
 800129c:	f7ff fb50 	bl	8000940 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	2224      	movs	r2, #36	; 0x24
 80012a4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	681b      	ldr	r3, [r3, #0]
 80012ac:	681a      	ldr	r2, [r3, #0]
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	681b      	ldr	r3, [r3, #0]
 80012b2:	f022 0201 	bic.w	r2, r2, #1
 80012b6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	685a      	ldr	r2, [r3, #4]
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	681b      	ldr	r3, [r3, #0]
 80012c0:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80012c4:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	681b      	ldr	r3, [r3, #0]
 80012ca:	689a      	ldr	r2, [r3, #8]
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	681b      	ldr	r3, [r3, #0]
 80012d0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80012d4:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	68db      	ldr	r3, [r3, #12]
 80012da:	2b01      	cmp	r3, #1
 80012dc:	d107      	bne.n	80012ee <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	689a      	ldr	r2, [r3, #8]
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	681b      	ldr	r3, [r3, #0]
 80012e6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80012ea:	609a      	str	r2, [r3, #8]
 80012ec:	e006      	b.n	80012fc <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	689a      	ldr	r2, [r3, #8]
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	681b      	ldr	r3, [r3, #0]
 80012f6:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 80012fa:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	68db      	ldr	r3, [r3, #12]
 8001300:	2b02      	cmp	r3, #2
 8001302:	d104      	bne.n	800130e <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	681b      	ldr	r3, [r3, #0]
 8001308:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800130c:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	681b      	ldr	r3, [r3, #0]
 8001312:	685b      	ldr	r3, [r3, #4]
 8001314:	687a      	ldr	r2, [r7, #4]
 8001316:	6812      	ldr	r2, [r2, #0]
 8001318:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800131c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001320:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	681b      	ldr	r3, [r3, #0]
 8001326:	68da      	ldr	r2, [r3, #12]
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	681b      	ldr	r3, [r3, #0]
 800132c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001330:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	691a      	ldr	r2, [r3, #16]
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	695b      	ldr	r3, [r3, #20]
 800133a:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	699b      	ldr	r3, [r3, #24]
 8001342:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	681b      	ldr	r3, [r3, #0]
 8001348:	430a      	orrs	r2, r1
 800134a:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	69d9      	ldr	r1, [r3, #28]
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	6a1a      	ldr	r2, [r3, #32]
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	681b      	ldr	r3, [r3, #0]
 8001358:	430a      	orrs	r2, r1
 800135a:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	681b      	ldr	r3, [r3, #0]
 8001360:	681a      	ldr	r2, [r3, #0]
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	681b      	ldr	r3, [r3, #0]
 8001366:	f042 0201 	orr.w	r2, r2, #1
 800136a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	2200      	movs	r2, #0
 8001370:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	2220      	movs	r2, #32
 8001376:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	2200      	movs	r2, #0
 800137e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	2200      	movs	r2, #0
 8001384:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8001388:	2300      	movs	r3, #0
}
 800138a:	4618      	mov	r0, r3
 800138c:	3708      	adds	r7, #8
 800138e:	46bd      	mov	sp, r7
 8001390:	bd80      	pop	{r7, pc}
	...

08001394 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001394:	b580      	push	{r7, lr}
 8001396:	b088      	sub	sp, #32
 8001398:	af02      	add	r7, sp, #8
 800139a:	60f8      	str	r0, [r7, #12]
 800139c:	4608      	mov	r0, r1
 800139e:	4611      	mov	r1, r2
 80013a0:	461a      	mov	r2, r3
 80013a2:	4603      	mov	r3, r0
 80013a4:	817b      	strh	r3, [r7, #10]
 80013a6:	460b      	mov	r3, r1
 80013a8:	813b      	strh	r3, [r7, #8]
 80013aa:	4613      	mov	r3, r2
 80013ac:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80013ae:	68fb      	ldr	r3, [r7, #12]
 80013b0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80013b4:	b2db      	uxtb	r3, r3
 80013b6:	2b20      	cmp	r3, #32
 80013b8:	f040 80f9 	bne.w	80015ae <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 80013bc:	6a3b      	ldr	r3, [r7, #32]
 80013be:	2b00      	cmp	r3, #0
 80013c0:	d002      	beq.n	80013c8 <HAL_I2C_Mem_Write+0x34>
 80013c2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80013c4:	2b00      	cmp	r3, #0
 80013c6:	d105      	bne.n	80013d4 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80013c8:	68fb      	ldr	r3, [r7, #12]
 80013ca:	f44f 7200 	mov.w	r2, #512	; 0x200
 80013ce:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 80013d0:	2301      	movs	r3, #1
 80013d2:	e0ed      	b.n	80015b0 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80013d4:	68fb      	ldr	r3, [r7, #12]
 80013d6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80013da:	2b01      	cmp	r3, #1
 80013dc:	d101      	bne.n	80013e2 <HAL_I2C_Mem_Write+0x4e>
 80013de:	2302      	movs	r3, #2
 80013e0:	e0e6      	b.n	80015b0 <HAL_I2C_Mem_Write+0x21c>
 80013e2:	68fb      	ldr	r3, [r7, #12]
 80013e4:	2201      	movs	r2, #1
 80013e6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80013ea:	f7ff fc9b 	bl	8000d24 <HAL_GetTick>
 80013ee:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80013f0:	697b      	ldr	r3, [r7, #20]
 80013f2:	9300      	str	r3, [sp, #0]
 80013f4:	2319      	movs	r3, #25
 80013f6:	2201      	movs	r2, #1
 80013f8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80013fc:	68f8      	ldr	r0, [r7, #12]
 80013fe:	f000 fbe7 	bl	8001bd0 <I2C_WaitOnFlagUntilTimeout>
 8001402:	4603      	mov	r3, r0
 8001404:	2b00      	cmp	r3, #0
 8001406:	d001      	beq.n	800140c <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8001408:	2301      	movs	r3, #1
 800140a:	e0d1      	b.n	80015b0 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800140c:	68fb      	ldr	r3, [r7, #12]
 800140e:	2221      	movs	r2, #33	; 0x21
 8001410:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8001414:	68fb      	ldr	r3, [r7, #12]
 8001416:	2240      	movs	r2, #64	; 0x40
 8001418:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800141c:	68fb      	ldr	r3, [r7, #12]
 800141e:	2200      	movs	r2, #0
 8001420:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8001422:	68fb      	ldr	r3, [r7, #12]
 8001424:	6a3a      	ldr	r2, [r7, #32]
 8001426:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8001428:	68fb      	ldr	r3, [r7, #12]
 800142a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800142c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800142e:	68fb      	ldr	r3, [r7, #12]
 8001430:	2200      	movs	r2, #0
 8001432:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8001434:	88f8      	ldrh	r0, [r7, #6]
 8001436:	893a      	ldrh	r2, [r7, #8]
 8001438:	8979      	ldrh	r1, [r7, #10]
 800143a:	697b      	ldr	r3, [r7, #20]
 800143c:	9301      	str	r3, [sp, #4]
 800143e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001440:	9300      	str	r3, [sp, #0]
 8001442:	4603      	mov	r3, r0
 8001444:	68f8      	ldr	r0, [r7, #12]
 8001446:	f000 faf7 	bl	8001a38 <I2C_RequestMemoryWrite>
 800144a:	4603      	mov	r3, r0
 800144c:	2b00      	cmp	r3, #0
 800144e:	d005      	beq.n	800145c <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001450:	68fb      	ldr	r3, [r7, #12]
 8001452:	2200      	movs	r2, #0
 8001454:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8001458:	2301      	movs	r3, #1
 800145a:	e0a9      	b.n	80015b0 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800145c:	68fb      	ldr	r3, [r7, #12]
 800145e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001460:	b29b      	uxth	r3, r3
 8001462:	2bff      	cmp	r3, #255	; 0xff
 8001464:	d90e      	bls.n	8001484 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8001466:	68fb      	ldr	r3, [r7, #12]
 8001468:	22ff      	movs	r2, #255	; 0xff
 800146a:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800146c:	68fb      	ldr	r3, [r7, #12]
 800146e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001470:	b2da      	uxtb	r2, r3
 8001472:	8979      	ldrh	r1, [r7, #10]
 8001474:	2300      	movs	r3, #0
 8001476:	9300      	str	r3, [sp, #0]
 8001478:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800147c:	68f8      	ldr	r0, [r7, #12]
 800147e:	f000 fd61 	bl	8001f44 <I2C_TransferConfig>
 8001482:	e00f      	b.n	80014a4 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8001484:	68fb      	ldr	r3, [r7, #12]
 8001486:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001488:	b29a      	uxth	r2, r3
 800148a:	68fb      	ldr	r3, [r7, #12]
 800148c:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800148e:	68fb      	ldr	r3, [r7, #12]
 8001490:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001492:	b2da      	uxtb	r2, r3
 8001494:	8979      	ldrh	r1, [r7, #10]
 8001496:	2300      	movs	r3, #0
 8001498:	9300      	str	r3, [sp, #0]
 800149a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800149e:	68f8      	ldr	r0, [r7, #12]
 80014a0:	f000 fd50 	bl	8001f44 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80014a4:	697a      	ldr	r2, [r7, #20]
 80014a6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80014a8:	68f8      	ldr	r0, [r7, #12]
 80014aa:	f000 fbe0 	bl	8001c6e <I2C_WaitOnTXISFlagUntilTimeout>
 80014ae:	4603      	mov	r3, r0
 80014b0:	2b00      	cmp	r3, #0
 80014b2:	d001      	beq.n	80014b8 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 80014b4:	2301      	movs	r3, #1
 80014b6:	e07b      	b.n	80015b0 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80014b8:	68fb      	ldr	r3, [r7, #12]
 80014ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80014bc:	781a      	ldrb	r2, [r3, #0]
 80014be:	68fb      	ldr	r3, [r7, #12]
 80014c0:	681b      	ldr	r3, [r3, #0]
 80014c2:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80014c4:	68fb      	ldr	r3, [r7, #12]
 80014c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80014c8:	1c5a      	adds	r2, r3, #1
 80014ca:	68fb      	ldr	r3, [r7, #12]
 80014cc:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 80014ce:	68fb      	ldr	r3, [r7, #12]
 80014d0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80014d2:	b29b      	uxth	r3, r3
 80014d4:	3b01      	subs	r3, #1
 80014d6:	b29a      	uxth	r2, r3
 80014d8:	68fb      	ldr	r3, [r7, #12]
 80014da:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80014dc:	68fb      	ldr	r3, [r7, #12]
 80014de:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80014e0:	3b01      	subs	r3, #1
 80014e2:	b29a      	uxth	r2, r3
 80014e4:	68fb      	ldr	r3, [r7, #12]
 80014e6:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80014e8:	68fb      	ldr	r3, [r7, #12]
 80014ea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80014ec:	b29b      	uxth	r3, r3
 80014ee:	2b00      	cmp	r3, #0
 80014f0:	d034      	beq.n	800155c <HAL_I2C_Mem_Write+0x1c8>
 80014f2:	68fb      	ldr	r3, [r7, #12]
 80014f4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80014f6:	2b00      	cmp	r3, #0
 80014f8:	d130      	bne.n	800155c <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80014fa:	697b      	ldr	r3, [r7, #20]
 80014fc:	9300      	str	r3, [sp, #0]
 80014fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001500:	2200      	movs	r2, #0
 8001502:	2180      	movs	r1, #128	; 0x80
 8001504:	68f8      	ldr	r0, [r7, #12]
 8001506:	f000 fb63 	bl	8001bd0 <I2C_WaitOnFlagUntilTimeout>
 800150a:	4603      	mov	r3, r0
 800150c:	2b00      	cmp	r3, #0
 800150e:	d001      	beq.n	8001514 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8001510:	2301      	movs	r3, #1
 8001512:	e04d      	b.n	80015b0 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001514:	68fb      	ldr	r3, [r7, #12]
 8001516:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001518:	b29b      	uxth	r3, r3
 800151a:	2bff      	cmp	r3, #255	; 0xff
 800151c:	d90e      	bls.n	800153c <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800151e:	68fb      	ldr	r3, [r7, #12]
 8001520:	22ff      	movs	r2, #255	; 0xff
 8001522:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8001524:	68fb      	ldr	r3, [r7, #12]
 8001526:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001528:	b2da      	uxtb	r2, r3
 800152a:	8979      	ldrh	r1, [r7, #10]
 800152c:	2300      	movs	r3, #0
 800152e:	9300      	str	r3, [sp, #0]
 8001530:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001534:	68f8      	ldr	r0, [r7, #12]
 8001536:	f000 fd05 	bl	8001f44 <I2C_TransferConfig>
 800153a:	e00f      	b.n	800155c <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800153c:	68fb      	ldr	r3, [r7, #12]
 800153e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001540:	b29a      	uxth	r2, r3
 8001542:	68fb      	ldr	r3, [r7, #12]
 8001544:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8001546:	68fb      	ldr	r3, [r7, #12]
 8001548:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800154a:	b2da      	uxtb	r2, r3
 800154c:	8979      	ldrh	r1, [r7, #10]
 800154e:	2300      	movs	r3, #0
 8001550:	9300      	str	r3, [sp, #0]
 8001552:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001556:	68f8      	ldr	r0, [r7, #12]
 8001558:	f000 fcf4 	bl	8001f44 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 800155c:	68fb      	ldr	r3, [r7, #12]
 800155e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001560:	b29b      	uxth	r3, r3
 8001562:	2b00      	cmp	r3, #0
 8001564:	d19e      	bne.n	80014a4 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001566:	697a      	ldr	r2, [r7, #20]
 8001568:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800156a:	68f8      	ldr	r0, [r7, #12]
 800156c:	f000 fbc6 	bl	8001cfc <I2C_WaitOnSTOPFlagUntilTimeout>
 8001570:	4603      	mov	r3, r0
 8001572:	2b00      	cmp	r3, #0
 8001574:	d001      	beq.n	800157a <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8001576:	2301      	movs	r3, #1
 8001578:	e01a      	b.n	80015b0 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800157a:	68fb      	ldr	r3, [r7, #12]
 800157c:	681b      	ldr	r3, [r3, #0]
 800157e:	2220      	movs	r2, #32
 8001580:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001582:	68fb      	ldr	r3, [r7, #12]
 8001584:	681b      	ldr	r3, [r3, #0]
 8001586:	6859      	ldr	r1, [r3, #4]
 8001588:	68fb      	ldr	r3, [r7, #12]
 800158a:	681a      	ldr	r2, [r3, #0]
 800158c:	4b0a      	ldr	r3, [pc, #40]	; (80015b8 <HAL_I2C_Mem_Write+0x224>)
 800158e:	400b      	ands	r3, r1
 8001590:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8001592:	68fb      	ldr	r3, [r7, #12]
 8001594:	2220      	movs	r2, #32
 8001596:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800159a:	68fb      	ldr	r3, [r7, #12]
 800159c:	2200      	movs	r2, #0
 800159e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80015a2:	68fb      	ldr	r3, [r7, #12]
 80015a4:	2200      	movs	r2, #0
 80015a6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80015aa:	2300      	movs	r3, #0
 80015ac:	e000      	b.n	80015b0 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 80015ae:	2302      	movs	r3, #2
  }
}
 80015b0:	4618      	mov	r0, r3
 80015b2:	3718      	adds	r7, #24
 80015b4:	46bd      	mov	sp, r7
 80015b6:	bd80      	pop	{r7, pc}
 80015b8:	fe00e800 	.word	0xfe00e800

080015bc <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80015bc:	b580      	push	{r7, lr}
 80015be:	b088      	sub	sp, #32
 80015c0:	af02      	add	r7, sp, #8
 80015c2:	60f8      	str	r0, [r7, #12]
 80015c4:	4608      	mov	r0, r1
 80015c6:	4611      	mov	r1, r2
 80015c8:	461a      	mov	r2, r3
 80015ca:	4603      	mov	r3, r0
 80015cc:	817b      	strh	r3, [r7, #10]
 80015ce:	460b      	mov	r3, r1
 80015d0:	813b      	strh	r3, [r7, #8]
 80015d2:	4613      	mov	r3, r2
 80015d4:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80015d6:	68fb      	ldr	r3, [r7, #12]
 80015d8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80015dc:	b2db      	uxtb	r3, r3
 80015de:	2b20      	cmp	r3, #32
 80015e0:	f040 80fd 	bne.w	80017de <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 80015e4:	6a3b      	ldr	r3, [r7, #32]
 80015e6:	2b00      	cmp	r3, #0
 80015e8:	d002      	beq.n	80015f0 <HAL_I2C_Mem_Read+0x34>
 80015ea:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80015ec:	2b00      	cmp	r3, #0
 80015ee:	d105      	bne.n	80015fc <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80015f0:	68fb      	ldr	r3, [r7, #12]
 80015f2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80015f6:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 80015f8:	2301      	movs	r3, #1
 80015fa:	e0f1      	b.n	80017e0 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80015fc:	68fb      	ldr	r3, [r7, #12]
 80015fe:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001602:	2b01      	cmp	r3, #1
 8001604:	d101      	bne.n	800160a <HAL_I2C_Mem_Read+0x4e>
 8001606:	2302      	movs	r3, #2
 8001608:	e0ea      	b.n	80017e0 <HAL_I2C_Mem_Read+0x224>
 800160a:	68fb      	ldr	r3, [r7, #12]
 800160c:	2201      	movs	r2, #1
 800160e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8001612:	f7ff fb87 	bl	8000d24 <HAL_GetTick>
 8001616:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8001618:	697b      	ldr	r3, [r7, #20]
 800161a:	9300      	str	r3, [sp, #0]
 800161c:	2319      	movs	r3, #25
 800161e:	2201      	movs	r2, #1
 8001620:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001624:	68f8      	ldr	r0, [r7, #12]
 8001626:	f000 fad3 	bl	8001bd0 <I2C_WaitOnFlagUntilTimeout>
 800162a:	4603      	mov	r3, r0
 800162c:	2b00      	cmp	r3, #0
 800162e:	d001      	beq.n	8001634 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8001630:	2301      	movs	r3, #1
 8001632:	e0d5      	b.n	80017e0 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8001634:	68fb      	ldr	r3, [r7, #12]
 8001636:	2222      	movs	r2, #34	; 0x22
 8001638:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800163c:	68fb      	ldr	r3, [r7, #12]
 800163e:	2240      	movs	r2, #64	; 0x40
 8001640:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001644:	68fb      	ldr	r3, [r7, #12]
 8001646:	2200      	movs	r2, #0
 8001648:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800164a:	68fb      	ldr	r3, [r7, #12]
 800164c:	6a3a      	ldr	r2, [r7, #32]
 800164e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8001650:	68fb      	ldr	r3, [r7, #12]
 8001652:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8001654:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8001656:	68fb      	ldr	r3, [r7, #12]
 8001658:	2200      	movs	r2, #0
 800165a:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800165c:	88f8      	ldrh	r0, [r7, #6]
 800165e:	893a      	ldrh	r2, [r7, #8]
 8001660:	8979      	ldrh	r1, [r7, #10]
 8001662:	697b      	ldr	r3, [r7, #20]
 8001664:	9301      	str	r3, [sp, #4]
 8001666:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001668:	9300      	str	r3, [sp, #0]
 800166a:	4603      	mov	r3, r0
 800166c:	68f8      	ldr	r0, [r7, #12]
 800166e:	f000 fa37 	bl	8001ae0 <I2C_RequestMemoryRead>
 8001672:	4603      	mov	r3, r0
 8001674:	2b00      	cmp	r3, #0
 8001676:	d005      	beq.n	8001684 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001678:	68fb      	ldr	r3, [r7, #12]
 800167a:	2200      	movs	r2, #0
 800167c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8001680:	2301      	movs	r3, #1
 8001682:	e0ad      	b.n	80017e0 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001684:	68fb      	ldr	r3, [r7, #12]
 8001686:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001688:	b29b      	uxth	r3, r3
 800168a:	2bff      	cmp	r3, #255	; 0xff
 800168c:	d90e      	bls.n	80016ac <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800168e:	68fb      	ldr	r3, [r7, #12]
 8001690:	22ff      	movs	r2, #255	; 0xff
 8001692:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8001694:	68fb      	ldr	r3, [r7, #12]
 8001696:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001698:	b2da      	uxtb	r2, r3
 800169a:	8979      	ldrh	r1, [r7, #10]
 800169c:	4b52      	ldr	r3, [pc, #328]	; (80017e8 <HAL_I2C_Mem_Read+0x22c>)
 800169e:	9300      	str	r3, [sp, #0]
 80016a0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80016a4:	68f8      	ldr	r0, [r7, #12]
 80016a6:	f000 fc4d 	bl	8001f44 <I2C_TransferConfig>
 80016aa:	e00f      	b.n	80016cc <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80016ac:	68fb      	ldr	r3, [r7, #12]
 80016ae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80016b0:	b29a      	uxth	r2, r3
 80016b2:	68fb      	ldr	r3, [r7, #12]
 80016b4:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80016b6:	68fb      	ldr	r3, [r7, #12]
 80016b8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80016ba:	b2da      	uxtb	r2, r3
 80016bc:	8979      	ldrh	r1, [r7, #10]
 80016be:	4b4a      	ldr	r3, [pc, #296]	; (80017e8 <HAL_I2C_Mem_Read+0x22c>)
 80016c0:	9300      	str	r3, [sp, #0]
 80016c2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80016c6:	68f8      	ldr	r0, [r7, #12]
 80016c8:	f000 fc3c 	bl	8001f44 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 80016cc:	697b      	ldr	r3, [r7, #20]
 80016ce:	9300      	str	r3, [sp, #0]
 80016d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80016d2:	2200      	movs	r2, #0
 80016d4:	2104      	movs	r1, #4
 80016d6:	68f8      	ldr	r0, [r7, #12]
 80016d8:	f000 fa7a 	bl	8001bd0 <I2C_WaitOnFlagUntilTimeout>
 80016dc:	4603      	mov	r3, r0
 80016de:	2b00      	cmp	r3, #0
 80016e0:	d001      	beq.n	80016e6 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 80016e2:	2301      	movs	r3, #1
 80016e4:	e07c      	b.n	80017e0 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80016e6:	68fb      	ldr	r3, [r7, #12]
 80016e8:	681b      	ldr	r3, [r3, #0]
 80016ea:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80016ec:	68fb      	ldr	r3, [r7, #12]
 80016ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016f0:	b2d2      	uxtb	r2, r2
 80016f2:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80016f4:	68fb      	ldr	r3, [r7, #12]
 80016f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016f8:	1c5a      	adds	r2, r3, #1
 80016fa:	68fb      	ldr	r3, [r7, #12]
 80016fc:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 80016fe:	68fb      	ldr	r3, [r7, #12]
 8001700:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001702:	3b01      	subs	r3, #1
 8001704:	b29a      	uxth	r2, r3
 8001706:	68fb      	ldr	r3, [r7, #12]
 8001708:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800170a:	68fb      	ldr	r3, [r7, #12]
 800170c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800170e:	b29b      	uxth	r3, r3
 8001710:	3b01      	subs	r3, #1
 8001712:	b29a      	uxth	r2, r3
 8001714:	68fb      	ldr	r3, [r7, #12]
 8001716:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8001718:	68fb      	ldr	r3, [r7, #12]
 800171a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800171c:	b29b      	uxth	r3, r3
 800171e:	2b00      	cmp	r3, #0
 8001720:	d034      	beq.n	800178c <HAL_I2C_Mem_Read+0x1d0>
 8001722:	68fb      	ldr	r3, [r7, #12]
 8001724:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001726:	2b00      	cmp	r3, #0
 8001728:	d130      	bne.n	800178c <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800172a:	697b      	ldr	r3, [r7, #20]
 800172c:	9300      	str	r3, [sp, #0]
 800172e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001730:	2200      	movs	r2, #0
 8001732:	2180      	movs	r1, #128	; 0x80
 8001734:	68f8      	ldr	r0, [r7, #12]
 8001736:	f000 fa4b 	bl	8001bd0 <I2C_WaitOnFlagUntilTimeout>
 800173a:	4603      	mov	r3, r0
 800173c:	2b00      	cmp	r3, #0
 800173e:	d001      	beq.n	8001744 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8001740:	2301      	movs	r3, #1
 8001742:	e04d      	b.n	80017e0 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001744:	68fb      	ldr	r3, [r7, #12]
 8001746:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001748:	b29b      	uxth	r3, r3
 800174a:	2bff      	cmp	r3, #255	; 0xff
 800174c:	d90e      	bls.n	800176c <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800174e:	68fb      	ldr	r3, [r7, #12]
 8001750:	22ff      	movs	r2, #255	; 0xff
 8001752:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8001754:	68fb      	ldr	r3, [r7, #12]
 8001756:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001758:	b2da      	uxtb	r2, r3
 800175a:	8979      	ldrh	r1, [r7, #10]
 800175c:	2300      	movs	r3, #0
 800175e:	9300      	str	r3, [sp, #0]
 8001760:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001764:	68f8      	ldr	r0, [r7, #12]
 8001766:	f000 fbed 	bl	8001f44 <I2C_TransferConfig>
 800176a:	e00f      	b.n	800178c <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800176c:	68fb      	ldr	r3, [r7, #12]
 800176e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001770:	b29a      	uxth	r2, r3
 8001772:	68fb      	ldr	r3, [r7, #12]
 8001774:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8001776:	68fb      	ldr	r3, [r7, #12]
 8001778:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800177a:	b2da      	uxtb	r2, r3
 800177c:	8979      	ldrh	r1, [r7, #10]
 800177e:	2300      	movs	r3, #0
 8001780:	9300      	str	r3, [sp, #0]
 8001782:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001786:	68f8      	ldr	r0, [r7, #12]
 8001788:	f000 fbdc 	bl	8001f44 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 800178c:	68fb      	ldr	r3, [r7, #12]
 800178e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001790:	b29b      	uxth	r3, r3
 8001792:	2b00      	cmp	r3, #0
 8001794:	d19a      	bne.n	80016cc <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001796:	697a      	ldr	r2, [r7, #20]
 8001798:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800179a:	68f8      	ldr	r0, [r7, #12]
 800179c:	f000 faae 	bl	8001cfc <I2C_WaitOnSTOPFlagUntilTimeout>
 80017a0:	4603      	mov	r3, r0
 80017a2:	2b00      	cmp	r3, #0
 80017a4:	d001      	beq.n	80017aa <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 80017a6:	2301      	movs	r3, #1
 80017a8:	e01a      	b.n	80017e0 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80017aa:	68fb      	ldr	r3, [r7, #12]
 80017ac:	681b      	ldr	r3, [r3, #0]
 80017ae:	2220      	movs	r2, #32
 80017b0:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80017b2:	68fb      	ldr	r3, [r7, #12]
 80017b4:	681b      	ldr	r3, [r3, #0]
 80017b6:	6859      	ldr	r1, [r3, #4]
 80017b8:	68fb      	ldr	r3, [r7, #12]
 80017ba:	681a      	ldr	r2, [r3, #0]
 80017bc:	4b0b      	ldr	r3, [pc, #44]	; (80017ec <HAL_I2C_Mem_Read+0x230>)
 80017be:	400b      	ands	r3, r1
 80017c0:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80017c2:	68fb      	ldr	r3, [r7, #12]
 80017c4:	2220      	movs	r2, #32
 80017c6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80017ca:	68fb      	ldr	r3, [r7, #12]
 80017cc:	2200      	movs	r2, #0
 80017ce:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80017d2:	68fb      	ldr	r3, [r7, #12]
 80017d4:	2200      	movs	r2, #0
 80017d6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80017da:	2300      	movs	r3, #0
 80017dc:	e000      	b.n	80017e0 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 80017de:	2302      	movs	r3, #2
  }
}
 80017e0:	4618      	mov	r0, r3
 80017e2:	3718      	adds	r7, #24
 80017e4:	46bd      	mov	sp, r7
 80017e6:	bd80      	pop	{r7, pc}
 80017e8:	80002400 	.word	0x80002400
 80017ec:	fe00e800 	.word	0xfe00e800

080017f0 <HAL_I2C_IsDeviceReady>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials,
                                        uint32_t Timeout)
{
 80017f0:	b580      	push	{r7, lr}
 80017f2:	b08a      	sub	sp, #40	; 0x28
 80017f4:	af02      	add	r7, sp, #8
 80017f6:	60f8      	str	r0, [r7, #12]
 80017f8:	607a      	str	r2, [r7, #4]
 80017fa:	603b      	str	r3, [r7, #0]
 80017fc:	460b      	mov	r3, r1
 80017fe:	817b      	strh	r3, [r7, #10]
  uint32_t tickstart;

  __IO uint32_t I2C_Trials = 0UL;
 8001800:	2300      	movs	r3, #0
 8001802:	617b      	str	r3, [r7, #20]

  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001804:	68fb      	ldr	r3, [r7, #12]
 8001806:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800180a:	b2db      	uxtb	r3, r3
 800180c:	2b20      	cmp	r3, #32
 800180e:	f040 80f3 	bne.w	80019f8 <HAL_I2C_IsDeviceReady+0x208>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 8001812:	68fb      	ldr	r3, [r7, #12]
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	699b      	ldr	r3, [r3, #24]
 8001818:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800181c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001820:	d101      	bne.n	8001826 <HAL_I2C_IsDeviceReady+0x36>
    {
      return HAL_BUSY;
 8001822:	2302      	movs	r3, #2
 8001824:	e0e9      	b.n	80019fa <HAL_I2C_IsDeviceReady+0x20a>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001826:	68fb      	ldr	r3, [r7, #12]
 8001828:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800182c:	2b01      	cmp	r3, #1
 800182e:	d101      	bne.n	8001834 <HAL_I2C_IsDeviceReady+0x44>
 8001830:	2302      	movs	r3, #2
 8001832:	e0e2      	b.n	80019fa <HAL_I2C_IsDeviceReady+0x20a>
 8001834:	68fb      	ldr	r3, [r7, #12]
 8001836:	2201      	movs	r2, #1
 8001838:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800183c:	68fb      	ldr	r3, [r7, #12]
 800183e:	2224      	movs	r2, #36	; 0x24
 8001840:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001844:	68fb      	ldr	r3, [r7, #12]
 8001846:	2200      	movs	r2, #0
 8001848:	645a      	str	r2, [r3, #68]	; 0x44

    do
    {
      /* Generate Start */
      hi2c->Instance->CR2 = I2C_GENERATE_START(hi2c->Init.AddressingMode, DevAddress);
 800184a:	68fb      	ldr	r3, [r7, #12]
 800184c:	68db      	ldr	r3, [r3, #12]
 800184e:	2b01      	cmp	r3, #1
 8001850:	d107      	bne.n	8001862 <HAL_I2C_IsDeviceReady+0x72>
 8001852:	897b      	ldrh	r3, [r7, #10]
 8001854:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001858:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800185c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001860:	e006      	b.n	8001870 <HAL_I2C_IsDeviceReady+0x80>
 8001862:	897b      	ldrh	r3, [r7, #10]
 8001864:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001868:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800186c:	f443 5320 	orr.w	r3, r3, #10240	; 0x2800
 8001870:	68fa      	ldr	r2, [r7, #12]
 8001872:	6812      	ldr	r2, [r2, #0]
 8001874:	6053      	str	r3, [r2, #4]

      /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
      /* Wait until STOPF flag is set or a NACK flag is set*/
      tickstart = HAL_GetTick();
 8001876:	f7ff fa55 	bl	8000d24 <HAL_GetTick>
 800187a:	61b8      	str	r0, [r7, #24]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 800187c:	68fb      	ldr	r3, [r7, #12]
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	699b      	ldr	r3, [r3, #24]
 8001882:	f003 0320 	and.w	r3, r3, #32
 8001886:	2b20      	cmp	r3, #32
 8001888:	bf0c      	ite	eq
 800188a:	2301      	moveq	r3, #1
 800188c:	2300      	movne	r3, #0
 800188e:	b2db      	uxtb	r3, r3
 8001890:	77fb      	strb	r3, [r7, #31]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8001892:	68fb      	ldr	r3, [r7, #12]
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	699b      	ldr	r3, [r3, #24]
 8001898:	f003 0310 	and.w	r3, r3, #16
 800189c:	2b10      	cmp	r3, #16
 800189e:	bf0c      	ite	eq
 80018a0:	2301      	moveq	r3, #1
 80018a2:	2300      	movne	r3, #0
 80018a4:	b2db      	uxtb	r3, r3
 80018a6:	77bb      	strb	r3, [r7, #30]

      while ((tmp1 == RESET) && (tmp2 == RESET))
 80018a8:	e034      	b.n	8001914 <HAL_I2C_IsDeviceReady+0x124>
      {
        if (Timeout != HAL_MAX_DELAY)
 80018aa:	683b      	ldr	r3, [r7, #0]
 80018ac:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80018b0:	d01a      	beq.n	80018e8 <HAL_I2C_IsDeviceReady+0xf8>
        {
          if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80018b2:	f7ff fa37 	bl	8000d24 <HAL_GetTick>
 80018b6:	4602      	mov	r2, r0
 80018b8:	69bb      	ldr	r3, [r7, #24]
 80018ba:	1ad3      	subs	r3, r2, r3
 80018bc:	683a      	ldr	r2, [r7, #0]
 80018be:	429a      	cmp	r2, r3
 80018c0:	d302      	bcc.n	80018c8 <HAL_I2C_IsDeviceReady+0xd8>
 80018c2:	683b      	ldr	r3, [r7, #0]
 80018c4:	2b00      	cmp	r3, #0
 80018c6:	d10f      	bne.n	80018e8 <HAL_I2C_IsDeviceReady+0xf8>
          {
            /* Update I2C state */
            hi2c->State = HAL_I2C_STATE_READY;
 80018c8:	68fb      	ldr	r3, [r7, #12]
 80018ca:	2220      	movs	r2, #32
 80018cc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

            /* Update I2C error code */
            hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80018d0:	68fb      	ldr	r3, [r7, #12]
 80018d2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018d4:	f043 0220 	orr.w	r2, r3, #32
 80018d8:	68fb      	ldr	r3, [r7, #12]
 80018da:	645a      	str	r2, [r3, #68]	; 0x44

            /* Process Unlocked */
            __HAL_UNLOCK(hi2c);
 80018dc:	68fb      	ldr	r3, [r7, #12]
 80018de:	2200      	movs	r2, #0
 80018e0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

            return HAL_ERROR;
 80018e4:	2301      	movs	r3, #1
 80018e6:	e088      	b.n	80019fa <HAL_I2C_IsDeviceReady+0x20a>
          }
        }

        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 80018e8:	68fb      	ldr	r3, [r7, #12]
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	699b      	ldr	r3, [r3, #24]
 80018ee:	f003 0320 	and.w	r3, r3, #32
 80018f2:	2b20      	cmp	r3, #32
 80018f4:	bf0c      	ite	eq
 80018f6:	2301      	moveq	r3, #1
 80018f8:	2300      	movne	r3, #0
 80018fa:	b2db      	uxtb	r3, r3
 80018fc:	77fb      	strb	r3, [r7, #31]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80018fe:	68fb      	ldr	r3, [r7, #12]
 8001900:	681b      	ldr	r3, [r3, #0]
 8001902:	699b      	ldr	r3, [r3, #24]
 8001904:	f003 0310 	and.w	r3, r3, #16
 8001908:	2b10      	cmp	r3, #16
 800190a:	bf0c      	ite	eq
 800190c:	2301      	moveq	r3, #1
 800190e:	2300      	movne	r3, #0
 8001910:	b2db      	uxtb	r3, r3
 8001912:	77bb      	strb	r3, [r7, #30]
      while ((tmp1 == RESET) && (tmp2 == RESET))
 8001914:	7ffb      	ldrb	r3, [r7, #31]
 8001916:	2b00      	cmp	r3, #0
 8001918:	d102      	bne.n	8001920 <HAL_I2C_IsDeviceReady+0x130>
 800191a:	7fbb      	ldrb	r3, [r7, #30]
 800191c:	2b00      	cmp	r3, #0
 800191e:	d0c4      	beq.n	80018aa <HAL_I2C_IsDeviceReady+0xba>
      }

      /* Check if the NACKF flag has not been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == RESET)
 8001920:	68fb      	ldr	r3, [r7, #12]
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	699b      	ldr	r3, [r3, #24]
 8001926:	f003 0310 	and.w	r3, r3, #16
 800192a:	2b10      	cmp	r3, #16
 800192c:	d01a      	beq.n	8001964 <HAL_I2C_IsDeviceReady+0x174>
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 800192e:	69bb      	ldr	r3, [r7, #24]
 8001930:	9300      	str	r3, [sp, #0]
 8001932:	683b      	ldr	r3, [r7, #0]
 8001934:	2200      	movs	r2, #0
 8001936:	2120      	movs	r1, #32
 8001938:	68f8      	ldr	r0, [r7, #12]
 800193a:	f000 f949 	bl	8001bd0 <I2C_WaitOnFlagUntilTimeout>
 800193e:	4603      	mov	r3, r0
 8001940:	2b00      	cmp	r3, #0
 8001942:	d001      	beq.n	8001948 <HAL_I2C_IsDeviceReady+0x158>
        {
          return HAL_ERROR;
 8001944:	2301      	movs	r3, #1
 8001946:	e058      	b.n	80019fa <HAL_I2C_IsDeviceReady+0x20a>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001948:	68fb      	ldr	r3, [r7, #12]
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	2220      	movs	r2, #32
 800194e:	61da      	str	r2, [r3, #28]

        /* Device is ready */
        hi2c->State = HAL_I2C_STATE_READY;
 8001950:	68fb      	ldr	r3, [r7, #12]
 8001952:	2220      	movs	r2, #32
 8001954:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001958:	68fb      	ldr	r3, [r7, #12]
 800195a:	2200      	movs	r2, #0
 800195c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_OK;
 8001960:	2300      	movs	r3, #0
 8001962:	e04a      	b.n	80019fa <HAL_I2C_IsDeviceReady+0x20a>
      }
      else
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8001964:	69bb      	ldr	r3, [r7, #24]
 8001966:	9300      	str	r3, [sp, #0]
 8001968:	683b      	ldr	r3, [r7, #0]
 800196a:	2200      	movs	r2, #0
 800196c:	2120      	movs	r1, #32
 800196e:	68f8      	ldr	r0, [r7, #12]
 8001970:	f000 f92e 	bl	8001bd0 <I2C_WaitOnFlagUntilTimeout>
 8001974:	4603      	mov	r3, r0
 8001976:	2b00      	cmp	r3, #0
 8001978:	d001      	beq.n	800197e <HAL_I2C_IsDeviceReady+0x18e>
        {
          return HAL_ERROR;
 800197a:	2301      	movs	r3, #1
 800197c:	e03d      	b.n	80019fa <HAL_I2C_IsDeviceReady+0x20a>
        }

        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800197e:	68fb      	ldr	r3, [r7, #12]
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	2210      	movs	r2, #16
 8001984:	61da      	str	r2, [r3, #28]

        /* Clear STOP Flag, auto generated with autoend*/
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001986:	68fb      	ldr	r3, [r7, #12]
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	2220      	movs	r2, #32
 800198c:	61da      	str	r2, [r3, #28]
      }

      /* Check if the maximum allowed number of trials has been reached */
      if (I2C_Trials == Trials)
 800198e:	697b      	ldr	r3, [r7, #20]
 8001990:	687a      	ldr	r2, [r7, #4]
 8001992:	429a      	cmp	r2, r3
 8001994:	d118      	bne.n	80019c8 <HAL_I2C_IsDeviceReady+0x1d8>
      {
        /* Generate Stop */
        hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8001996:	68fb      	ldr	r3, [r7, #12]
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	685a      	ldr	r2, [r3, #4]
 800199c:	68fb      	ldr	r3, [r7, #12]
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80019a4:	605a      	str	r2, [r3, #4]

        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 80019a6:	69bb      	ldr	r3, [r7, #24]
 80019a8:	9300      	str	r3, [sp, #0]
 80019aa:	683b      	ldr	r3, [r7, #0]
 80019ac:	2200      	movs	r2, #0
 80019ae:	2120      	movs	r1, #32
 80019b0:	68f8      	ldr	r0, [r7, #12]
 80019b2:	f000 f90d 	bl	8001bd0 <I2C_WaitOnFlagUntilTimeout>
 80019b6:	4603      	mov	r3, r0
 80019b8:	2b00      	cmp	r3, #0
 80019ba:	d001      	beq.n	80019c0 <HAL_I2C_IsDeviceReady+0x1d0>
        {
          return HAL_ERROR;
 80019bc:	2301      	movs	r3, #1
 80019be:	e01c      	b.n	80019fa <HAL_I2C_IsDeviceReady+0x20a>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80019c0:	68fb      	ldr	r3, [r7, #12]
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	2220      	movs	r2, #32
 80019c6:	61da      	str	r2, [r3, #28]
      }

      /* Increment Trials */
      I2C_Trials++;
 80019c8:	697b      	ldr	r3, [r7, #20]
 80019ca:	3301      	adds	r3, #1
 80019cc:	617b      	str	r3, [r7, #20]
    } while (I2C_Trials < Trials);
 80019ce:	697b      	ldr	r3, [r7, #20]
 80019d0:	687a      	ldr	r2, [r7, #4]
 80019d2:	429a      	cmp	r2, r3
 80019d4:	f63f af39 	bhi.w	800184a <HAL_I2C_IsDeviceReady+0x5a>

    /* Update I2C state */
    hi2c->State = HAL_I2C_STATE_READY;
 80019d8:	68fb      	ldr	r3, [r7, #12]
 80019da:	2220      	movs	r2, #32
 80019dc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Update I2C error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80019e0:	68fb      	ldr	r3, [r7, #12]
 80019e2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019e4:	f043 0220 	orr.w	r2, r3, #32
 80019e8:	68fb      	ldr	r3, [r7, #12]
 80019ea:	645a      	str	r2, [r3, #68]	; 0x44

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80019ec:	68fb      	ldr	r3, [r7, #12]
 80019ee:	2200      	movs	r2, #0
 80019f0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 80019f4:	2301      	movs	r3, #1
 80019f6:	e000      	b.n	80019fa <HAL_I2C_IsDeviceReady+0x20a>
  }
  else
  {
    return HAL_BUSY;
 80019f8:	2302      	movs	r3, #2
  }
}
 80019fa:	4618      	mov	r0, r3
 80019fc:	3720      	adds	r7, #32
 80019fe:	46bd      	mov	sp, r7
 8001a00:	bd80      	pop	{r7, pc}

08001a02 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c) /* Derogation MISRAC2012-Rule-8.13 */
{
 8001a02:	b580      	push	{r7, lr}
 8001a04:	b084      	sub	sp, #16
 8001a06:	af00      	add	r7, sp, #0
 8001a08:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	699b      	ldr	r3, [r3, #24]
 8001a10:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001a1e:	2b00      	cmp	r3, #0
 8001a20:	d005      	beq.n	8001a2e <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001a26:	68ba      	ldr	r2, [r7, #8]
 8001a28:	68f9      	ldr	r1, [r7, #12]
 8001a2a:	6878      	ldr	r0, [r7, #4]
 8001a2c:	4798      	blx	r3
  }
}
 8001a2e:	bf00      	nop
 8001a30:	3710      	adds	r7, #16
 8001a32:	46bd      	mov	sp, r7
 8001a34:	bd80      	pop	{r7, pc}
	...

08001a38 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8001a38:	b580      	push	{r7, lr}
 8001a3a:	b086      	sub	sp, #24
 8001a3c:	af02      	add	r7, sp, #8
 8001a3e:	60f8      	str	r0, [r7, #12]
 8001a40:	4608      	mov	r0, r1
 8001a42:	4611      	mov	r1, r2
 8001a44:	461a      	mov	r2, r3
 8001a46:	4603      	mov	r3, r0
 8001a48:	817b      	strh	r3, [r7, #10]
 8001a4a:	460b      	mov	r3, r1
 8001a4c:	813b      	strh	r3, [r7, #8]
 8001a4e:	4613      	mov	r3, r2
 8001a50:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8001a52:	88fb      	ldrh	r3, [r7, #6]
 8001a54:	b2da      	uxtb	r2, r3
 8001a56:	8979      	ldrh	r1, [r7, #10]
 8001a58:	4b20      	ldr	r3, [pc, #128]	; (8001adc <I2C_RequestMemoryWrite+0xa4>)
 8001a5a:	9300      	str	r3, [sp, #0]
 8001a5c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001a60:	68f8      	ldr	r0, [r7, #12]
 8001a62:	f000 fa6f 	bl	8001f44 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001a66:	69fa      	ldr	r2, [r7, #28]
 8001a68:	69b9      	ldr	r1, [r7, #24]
 8001a6a:	68f8      	ldr	r0, [r7, #12]
 8001a6c:	f000 f8ff 	bl	8001c6e <I2C_WaitOnTXISFlagUntilTimeout>
 8001a70:	4603      	mov	r3, r0
 8001a72:	2b00      	cmp	r3, #0
 8001a74:	d001      	beq.n	8001a7a <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8001a76:	2301      	movs	r3, #1
 8001a78:	e02c      	b.n	8001ad4 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8001a7a:	88fb      	ldrh	r3, [r7, #6]
 8001a7c:	2b01      	cmp	r3, #1
 8001a7e:	d105      	bne.n	8001a8c <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8001a80:	893b      	ldrh	r3, [r7, #8]
 8001a82:	b2da      	uxtb	r2, r3
 8001a84:	68fb      	ldr	r3, [r7, #12]
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	629a      	str	r2, [r3, #40]	; 0x28
 8001a8a:	e015      	b.n	8001ab8 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8001a8c:	893b      	ldrh	r3, [r7, #8]
 8001a8e:	0a1b      	lsrs	r3, r3, #8
 8001a90:	b29b      	uxth	r3, r3
 8001a92:	b2da      	uxtb	r2, r3
 8001a94:	68fb      	ldr	r3, [r7, #12]
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001a9a:	69fa      	ldr	r2, [r7, #28]
 8001a9c:	69b9      	ldr	r1, [r7, #24]
 8001a9e:	68f8      	ldr	r0, [r7, #12]
 8001aa0:	f000 f8e5 	bl	8001c6e <I2C_WaitOnTXISFlagUntilTimeout>
 8001aa4:	4603      	mov	r3, r0
 8001aa6:	2b00      	cmp	r3, #0
 8001aa8:	d001      	beq.n	8001aae <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8001aaa:	2301      	movs	r3, #1
 8001aac:	e012      	b.n	8001ad4 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8001aae:	893b      	ldrh	r3, [r7, #8]
 8001ab0:	b2da      	uxtb	r2, r3
 8001ab2:	68fb      	ldr	r3, [r7, #12]
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8001ab8:	69fb      	ldr	r3, [r7, #28]
 8001aba:	9300      	str	r3, [sp, #0]
 8001abc:	69bb      	ldr	r3, [r7, #24]
 8001abe:	2200      	movs	r2, #0
 8001ac0:	2180      	movs	r1, #128	; 0x80
 8001ac2:	68f8      	ldr	r0, [r7, #12]
 8001ac4:	f000 f884 	bl	8001bd0 <I2C_WaitOnFlagUntilTimeout>
 8001ac8:	4603      	mov	r3, r0
 8001aca:	2b00      	cmp	r3, #0
 8001acc:	d001      	beq.n	8001ad2 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8001ace:	2301      	movs	r3, #1
 8001ad0:	e000      	b.n	8001ad4 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8001ad2:	2300      	movs	r3, #0
}
 8001ad4:	4618      	mov	r0, r3
 8001ad6:	3710      	adds	r7, #16
 8001ad8:	46bd      	mov	sp, r7
 8001ada:	bd80      	pop	{r7, pc}
 8001adc:	80002000 	.word	0x80002000

08001ae0 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8001ae0:	b580      	push	{r7, lr}
 8001ae2:	b086      	sub	sp, #24
 8001ae4:	af02      	add	r7, sp, #8
 8001ae6:	60f8      	str	r0, [r7, #12]
 8001ae8:	4608      	mov	r0, r1
 8001aea:	4611      	mov	r1, r2
 8001aec:	461a      	mov	r2, r3
 8001aee:	4603      	mov	r3, r0
 8001af0:	817b      	strh	r3, [r7, #10]
 8001af2:	460b      	mov	r3, r1
 8001af4:	813b      	strh	r3, [r7, #8]
 8001af6:	4613      	mov	r3, r2
 8001af8:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8001afa:	88fb      	ldrh	r3, [r7, #6]
 8001afc:	b2da      	uxtb	r2, r3
 8001afe:	8979      	ldrh	r1, [r7, #10]
 8001b00:	4b20      	ldr	r3, [pc, #128]	; (8001b84 <I2C_RequestMemoryRead+0xa4>)
 8001b02:	9300      	str	r3, [sp, #0]
 8001b04:	2300      	movs	r3, #0
 8001b06:	68f8      	ldr	r0, [r7, #12]
 8001b08:	f000 fa1c 	bl	8001f44 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001b0c:	69fa      	ldr	r2, [r7, #28]
 8001b0e:	69b9      	ldr	r1, [r7, #24]
 8001b10:	68f8      	ldr	r0, [r7, #12]
 8001b12:	f000 f8ac 	bl	8001c6e <I2C_WaitOnTXISFlagUntilTimeout>
 8001b16:	4603      	mov	r3, r0
 8001b18:	2b00      	cmp	r3, #0
 8001b1a:	d001      	beq.n	8001b20 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8001b1c:	2301      	movs	r3, #1
 8001b1e:	e02c      	b.n	8001b7a <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8001b20:	88fb      	ldrh	r3, [r7, #6]
 8001b22:	2b01      	cmp	r3, #1
 8001b24:	d105      	bne.n	8001b32 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8001b26:	893b      	ldrh	r3, [r7, #8]
 8001b28:	b2da      	uxtb	r2, r3
 8001b2a:	68fb      	ldr	r3, [r7, #12]
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	629a      	str	r2, [r3, #40]	; 0x28
 8001b30:	e015      	b.n	8001b5e <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8001b32:	893b      	ldrh	r3, [r7, #8]
 8001b34:	0a1b      	lsrs	r3, r3, #8
 8001b36:	b29b      	uxth	r3, r3
 8001b38:	b2da      	uxtb	r2, r3
 8001b3a:	68fb      	ldr	r3, [r7, #12]
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001b40:	69fa      	ldr	r2, [r7, #28]
 8001b42:	69b9      	ldr	r1, [r7, #24]
 8001b44:	68f8      	ldr	r0, [r7, #12]
 8001b46:	f000 f892 	bl	8001c6e <I2C_WaitOnTXISFlagUntilTimeout>
 8001b4a:	4603      	mov	r3, r0
 8001b4c:	2b00      	cmp	r3, #0
 8001b4e:	d001      	beq.n	8001b54 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8001b50:	2301      	movs	r3, #1
 8001b52:	e012      	b.n	8001b7a <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8001b54:	893b      	ldrh	r3, [r7, #8]
 8001b56:	b2da      	uxtb	r2, r3
 8001b58:	68fb      	ldr	r3, [r7, #12]
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8001b5e:	69fb      	ldr	r3, [r7, #28]
 8001b60:	9300      	str	r3, [sp, #0]
 8001b62:	69bb      	ldr	r3, [r7, #24]
 8001b64:	2200      	movs	r2, #0
 8001b66:	2140      	movs	r1, #64	; 0x40
 8001b68:	68f8      	ldr	r0, [r7, #12]
 8001b6a:	f000 f831 	bl	8001bd0 <I2C_WaitOnFlagUntilTimeout>
 8001b6e:	4603      	mov	r3, r0
 8001b70:	2b00      	cmp	r3, #0
 8001b72:	d001      	beq.n	8001b78 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8001b74:	2301      	movs	r3, #1
 8001b76:	e000      	b.n	8001b7a <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8001b78:	2300      	movs	r3, #0
}
 8001b7a:	4618      	mov	r0, r3
 8001b7c:	3710      	adds	r7, #16
 8001b7e:	46bd      	mov	sp, r7
 8001b80:	bd80      	pop	{r7, pc}
 8001b82:	bf00      	nop
 8001b84:	80002000 	.word	0x80002000

08001b88 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8001b88:	b480      	push	{r7}
 8001b8a:	b083      	sub	sp, #12
 8001b8c:	af00      	add	r7, sp, #0
 8001b8e:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	699b      	ldr	r3, [r3, #24]
 8001b96:	f003 0302 	and.w	r3, r3, #2
 8001b9a:	2b02      	cmp	r3, #2
 8001b9c:	d103      	bne.n	8001ba6 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	2200      	movs	r2, #0
 8001ba4:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	699b      	ldr	r3, [r3, #24]
 8001bac:	f003 0301 	and.w	r3, r3, #1
 8001bb0:	2b01      	cmp	r3, #1
 8001bb2:	d007      	beq.n	8001bc4 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	699a      	ldr	r2, [r3, #24]
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	f042 0201 	orr.w	r2, r2, #1
 8001bc2:	619a      	str	r2, [r3, #24]
  }
}
 8001bc4:	bf00      	nop
 8001bc6:	370c      	adds	r7, #12
 8001bc8:	46bd      	mov	sp, r7
 8001bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bce:	4770      	bx	lr

08001bd0 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8001bd0:	b580      	push	{r7, lr}
 8001bd2:	b084      	sub	sp, #16
 8001bd4:	af00      	add	r7, sp, #0
 8001bd6:	60f8      	str	r0, [r7, #12]
 8001bd8:	60b9      	str	r1, [r7, #8]
 8001bda:	603b      	str	r3, [r7, #0]
 8001bdc:	4613      	mov	r3, r2
 8001bde:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001be0:	e031      	b.n	8001c46 <I2C_WaitOnFlagUntilTimeout+0x76>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001be2:	683b      	ldr	r3, [r7, #0]
 8001be4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001be8:	d02d      	beq.n	8001c46 <I2C_WaitOnFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001bea:	f7ff f89b 	bl	8000d24 <HAL_GetTick>
 8001bee:	4602      	mov	r2, r0
 8001bf0:	69bb      	ldr	r3, [r7, #24]
 8001bf2:	1ad3      	subs	r3, r2, r3
 8001bf4:	683a      	ldr	r2, [r7, #0]
 8001bf6:	429a      	cmp	r2, r3
 8001bf8:	d302      	bcc.n	8001c00 <I2C_WaitOnFlagUntilTimeout+0x30>
 8001bfa:	683b      	ldr	r3, [r7, #0]
 8001bfc:	2b00      	cmp	r3, #0
 8001bfe:	d122      	bne.n	8001c46 <I2C_WaitOnFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8001c00:	68fb      	ldr	r3, [r7, #12]
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	699a      	ldr	r2, [r3, #24]
 8001c06:	68bb      	ldr	r3, [r7, #8]
 8001c08:	4013      	ands	r3, r2
 8001c0a:	68ba      	ldr	r2, [r7, #8]
 8001c0c:	429a      	cmp	r2, r3
 8001c0e:	bf0c      	ite	eq
 8001c10:	2301      	moveq	r3, #1
 8001c12:	2300      	movne	r3, #0
 8001c14:	b2db      	uxtb	r3, r3
 8001c16:	461a      	mov	r2, r3
 8001c18:	79fb      	ldrb	r3, [r7, #7]
 8001c1a:	429a      	cmp	r2, r3
 8001c1c:	d113      	bne.n	8001c46 <I2C_WaitOnFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001c1e:	68fb      	ldr	r3, [r7, #12]
 8001c20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c22:	f043 0220 	orr.w	r2, r3, #32
 8001c26:	68fb      	ldr	r3, [r7, #12]
 8001c28:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8001c2a:	68fb      	ldr	r3, [r7, #12]
 8001c2c:	2220      	movs	r2, #32
 8001c2e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8001c32:	68fb      	ldr	r3, [r7, #12]
 8001c34:	2200      	movs	r2, #0
 8001c36:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001c3a:	68fb      	ldr	r3, [r7, #12]
 8001c3c:	2200      	movs	r2, #0
 8001c3e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
          return HAL_ERROR;
 8001c42:	2301      	movs	r3, #1
 8001c44:	e00f      	b.n	8001c66 <I2C_WaitOnFlagUntilTimeout+0x96>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001c46:	68fb      	ldr	r3, [r7, #12]
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	699a      	ldr	r2, [r3, #24]
 8001c4c:	68bb      	ldr	r3, [r7, #8]
 8001c4e:	4013      	ands	r3, r2
 8001c50:	68ba      	ldr	r2, [r7, #8]
 8001c52:	429a      	cmp	r2, r3
 8001c54:	bf0c      	ite	eq
 8001c56:	2301      	moveq	r3, #1
 8001c58:	2300      	movne	r3, #0
 8001c5a:	b2db      	uxtb	r3, r3
 8001c5c:	461a      	mov	r2, r3
 8001c5e:	79fb      	ldrb	r3, [r7, #7]
 8001c60:	429a      	cmp	r2, r3
 8001c62:	d0be      	beq.n	8001be2 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8001c64:	2300      	movs	r3, #0
}
 8001c66:	4618      	mov	r0, r3
 8001c68:	3710      	adds	r7, #16
 8001c6a:	46bd      	mov	sp, r7
 8001c6c:	bd80      	pop	{r7, pc}

08001c6e <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8001c6e:	b580      	push	{r7, lr}
 8001c70:	b084      	sub	sp, #16
 8001c72:	af00      	add	r7, sp, #0
 8001c74:	60f8      	str	r0, [r7, #12]
 8001c76:	60b9      	str	r1, [r7, #8]
 8001c78:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8001c7a:	e033      	b.n	8001ce4 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8001c7c:	687a      	ldr	r2, [r7, #4]
 8001c7e:	68b9      	ldr	r1, [r7, #8]
 8001c80:	68f8      	ldr	r0, [r7, #12]
 8001c82:	f000 f87f 	bl	8001d84 <I2C_IsErrorOccurred>
 8001c86:	4603      	mov	r3, r0
 8001c88:	2b00      	cmp	r3, #0
 8001c8a:	d001      	beq.n	8001c90 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8001c8c:	2301      	movs	r3, #1
 8001c8e:	e031      	b.n	8001cf4 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001c90:	68bb      	ldr	r3, [r7, #8]
 8001c92:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001c96:	d025      	beq.n	8001ce4 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001c98:	f7ff f844 	bl	8000d24 <HAL_GetTick>
 8001c9c:	4602      	mov	r2, r0
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	1ad3      	subs	r3, r2, r3
 8001ca2:	68ba      	ldr	r2, [r7, #8]
 8001ca4:	429a      	cmp	r2, r3
 8001ca6:	d302      	bcc.n	8001cae <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8001ca8:	68bb      	ldr	r3, [r7, #8]
 8001caa:	2b00      	cmp	r3, #0
 8001cac:	d11a      	bne.n	8001ce4 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8001cae:	68fb      	ldr	r3, [r7, #12]
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	699b      	ldr	r3, [r3, #24]
 8001cb4:	f003 0302 	and.w	r3, r3, #2
 8001cb8:	2b02      	cmp	r3, #2
 8001cba:	d013      	beq.n	8001ce4 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001cbc:	68fb      	ldr	r3, [r7, #12]
 8001cbe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001cc0:	f043 0220 	orr.w	r2, r3, #32
 8001cc4:	68fb      	ldr	r3, [r7, #12]
 8001cc6:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8001cc8:	68fb      	ldr	r3, [r7, #12]
 8001cca:	2220      	movs	r2, #32
 8001ccc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8001cd0:	68fb      	ldr	r3, [r7, #12]
 8001cd2:	2200      	movs	r2, #0
 8001cd4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001cd8:	68fb      	ldr	r3, [r7, #12]
 8001cda:	2200      	movs	r2, #0
 8001cdc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8001ce0:	2301      	movs	r3, #1
 8001ce2:	e007      	b.n	8001cf4 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8001ce4:	68fb      	ldr	r3, [r7, #12]
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	699b      	ldr	r3, [r3, #24]
 8001cea:	f003 0302 	and.w	r3, r3, #2
 8001cee:	2b02      	cmp	r3, #2
 8001cf0:	d1c4      	bne.n	8001c7c <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8001cf2:	2300      	movs	r3, #0
}
 8001cf4:	4618      	mov	r0, r3
 8001cf6:	3710      	adds	r7, #16
 8001cf8:	46bd      	mov	sp, r7
 8001cfa:	bd80      	pop	{r7, pc}

08001cfc <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8001cfc:	b580      	push	{r7, lr}
 8001cfe:	b084      	sub	sp, #16
 8001d00:	af00      	add	r7, sp, #0
 8001d02:	60f8      	str	r0, [r7, #12]
 8001d04:	60b9      	str	r1, [r7, #8]
 8001d06:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001d08:	e02f      	b.n	8001d6a <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8001d0a:	687a      	ldr	r2, [r7, #4]
 8001d0c:	68b9      	ldr	r1, [r7, #8]
 8001d0e:	68f8      	ldr	r0, [r7, #12]
 8001d10:	f000 f838 	bl	8001d84 <I2C_IsErrorOccurred>
 8001d14:	4603      	mov	r3, r0
 8001d16:	2b00      	cmp	r3, #0
 8001d18:	d001      	beq.n	8001d1e <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8001d1a:	2301      	movs	r3, #1
 8001d1c:	e02d      	b.n	8001d7a <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001d1e:	f7ff f801 	bl	8000d24 <HAL_GetTick>
 8001d22:	4602      	mov	r2, r0
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	1ad3      	subs	r3, r2, r3
 8001d28:	68ba      	ldr	r2, [r7, #8]
 8001d2a:	429a      	cmp	r2, r3
 8001d2c:	d302      	bcc.n	8001d34 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8001d2e:	68bb      	ldr	r3, [r7, #8]
 8001d30:	2b00      	cmp	r3, #0
 8001d32:	d11a      	bne.n	8001d6a <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8001d34:	68fb      	ldr	r3, [r7, #12]
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	699b      	ldr	r3, [r3, #24]
 8001d3a:	f003 0320 	and.w	r3, r3, #32
 8001d3e:	2b20      	cmp	r3, #32
 8001d40:	d013      	beq.n	8001d6a <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001d42:	68fb      	ldr	r3, [r7, #12]
 8001d44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d46:	f043 0220 	orr.w	r2, r3, #32
 8001d4a:	68fb      	ldr	r3, [r7, #12]
 8001d4c:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8001d4e:	68fb      	ldr	r3, [r7, #12]
 8001d50:	2220      	movs	r2, #32
 8001d52:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001d56:	68fb      	ldr	r3, [r7, #12]
 8001d58:	2200      	movs	r2, #0
 8001d5a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001d5e:	68fb      	ldr	r3, [r7, #12]
 8001d60:	2200      	movs	r2, #0
 8001d62:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8001d66:	2301      	movs	r3, #1
 8001d68:	e007      	b.n	8001d7a <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001d6a:	68fb      	ldr	r3, [r7, #12]
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	699b      	ldr	r3, [r3, #24]
 8001d70:	f003 0320 	and.w	r3, r3, #32
 8001d74:	2b20      	cmp	r3, #32
 8001d76:	d1c8      	bne.n	8001d0a <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8001d78:	2300      	movs	r3, #0
}
 8001d7a:	4618      	mov	r0, r3
 8001d7c:	3710      	adds	r7, #16
 8001d7e:	46bd      	mov	sp, r7
 8001d80:	bd80      	pop	{r7, pc}
	...

08001d84 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001d84:	b580      	push	{r7, lr}
 8001d86:	b08a      	sub	sp, #40	; 0x28
 8001d88:	af00      	add	r7, sp, #0
 8001d8a:	60f8      	str	r0, [r7, #12]
 8001d8c:	60b9      	str	r1, [r7, #8]
 8001d8e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001d90:	2300      	movs	r3, #0
 8001d92:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8001d96:	68fb      	ldr	r3, [r7, #12]
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	699b      	ldr	r3, [r3, #24]
 8001d9c:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8001d9e:	2300      	movs	r3, #0
 8001da0:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8001da6:	69bb      	ldr	r3, [r7, #24]
 8001da8:	f003 0310 	and.w	r3, r3, #16
 8001dac:	2b00      	cmp	r3, #0
 8001dae:	d068      	beq.n	8001e82 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001db0:	68fb      	ldr	r3, [r7, #12]
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	2210      	movs	r2, #16
 8001db6:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8001db8:	e049      	b.n	8001e4e <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8001dba:	68bb      	ldr	r3, [r7, #8]
 8001dbc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001dc0:	d045      	beq.n	8001e4e <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8001dc2:	f7fe ffaf 	bl	8000d24 <HAL_GetTick>
 8001dc6:	4602      	mov	r2, r0
 8001dc8:	69fb      	ldr	r3, [r7, #28]
 8001dca:	1ad3      	subs	r3, r2, r3
 8001dcc:	68ba      	ldr	r2, [r7, #8]
 8001dce:	429a      	cmp	r2, r3
 8001dd0:	d302      	bcc.n	8001dd8 <I2C_IsErrorOccurred+0x54>
 8001dd2:	68bb      	ldr	r3, [r7, #8]
 8001dd4:	2b00      	cmp	r3, #0
 8001dd6:	d13a      	bne.n	8001e4e <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8001dd8:	68fb      	ldr	r3, [r7, #12]
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	685b      	ldr	r3, [r3, #4]
 8001dde:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001de2:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8001de4:	68fb      	ldr	r3, [r7, #12]
 8001de6:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8001dea:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8001dec:	68fb      	ldr	r3, [r7, #12]
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	699b      	ldr	r3, [r3, #24]
 8001df2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001df6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001dfa:	d121      	bne.n	8001e40 <I2C_IsErrorOccurred+0xbc>
 8001dfc:	697b      	ldr	r3, [r7, #20]
 8001dfe:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001e02:	d01d      	beq.n	8001e40 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8001e04:	7cfb      	ldrb	r3, [r7, #19]
 8001e06:	2b20      	cmp	r3, #32
 8001e08:	d01a      	beq.n	8001e40 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8001e0a:	68fb      	ldr	r3, [r7, #12]
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	685a      	ldr	r2, [r3, #4]
 8001e10:	68fb      	ldr	r3, [r7, #12]
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001e18:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8001e1a:	f7fe ff83 	bl	8000d24 <HAL_GetTick>
 8001e1e:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001e20:	e00e      	b.n	8001e40 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8001e22:	f7fe ff7f 	bl	8000d24 <HAL_GetTick>
 8001e26:	4602      	mov	r2, r0
 8001e28:	69fb      	ldr	r3, [r7, #28]
 8001e2a:	1ad3      	subs	r3, r2, r3
 8001e2c:	2b19      	cmp	r3, #25
 8001e2e:	d907      	bls.n	8001e40 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8001e30:	6a3b      	ldr	r3, [r7, #32]
 8001e32:	f043 0320 	orr.w	r3, r3, #32
 8001e36:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8001e38:	2301      	movs	r3, #1
 8001e3a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

              break;
 8001e3e:	e006      	b.n	8001e4e <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001e40:	68fb      	ldr	r3, [r7, #12]
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	699b      	ldr	r3, [r3, #24]
 8001e46:	f003 0320 	and.w	r3, r3, #32
 8001e4a:	2b20      	cmp	r3, #32
 8001e4c:	d1e9      	bne.n	8001e22 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8001e4e:	68fb      	ldr	r3, [r7, #12]
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	699b      	ldr	r3, [r3, #24]
 8001e54:	f003 0320 	and.w	r3, r3, #32
 8001e58:	2b20      	cmp	r3, #32
 8001e5a:	d003      	beq.n	8001e64 <I2C_IsErrorOccurred+0xe0>
 8001e5c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001e60:	2b00      	cmp	r3, #0
 8001e62:	d0aa      	beq.n	8001dba <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8001e64:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001e68:	2b00      	cmp	r3, #0
 8001e6a:	d103      	bne.n	8001e74 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001e6c:	68fb      	ldr	r3, [r7, #12]
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	2220      	movs	r2, #32
 8001e72:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8001e74:	6a3b      	ldr	r3, [r7, #32]
 8001e76:	f043 0304 	orr.w	r3, r3, #4
 8001e7a:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8001e7c:	2301      	movs	r3, #1
 8001e7e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8001e82:	68fb      	ldr	r3, [r7, #12]
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	699b      	ldr	r3, [r3, #24]
 8001e88:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8001e8a:	69bb      	ldr	r3, [r7, #24]
 8001e8c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e90:	2b00      	cmp	r3, #0
 8001e92:	d00b      	beq.n	8001eac <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8001e94:	6a3b      	ldr	r3, [r7, #32]
 8001e96:	f043 0301 	orr.w	r3, r3, #1
 8001e9a:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8001e9c:	68fb      	ldr	r3, [r7, #12]
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001ea4:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8001ea6:	2301      	movs	r3, #1
 8001ea8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8001eac:	69bb      	ldr	r3, [r7, #24]
 8001eae:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001eb2:	2b00      	cmp	r3, #0
 8001eb4:	d00b      	beq.n	8001ece <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8001eb6:	6a3b      	ldr	r3, [r7, #32]
 8001eb8:	f043 0308 	orr.w	r3, r3, #8
 8001ebc:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8001ebe:	68fb      	ldr	r3, [r7, #12]
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001ec6:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8001ec8:	2301      	movs	r3, #1
 8001eca:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8001ece:	69bb      	ldr	r3, [r7, #24]
 8001ed0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001ed4:	2b00      	cmp	r3, #0
 8001ed6:	d00b      	beq.n	8001ef0 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8001ed8:	6a3b      	ldr	r3, [r7, #32]
 8001eda:	f043 0302 	orr.w	r3, r3, #2
 8001ede:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8001ee0:	68fb      	ldr	r3, [r7, #12]
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001ee8:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8001eea:	2301      	movs	r3, #1
 8001eec:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8001ef0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001ef4:	2b00      	cmp	r3, #0
 8001ef6:	d01c      	beq.n	8001f32 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8001ef8:	68f8      	ldr	r0, [r7, #12]
 8001efa:	f7ff fe45 	bl	8001b88 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001efe:	68fb      	ldr	r3, [r7, #12]
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	6859      	ldr	r1, [r3, #4]
 8001f04:	68fb      	ldr	r3, [r7, #12]
 8001f06:	681a      	ldr	r2, [r3, #0]
 8001f08:	4b0d      	ldr	r3, [pc, #52]	; (8001f40 <I2C_IsErrorOccurred+0x1bc>)
 8001f0a:	400b      	ands	r3, r1
 8001f0c:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8001f0e:	68fb      	ldr	r3, [r7, #12]
 8001f10:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001f12:	6a3b      	ldr	r3, [r7, #32]
 8001f14:	431a      	orrs	r2, r3
 8001f16:	68fb      	ldr	r3, [r7, #12]
 8001f18:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8001f1a:	68fb      	ldr	r3, [r7, #12]
 8001f1c:	2220      	movs	r2, #32
 8001f1e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001f22:	68fb      	ldr	r3, [r7, #12]
 8001f24:	2200      	movs	r2, #0
 8001f26:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001f2a:	68fb      	ldr	r3, [r7, #12]
 8001f2c:	2200      	movs	r2, #0
 8001f2e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8001f32:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8001f36:	4618      	mov	r0, r3
 8001f38:	3728      	adds	r7, #40	; 0x28
 8001f3a:	46bd      	mov	sp, r7
 8001f3c:	bd80      	pop	{r7, pc}
 8001f3e:	bf00      	nop
 8001f40:	fe00e800 	.word	0xfe00e800

08001f44 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8001f44:	b480      	push	{r7}
 8001f46:	b087      	sub	sp, #28
 8001f48:	af00      	add	r7, sp, #0
 8001f4a:	60f8      	str	r0, [r7, #12]
 8001f4c:	607b      	str	r3, [r7, #4]
 8001f4e:	460b      	mov	r3, r1
 8001f50:	817b      	strh	r3, [r7, #10]
 8001f52:	4613      	mov	r3, r2
 8001f54:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8001f56:	897b      	ldrh	r3, [r7, #10]
 8001f58:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8001f5c:	7a7b      	ldrb	r3, [r7, #9]
 8001f5e:	041b      	lsls	r3, r3, #16
 8001f60:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8001f64:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8001f6a:	6a3b      	ldr	r3, [r7, #32]
 8001f6c:	4313      	orrs	r3, r2
 8001f6e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001f72:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8001f74:	68fb      	ldr	r3, [r7, #12]
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	685a      	ldr	r2, [r3, #4]
 8001f7a:	6a3b      	ldr	r3, [r7, #32]
 8001f7c:	0d5b      	lsrs	r3, r3, #21
 8001f7e:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8001f82:	4b08      	ldr	r3, [pc, #32]	; (8001fa4 <I2C_TransferConfig+0x60>)
 8001f84:	430b      	orrs	r3, r1
 8001f86:	43db      	mvns	r3, r3
 8001f88:	ea02 0103 	and.w	r1, r2, r3
 8001f8c:	68fb      	ldr	r3, [r7, #12]
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	697a      	ldr	r2, [r7, #20]
 8001f92:	430a      	orrs	r2, r1
 8001f94:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8001f96:	bf00      	nop
 8001f98:	371c      	adds	r7, #28
 8001f9a:	46bd      	mov	sp, r7
 8001f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fa0:	4770      	bx	lr
 8001fa2:	bf00      	nop
 8001fa4:	03ff63ff 	.word	0x03ff63ff

08001fa8 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8001fa8:	b480      	push	{r7}
 8001faa:	b083      	sub	sp, #12
 8001fac:	af00      	add	r7, sp, #0
 8001fae:	6078      	str	r0, [r7, #4]
 8001fb0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001fb8:	b2db      	uxtb	r3, r3
 8001fba:	2b20      	cmp	r3, #32
 8001fbc:	d138      	bne.n	8002030 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001fc4:	2b01      	cmp	r3, #1
 8001fc6:	d101      	bne.n	8001fcc <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8001fc8:	2302      	movs	r3, #2
 8001fca:	e032      	b.n	8002032 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	2201      	movs	r2, #1
 8001fd0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	2224      	movs	r2, #36	; 0x24
 8001fd8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	681a      	ldr	r2, [r3, #0]
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	f022 0201 	bic.w	r2, r2, #1
 8001fea:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	681a      	ldr	r2, [r3, #0]
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8001ffa:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	6819      	ldr	r1, [r3, #0]
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	683a      	ldr	r2, [r7, #0]
 8002008:	430a      	orrs	r2, r1
 800200a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	681a      	ldr	r2, [r3, #0]
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	f042 0201 	orr.w	r2, r2, #1
 800201a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	2220      	movs	r2, #32
 8002020:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	2200      	movs	r2, #0
 8002028:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800202c:	2300      	movs	r3, #0
 800202e:	e000      	b.n	8002032 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8002030:	2302      	movs	r3, #2
  }
}
 8002032:	4618      	mov	r0, r3
 8002034:	370c      	adds	r7, #12
 8002036:	46bd      	mov	sp, r7
 8002038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800203c:	4770      	bx	lr

0800203e <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800203e:	b480      	push	{r7}
 8002040:	b085      	sub	sp, #20
 8002042:	af00      	add	r7, sp, #0
 8002044:	6078      	str	r0, [r7, #4]
 8002046:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800204e:	b2db      	uxtb	r3, r3
 8002050:	2b20      	cmp	r3, #32
 8002052:	d139      	bne.n	80020c8 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800205a:	2b01      	cmp	r3, #1
 800205c:	d101      	bne.n	8002062 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800205e:	2302      	movs	r3, #2
 8002060:	e033      	b.n	80020ca <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	2201      	movs	r2, #1
 8002066:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	2224      	movs	r2, #36	; 0x24
 800206e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	681a      	ldr	r2, [r3, #0]
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	f022 0201 	bic.w	r2, r2, #1
 8002080:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800208a:	68fb      	ldr	r3, [r7, #12]
 800208c:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8002090:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8002092:	683b      	ldr	r3, [r7, #0]
 8002094:	021b      	lsls	r3, r3, #8
 8002096:	68fa      	ldr	r2, [r7, #12]
 8002098:	4313      	orrs	r3, r2
 800209a:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	68fa      	ldr	r2, [r7, #12]
 80020a2:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	681a      	ldr	r2, [r3, #0]
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	f042 0201 	orr.w	r2, r2, #1
 80020b2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	2220      	movs	r2, #32
 80020b8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	2200      	movs	r2, #0
 80020c0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80020c4:	2300      	movs	r3, #0
 80020c6:	e000      	b.n	80020ca <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80020c8:	2302      	movs	r3, #2
  }
}
 80020ca:	4618      	mov	r0, r3
 80020cc:	3714      	adds	r7, #20
 80020ce:	46bd      	mov	sp, r7
 80020d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020d4:	4770      	bx	lr
	...

080020d8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80020d8:	b580      	push	{r7, lr}
 80020da:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 80020de:	af00      	add	r7, sp, #0
 80020e0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80020e4:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80020e8:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80020ea:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80020ee:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	2b00      	cmp	r3, #0
 80020f6:	d102      	bne.n	80020fe <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 80020f8:	2301      	movs	r3, #1
 80020fa:	f001 b823 	b.w	8003144 <HAL_RCC_OscConfig+0x106c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80020fe:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002102:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	f003 0301 	and.w	r3, r3, #1
 800210e:	2b00      	cmp	r3, #0
 8002110:	f000 817d 	beq.w	800240e <HAL_RCC_OscConfig+0x336>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8002114:	4bbc      	ldr	r3, [pc, #752]	; (8002408 <HAL_RCC_OscConfig+0x330>)
 8002116:	685b      	ldr	r3, [r3, #4]
 8002118:	f003 030c 	and.w	r3, r3, #12
 800211c:	2b04      	cmp	r3, #4
 800211e:	d00c      	beq.n	800213a <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002120:	4bb9      	ldr	r3, [pc, #740]	; (8002408 <HAL_RCC_OscConfig+0x330>)
 8002122:	685b      	ldr	r3, [r3, #4]
 8002124:	f003 030c 	and.w	r3, r3, #12
 8002128:	2b08      	cmp	r3, #8
 800212a:	d15c      	bne.n	80021e6 <HAL_RCC_OscConfig+0x10e>
 800212c:	4bb6      	ldr	r3, [pc, #728]	; (8002408 <HAL_RCC_OscConfig+0x330>)
 800212e:	685b      	ldr	r3, [r3, #4]
 8002130:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002134:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002138:	d155      	bne.n	80021e6 <HAL_RCC_OscConfig+0x10e>
 800213a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800213e:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002142:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 8002146:	fa93 f3a3 	rbit	r3, r3
 800214a:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800214e:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002152:	fab3 f383 	clz	r3, r3
 8002156:	b2db      	uxtb	r3, r3
 8002158:	095b      	lsrs	r3, r3, #5
 800215a:	b2db      	uxtb	r3, r3
 800215c:	f043 0301 	orr.w	r3, r3, #1
 8002160:	b2db      	uxtb	r3, r3
 8002162:	2b01      	cmp	r3, #1
 8002164:	d102      	bne.n	800216c <HAL_RCC_OscConfig+0x94>
 8002166:	4ba8      	ldr	r3, [pc, #672]	; (8002408 <HAL_RCC_OscConfig+0x330>)
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	e015      	b.n	8002198 <HAL_RCC_OscConfig+0xc0>
 800216c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002170:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002174:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 8002178:	fa93 f3a3 	rbit	r3, r3
 800217c:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8002180:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002184:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8002188:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 800218c:	fa93 f3a3 	rbit	r3, r3
 8002190:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 8002194:	4b9c      	ldr	r3, [pc, #624]	; (8002408 <HAL_RCC_OscConfig+0x330>)
 8002196:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002198:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800219c:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 80021a0:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 80021a4:	fa92 f2a2 	rbit	r2, r2
 80021a8:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 80021ac:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 80021b0:	fab2 f282 	clz	r2, r2
 80021b4:	b2d2      	uxtb	r2, r2
 80021b6:	f042 0220 	orr.w	r2, r2, #32
 80021ba:	b2d2      	uxtb	r2, r2
 80021bc:	f002 021f 	and.w	r2, r2, #31
 80021c0:	2101      	movs	r1, #1
 80021c2:	fa01 f202 	lsl.w	r2, r1, r2
 80021c6:	4013      	ands	r3, r2
 80021c8:	2b00      	cmp	r3, #0
 80021ca:	f000 811f 	beq.w	800240c <HAL_RCC_OscConfig+0x334>
 80021ce:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80021d2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	685b      	ldr	r3, [r3, #4]
 80021da:	2b00      	cmp	r3, #0
 80021dc:	f040 8116 	bne.w	800240c <HAL_RCC_OscConfig+0x334>
      {
        return HAL_ERROR;
 80021e0:	2301      	movs	r3, #1
 80021e2:	f000 bfaf 	b.w	8003144 <HAL_RCC_OscConfig+0x106c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80021e6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80021ea:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	685b      	ldr	r3, [r3, #4]
 80021f2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80021f6:	d106      	bne.n	8002206 <HAL_RCC_OscConfig+0x12e>
 80021f8:	4b83      	ldr	r3, [pc, #524]	; (8002408 <HAL_RCC_OscConfig+0x330>)
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	4a82      	ldr	r2, [pc, #520]	; (8002408 <HAL_RCC_OscConfig+0x330>)
 80021fe:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002202:	6013      	str	r3, [r2, #0]
 8002204:	e036      	b.n	8002274 <HAL_RCC_OscConfig+0x19c>
 8002206:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800220a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	685b      	ldr	r3, [r3, #4]
 8002212:	2b00      	cmp	r3, #0
 8002214:	d10c      	bne.n	8002230 <HAL_RCC_OscConfig+0x158>
 8002216:	4b7c      	ldr	r3, [pc, #496]	; (8002408 <HAL_RCC_OscConfig+0x330>)
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	4a7b      	ldr	r2, [pc, #492]	; (8002408 <HAL_RCC_OscConfig+0x330>)
 800221c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002220:	6013      	str	r3, [r2, #0]
 8002222:	4b79      	ldr	r3, [pc, #484]	; (8002408 <HAL_RCC_OscConfig+0x330>)
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	4a78      	ldr	r2, [pc, #480]	; (8002408 <HAL_RCC_OscConfig+0x330>)
 8002228:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800222c:	6013      	str	r3, [r2, #0]
 800222e:	e021      	b.n	8002274 <HAL_RCC_OscConfig+0x19c>
 8002230:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002234:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	685b      	ldr	r3, [r3, #4]
 800223c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002240:	d10c      	bne.n	800225c <HAL_RCC_OscConfig+0x184>
 8002242:	4b71      	ldr	r3, [pc, #452]	; (8002408 <HAL_RCC_OscConfig+0x330>)
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	4a70      	ldr	r2, [pc, #448]	; (8002408 <HAL_RCC_OscConfig+0x330>)
 8002248:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800224c:	6013      	str	r3, [r2, #0]
 800224e:	4b6e      	ldr	r3, [pc, #440]	; (8002408 <HAL_RCC_OscConfig+0x330>)
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	4a6d      	ldr	r2, [pc, #436]	; (8002408 <HAL_RCC_OscConfig+0x330>)
 8002254:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002258:	6013      	str	r3, [r2, #0]
 800225a:	e00b      	b.n	8002274 <HAL_RCC_OscConfig+0x19c>
 800225c:	4b6a      	ldr	r3, [pc, #424]	; (8002408 <HAL_RCC_OscConfig+0x330>)
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	4a69      	ldr	r2, [pc, #420]	; (8002408 <HAL_RCC_OscConfig+0x330>)
 8002262:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002266:	6013      	str	r3, [r2, #0]
 8002268:	4b67      	ldr	r3, [pc, #412]	; (8002408 <HAL_RCC_OscConfig+0x330>)
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	4a66      	ldr	r2, [pc, #408]	; (8002408 <HAL_RCC_OscConfig+0x330>)
 800226e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002272:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002274:	4b64      	ldr	r3, [pc, #400]	; (8002408 <HAL_RCC_OscConfig+0x330>)
 8002276:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002278:	f023 020f 	bic.w	r2, r3, #15
 800227c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002280:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	689b      	ldr	r3, [r3, #8]
 8002288:	495f      	ldr	r1, [pc, #380]	; (8002408 <HAL_RCC_OscConfig+0x330>)
 800228a:	4313      	orrs	r3, r2
 800228c:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800228e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002292:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	685b      	ldr	r3, [r3, #4]
 800229a:	2b00      	cmp	r3, #0
 800229c:	d059      	beq.n	8002352 <HAL_RCC_OscConfig+0x27a>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800229e:	f7fe fd41 	bl	8000d24 <HAL_GetTick>
 80022a2:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80022a6:	e00a      	b.n	80022be <HAL_RCC_OscConfig+0x1e6>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80022a8:	f7fe fd3c 	bl	8000d24 <HAL_GetTick>
 80022ac:	4602      	mov	r2, r0
 80022ae:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80022b2:	1ad3      	subs	r3, r2, r3
 80022b4:	2b64      	cmp	r3, #100	; 0x64
 80022b6:	d902      	bls.n	80022be <HAL_RCC_OscConfig+0x1e6>
          {
            return HAL_TIMEOUT;
 80022b8:	2303      	movs	r3, #3
 80022ba:	f000 bf43 	b.w	8003144 <HAL_RCC_OscConfig+0x106c>
 80022be:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80022c2:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022c6:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 80022ca:	fa93 f3a3 	rbit	r3, r3
 80022ce:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 80022d2:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80022d6:	fab3 f383 	clz	r3, r3
 80022da:	b2db      	uxtb	r3, r3
 80022dc:	095b      	lsrs	r3, r3, #5
 80022de:	b2db      	uxtb	r3, r3
 80022e0:	f043 0301 	orr.w	r3, r3, #1
 80022e4:	b2db      	uxtb	r3, r3
 80022e6:	2b01      	cmp	r3, #1
 80022e8:	d102      	bne.n	80022f0 <HAL_RCC_OscConfig+0x218>
 80022ea:	4b47      	ldr	r3, [pc, #284]	; (8002408 <HAL_RCC_OscConfig+0x330>)
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	e015      	b.n	800231c <HAL_RCC_OscConfig+0x244>
 80022f0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80022f4:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022f8:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 80022fc:	fa93 f3a3 	rbit	r3, r3
 8002300:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8002304:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002308:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 800230c:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 8002310:	fa93 f3a3 	rbit	r3, r3
 8002314:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 8002318:	4b3b      	ldr	r3, [pc, #236]	; (8002408 <HAL_RCC_OscConfig+0x330>)
 800231a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800231c:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002320:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 8002324:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8002328:	fa92 f2a2 	rbit	r2, r2
 800232c:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 8002330:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 8002334:	fab2 f282 	clz	r2, r2
 8002338:	b2d2      	uxtb	r2, r2
 800233a:	f042 0220 	orr.w	r2, r2, #32
 800233e:	b2d2      	uxtb	r2, r2
 8002340:	f002 021f 	and.w	r2, r2, #31
 8002344:	2101      	movs	r1, #1
 8002346:	fa01 f202 	lsl.w	r2, r1, r2
 800234a:	4013      	ands	r3, r2
 800234c:	2b00      	cmp	r3, #0
 800234e:	d0ab      	beq.n	80022a8 <HAL_RCC_OscConfig+0x1d0>
 8002350:	e05d      	b.n	800240e <HAL_RCC_OscConfig+0x336>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002352:	f7fe fce7 	bl	8000d24 <HAL_GetTick>
 8002356:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800235a:	e00a      	b.n	8002372 <HAL_RCC_OscConfig+0x29a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800235c:	f7fe fce2 	bl	8000d24 <HAL_GetTick>
 8002360:	4602      	mov	r2, r0
 8002362:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002366:	1ad3      	subs	r3, r2, r3
 8002368:	2b64      	cmp	r3, #100	; 0x64
 800236a:	d902      	bls.n	8002372 <HAL_RCC_OscConfig+0x29a>
          {
            return HAL_TIMEOUT;
 800236c:	2303      	movs	r3, #3
 800236e:	f000 bee9 	b.w	8003144 <HAL_RCC_OscConfig+0x106c>
 8002372:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002376:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800237a:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 800237e:	fa93 f3a3 	rbit	r3, r3
 8002382:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 8002386:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800238a:	fab3 f383 	clz	r3, r3
 800238e:	b2db      	uxtb	r3, r3
 8002390:	095b      	lsrs	r3, r3, #5
 8002392:	b2db      	uxtb	r3, r3
 8002394:	f043 0301 	orr.w	r3, r3, #1
 8002398:	b2db      	uxtb	r3, r3
 800239a:	2b01      	cmp	r3, #1
 800239c:	d102      	bne.n	80023a4 <HAL_RCC_OscConfig+0x2cc>
 800239e:	4b1a      	ldr	r3, [pc, #104]	; (8002408 <HAL_RCC_OscConfig+0x330>)
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	e015      	b.n	80023d0 <HAL_RCC_OscConfig+0x2f8>
 80023a4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80023a8:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023ac:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 80023b0:	fa93 f3a3 	rbit	r3, r3
 80023b4:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 80023b8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80023bc:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 80023c0:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 80023c4:	fa93 f3a3 	rbit	r3, r3
 80023c8:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 80023cc:	4b0e      	ldr	r3, [pc, #56]	; (8002408 <HAL_RCC_OscConfig+0x330>)
 80023ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023d0:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80023d4:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 80023d8:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 80023dc:	fa92 f2a2 	rbit	r2, r2
 80023e0:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 80023e4:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 80023e8:	fab2 f282 	clz	r2, r2
 80023ec:	b2d2      	uxtb	r2, r2
 80023ee:	f042 0220 	orr.w	r2, r2, #32
 80023f2:	b2d2      	uxtb	r2, r2
 80023f4:	f002 021f 	and.w	r2, r2, #31
 80023f8:	2101      	movs	r1, #1
 80023fa:	fa01 f202 	lsl.w	r2, r1, r2
 80023fe:	4013      	ands	r3, r2
 8002400:	2b00      	cmp	r3, #0
 8002402:	d1ab      	bne.n	800235c <HAL_RCC_OscConfig+0x284>
 8002404:	e003      	b.n	800240e <HAL_RCC_OscConfig+0x336>
 8002406:	bf00      	nop
 8002408:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800240c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800240e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002412:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	f003 0302 	and.w	r3, r3, #2
 800241e:	2b00      	cmp	r3, #0
 8002420:	f000 817d 	beq.w	800271e <HAL_RCC_OscConfig+0x646>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8002424:	4ba6      	ldr	r3, [pc, #664]	; (80026c0 <HAL_RCC_OscConfig+0x5e8>)
 8002426:	685b      	ldr	r3, [r3, #4]
 8002428:	f003 030c 	and.w	r3, r3, #12
 800242c:	2b00      	cmp	r3, #0
 800242e:	d00b      	beq.n	8002448 <HAL_RCC_OscConfig+0x370>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8002430:	4ba3      	ldr	r3, [pc, #652]	; (80026c0 <HAL_RCC_OscConfig+0x5e8>)
 8002432:	685b      	ldr	r3, [r3, #4]
 8002434:	f003 030c 	and.w	r3, r3, #12
 8002438:	2b08      	cmp	r3, #8
 800243a:	d172      	bne.n	8002522 <HAL_RCC_OscConfig+0x44a>
 800243c:	4ba0      	ldr	r3, [pc, #640]	; (80026c0 <HAL_RCC_OscConfig+0x5e8>)
 800243e:	685b      	ldr	r3, [r3, #4]
 8002440:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002444:	2b00      	cmp	r3, #0
 8002446:	d16c      	bne.n	8002522 <HAL_RCC_OscConfig+0x44a>
 8002448:	2302      	movs	r3, #2
 800244a:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800244e:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 8002452:	fa93 f3a3 	rbit	r3, r3
 8002456:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 800245a:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800245e:	fab3 f383 	clz	r3, r3
 8002462:	b2db      	uxtb	r3, r3
 8002464:	095b      	lsrs	r3, r3, #5
 8002466:	b2db      	uxtb	r3, r3
 8002468:	f043 0301 	orr.w	r3, r3, #1
 800246c:	b2db      	uxtb	r3, r3
 800246e:	2b01      	cmp	r3, #1
 8002470:	d102      	bne.n	8002478 <HAL_RCC_OscConfig+0x3a0>
 8002472:	4b93      	ldr	r3, [pc, #588]	; (80026c0 <HAL_RCC_OscConfig+0x5e8>)
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	e013      	b.n	80024a0 <HAL_RCC_OscConfig+0x3c8>
 8002478:	2302      	movs	r3, #2
 800247a:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800247e:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 8002482:	fa93 f3a3 	rbit	r3, r3
 8002486:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 800248a:	2302      	movs	r3, #2
 800248c:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8002490:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8002494:	fa93 f3a3 	rbit	r3, r3
 8002498:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 800249c:	4b88      	ldr	r3, [pc, #544]	; (80026c0 <HAL_RCC_OscConfig+0x5e8>)
 800249e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024a0:	2202      	movs	r2, #2
 80024a2:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 80024a6:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 80024aa:	fa92 f2a2 	rbit	r2, r2
 80024ae:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 80024b2:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 80024b6:	fab2 f282 	clz	r2, r2
 80024ba:	b2d2      	uxtb	r2, r2
 80024bc:	f042 0220 	orr.w	r2, r2, #32
 80024c0:	b2d2      	uxtb	r2, r2
 80024c2:	f002 021f 	and.w	r2, r2, #31
 80024c6:	2101      	movs	r1, #1
 80024c8:	fa01 f202 	lsl.w	r2, r1, r2
 80024cc:	4013      	ands	r3, r2
 80024ce:	2b00      	cmp	r3, #0
 80024d0:	d00a      	beq.n	80024e8 <HAL_RCC_OscConfig+0x410>
 80024d2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80024d6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	691b      	ldr	r3, [r3, #16]
 80024de:	2b01      	cmp	r3, #1
 80024e0:	d002      	beq.n	80024e8 <HAL_RCC_OscConfig+0x410>
      {
        return HAL_ERROR;
 80024e2:	2301      	movs	r3, #1
 80024e4:	f000 be2e 	b.w	8003144 <HAL_RCC_OscConfig+0x106c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80024e8:	4b75      	ldr	r3, [pc, #468]	; (80026c0 <HAL_RCC_OscConfig+0x5e8>)
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80024f0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80024f4:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	695b      	ldr	r3, [r3, #20]
 80024fc:	21f8      	movs	r1, #248	; 0xf8
 80024fe:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002502:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 8002506:	fa91 f1a1 	rbit	r1, r1
 800250a:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 800250e:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 8002512:	fab1 f181 	clz	r1, r1
 8002516:	b2c9      	uxtb	r1, r1
 8002518:	408b      	lsls	r3, r1
 800251a:	4969      	ldr	r1, [pc, #420]	; (80026c0 <HAL_RCC_OscConfig+0x5e8>)
 800251c:	4313      	orrs	r3, r2
 800251e:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002520:	e0fd      	b.n	800271e <HAL_RCC_OscConfig+0x646>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002522:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002526:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	691b      	ldr	r3, [r3, #16]
 800252e:	2b00      	cmp	r3, #0
 8002530:	f000 8088 	beq.w	8002644 <HAL_RCC_OscConfig+0x56c>
 8002534:	2301      	movs	r3, #1
 8002536:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800253a:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 800253e:	fa93 f3a3 	rbit	r3, r3
 8002542:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 8002546:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800254a:	fab3 f383 	clz	r3, r3
 800254e:	b2db      	uxtb	r3, r3
 8002550:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002554:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002558:	009b      	lsls	r3, r3, #2
 800255a:	461a      	mov	r2, r3
 800255c:	2301      	movs	r3, #1
 800255e:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002560:	f7fe fbe0 	bl	8000d24 <HAL_GetTick>
 8002564:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002568:	e00a      	b.n	8002580 <HAL_RCC_OscConfig+0x4a8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800256a:	f7fe fbdb 	bl	8000d24 <HAL_GetTick>
 800256e:	4602      	mov	r2, r0
 8002570:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002574:	1ad3      	subs	r3, r2, r3
 8002576:	2b02      	cmp	r3, #2
 8002578:	d902      	bls.n	8002580 <HAL_RCC_OscConfig+0x4a8>
          {
            return HAL_TIMEOUT;
 800257a:	2303      	movs	r3, #3
 800257c:	f000 bde2 	b.w	8003144 <HAL_RCC_OscConfig+0x106c>
 8002580:	2302      	movs	r3, #2
 8002582:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002586:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 800258a:	fa93 f3a3 	rbit	r3, r3
 800258e:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 8002592:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002596:	fab3 f383 	clz	r3, r3
 800259a:	b2db      	uxtb	r3, r3
 800259c:	095b      	lsrs	r3, r3, #5
 800259e:	b2db      	uxtb	r3, r3
 80025a0:	f043 0301 	orr.w	r3, r3, #1
 80025a4:	b2db      	uxtb	r3, r3
 80025a6:	2b01      	cmp	r3, #1
 80025a8:	d102      	bne.n	80025b0 <HAL_RCC_OscConfig+0x4d8>
 80025aa:	4b45      	ldr	r3, [pc, #276]	; (80026c0 <HAL_RCC_OscConfig+0x5e8>)
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	e013      	b.n	80025d8 <HAL_RCC_OscConfig+0x500>
 80025b0:	2302      	movs	r3, #2
 80025b2:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025b6:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 80025ba:	fa93 f3a3 	rbit	r3, r3
 80025be:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 80025c2:	2302      	movs	r3, #2
 80025c4:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 80025c8:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 80025cc:	fa93 f3a3 	rbit	r3, r3
 80025d0:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 80025d4:	4b3a      	ldr	r3, [pc, #232]	; (80026c0 <HAL_RCC_OscConfig+0x5e8>)
 80025d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025d8:	2202      	movs	r2, #2
 80025da:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 80025de:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 80025e2:	fa92 f2a2 	rbit	r2, r2
 80025e6:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 80025ea:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 80025ee:	fab2 f282 	clz	r2, r2
 80025f2:	b2d2      	uxtb	r2, r2
 80025f4:	f042 0220 	orr.w	r2, r2, #32
 80025f8:	b2d2      	uxtb	r2, r2
 80025fa:	f002 021f 	and.w	r2, r2, #31
 80025fe:	2101      	movs	r1, #1
 8002600:	fa01 f202 	lsl.w	r2, r1, r2
 8002604:	4013      	ands	r3, r2
 8002606:	2b00      	cmp	r3, #0
 8002608:	d0af      	beq.n	800256a <HAL_RCC_OscConfig+0x492>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800260a:	4b2d      	ldr	r3, [pc, #180]	; (80026c0 <HAL_RCC_OscConfig+0x5e8>)
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002612:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002616:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	695b      	ldr	r3, [r3, #20]
 800261e:	21f8      	movs	r1, #248	; 0xf8
 8002620:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002624:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8002628:	fa91 f1a1 	rbit	r1, r1
 800262c:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 8002630:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 8002634:	fab1 f181 	clz	r1, r1
 8002638:	b2c9      	uxtb	r1, r1
 800263a:	408b      	lsls	r3, r1
 800263c:	4920      	ldr	r1, [pc, #128]	; (80026c0 <HAL_RCC_OscConfig+0x5e8>)
 800263e:	4313      	orrs	r3, r2
 8002640:	600b      	str	r3, [r1, #0]
 8002642:	e06c      	b.n	800271e <HAL_RCC_OscConfig+0x646>
 8002644:	2301      	movs	r3, #1
 8002646:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800264a:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 800264e:	fa93 f3a3 	rbit	r3, r3
 8002652:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 8002656:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800265a:	fab3 f383 	clz	r3, r3
 800265e:	b2db      	uxtb	r3, r3
 8002660:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002664:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002668:	009b      	lsls	r3, r3, #2
 800266a:	461a      	mov	r2, r3
 800266c:	2300      	movs	r3, #0
 800266e:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002670:	f7fe fb58 	bl	8000d24 <HAL_GetTick>
 8002674:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002678:	e00a      	b.n	8002690 <HAL_RCC_OscConfig+0x5b8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800267a:	f7fe fb53 	bl	8000d24 <HAL_GetTick>
 800267e:	4602      	mov	r2, r0
 8002680:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002684:	1ad3      	subs	r3, r2, r3
 8002686:	2b02      	cmp	r3, #2
 8002688:	d902      	bls.n	8002690 <HAL_RCC_OscConfig+0x5b8>
          {
            return HAL_TIMEOUT;
 800268a:	2303      	movs	r3, #3
 800268c:	f000 bd5a 	b.w	8003144 <HAL_RCC_OscConfig+0x106c>
 8002690:	2302      	movs	r3, #2
 8002692:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002696:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800269a:	fa93 f3a3 	rbit	r3, r3
 800269e:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 80026a2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80026a6:	fab3 f383 	clz	r3, r3
 80026aa:	b2db      	uxtb	r3, r3
 80026ac:	095b      	lsrs	r3, r3, #5
 80026ae:	b2db      	uxtb	r3, r3
 80026b0:	f043 0301 	orr.w	r3, r3, #1
 80026b4:	b2db      	uxtb	r3, r3
 80026b6:	2b01      	cmp	r3, #1
 80026b8:	d104      	bne.n	80026c4 <HAL_RCC_OscConfig+0x5ec>
 80026ba:	4b01      	ldr	r3, [pc, #4]	; (80026c0 <HAL_RCC_OscConfig+0x5e8>)
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	e015      	b.n	80026ec <HAL_RCC_OscConfig+0x614>
 80026c0:	40021000 	.word	0x40021000
 80026c4:	2302      	movs	r3, #2
 80026c6:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026ca:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80026ce:	fa93 f3a3 	rbit	r3, r3
 80026d2:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 80026d6:	2302      	movs	r3, #2
 80026d8:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 80026dc:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80026e0:	fa93 f3a3 	rbit	r3, r3
 80026e4:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 80026e8:	4bc8      	ldr	r3, [pc, #800]	; (8002a0c <HAL_RCC_OscConfig+0x934>)
 80026ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026ec:	2202      	movs	r2, #2
 80026ee:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 80026f2:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 80026f6:	fa92 f2a2 	rbit	r2, r2
 80026fa:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 80026fe:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 8002702:	fab2 f282 	clz	r2, r2
 8002706:	b2d2      	uxtb	r2, r2
 8002708:	f042 0220 	orr.w	r2, r2, #32
 800270c:	b2d2      	uxtb	r2, r2
 800270e:	f002 021f 	and.w	r2, r2, #31
 8002712:	2101      	movs	r1, #1
 8002714:	fa01 f202 	lsl.w	r2, r1, r2
 8002718:	4013      	ands	r3, r2
 800271a:	2b00      	cmp	r3, #0
 800271c:	d1ad      	bne.n	800267a <HAL_RCC_OscConfig+0x5a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800271e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002722:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	f003 0308 	and.w	r3, r3, #8
 800272e:	2b00      	cmp	r3, #0
 8002730:	f000 8110 	beq.w	8002954 <HAL_RCC_OscConfig+0x87c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002734:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002738:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	699b      	ldr	r3, [r3, #24]
 8002740:	2b00      	cmp	r3, #0
 8002742:	d079      	beq.n	8002838 <HAL_RCC_OscConfig+0x760>
 8002744:	2301      	movs	r3, #1
 8002746:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800274a:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 800274e:	fa93 f3a3 	rbit	r3, r3
 8002752:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 8002756:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800275a:	fab3 f383 	clz	r3, r3
 800275e:	b2db      	uxtb	r3, r3
 8002760:	461a      	mov	r2, r3
 8002762:	4bab      	ldr	r3, [pc, #684]	; (8002a10 <HAL_RCC_OscConfig+0x938>)
 8002764:	4413      	add	r3, r2
 8002766:	009b      	lsls	r3, r3, #2
 8002768:	461a      	mov	r2, r3
 800276a:	2301      	movs	r3, #1
 800276c:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800276e:	f7fe fad9 	bl	8000d24 <HAL_GetTick>
 8002772:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002776:	e00a      	b.n	800278e <HAL_RCC_OscConfig+0x6b6>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002778:	f7fe fad4 	bl	8000d24 <HAL_GetTick>
 800277c:	4602      	mov	r2, r0
 800277e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002782:	1ad3      	subs	r3, r2, r3
 8002784:	2b02      	cmp	r3, #2
 8002786:	d902      	bls.n	800278e <HAL_RCC_OscConfig+0x6b6>
        {
          return HAL_TIMEOUT;
 8002788:	2303      	movs	r3, #3
 800278a:	f000 bcdb 	b.w	8003144 <HAL_RCC_OscConfig+0x106c>
 800278e:	2302      	movs	r3, #2
 8002790:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002794:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8002798:	fa93 f3a3 	rbit	r3, r3
 800279c:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80027a0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80027a4:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 80027a8:	2202      	movs	r2, #2
 80027aa:	601a      	str	r2, [r3, #0]
 80027ac:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80027b0:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	fa93 f2a3 	rbit	r2, r3
 80027ba:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80027be:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80027c2:	601a      	str	r2, [r3, #0]
 80027c4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80027c8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80027cc:	2202      	movs	r2, #2
 80027ce:	601a      	str	r2, [r3, #0]
 80027d0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80027d4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	fa93 f2a3 	rbit	r2, r3
 80027de:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80027e2:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80027e6:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80027e8:	4b88      	ldr	r3, [pc, #544]	; (8002a0c <HAL_RCC_OscConfig+0x934>)
 80027ea:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80027ec:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80027f0:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 80027f4:	2102      	movs	r1, #2
 80027f6:	6019      	str	r1, [r3, #0]
 80027f8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80027fc:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	fa93 f1a3 	rbit	r1, r3
 8002806:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800280a:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 800280e:	6019      	str	r1, [r3, #0]
  return result;
 8002810:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002814:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	fab3 f383 	clz	r3, r3
 800281e:	b2db      	uxtb	r3, r3
 8002820:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8002824:	b2db      	uxtb	r3, r3
 8002826:	f003 031f 	and.w	r3, r3, #31
 800282a:	2101      	movs	r1, #1
 800282c:	fa01 f303 	lsl.w	r3, r1, r3
 8002830:	4013      	ands	r3, r2
 8002832:	2b00      	cmp	r3, #0
 8002834:	d0a0      	beq.n	8002778 <HAL_RCC_OscConfig+0x6a0>
 8002836:	e08d      	b.n	8002954 <HAL_RCC_OscConfig+0x87c>
 8002838:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800283c:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8002840:	2201      	movs	r2, #1
 8002842:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002844:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002848:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	fa93 f2a3 	rbit	r2, r3
 8002852:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002856:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 800285a:	601a      	str	r2, [r3, #0]
  return result;
 800285c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002860:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8002864:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002866:	fab3 f383 	clz	r3, r3
 800286a:	b2db      	uxtb	r3, r3
 800286c:	461a      	mov	r2, r3
 800286e:	4b68      	ldr	r3, [pc, #416]	; (8002a10 <HAL_RCC_OscConfig+0x938>)
 8002870:	4413      	add	r3, r2
 8002872:	009b      	lsls	r3, r3, #2
 8002874:	461a      	mov	r2, r3
 8002876:	2300      	movs	r3, #0
 8002878:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800287a:	f7fe fa53 	bl	8000d24 <HAL_GetTick>
 800287e:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002882:	e00a      	b.n	800289a <HAL_RCC_OscConfig+0x7c2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002884:	f7fe fa4e 	bl	8000d24 <HAL_GetTick>
 8002888:	4602      	mov	r2, r0
 800288a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800288e:	1ad3      	subs	r3, r2, r3
 8002890:	2b02      	cmp	r3, #2
 8002892:	d902      	bls.n	800289a <HAL_RCC_OscConfig+0x7c2>
        {
          return HAL_TIMEOUT;
 8002894:	2303      	movs	r3, #3
 8002896:	f000 bc55 	b.w	8003144 <HAL_RCC_OscConfig+0x106c>
 800289a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800289e:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 80028a2:	2202      	movs	r2, #2
 80028a4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028a6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80028aa:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	fa93 f2a3 	rbit	r2, r3
 80028b4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80028b8:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 80028bc:	601a      	str	r2, [r3, #0]
 80028be:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80028c2:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 80028c6:	2202      	movs	r2, #2
 80028c8:	601a      	str	r2, [r3, #0]
 80028ca:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80028ce:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	fa93 f2a3 	rbit	r2, r3
 80028d8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80028dc:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80028e0:	601a      	str	r2, [r3, #0]
 80028e2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80028e6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80028ea:	2202      	movs	r2, #2
 80028ec:	601a      	str	r2, [r3, #0]
 80028ee:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80028f2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	fa93 f2a3 	rbit	r2, r3
 80028fc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002900:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8002904:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002906:	4b41      	ldr	r3, [pc, #260]	; (8002a0c <HAL_RCC_OscConfig+0x934>)
 8002908:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800290a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800290e:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8002912:	2102      	movs	r1, #2
 8002914:	6019      	str	r1, [r3, #0]
 8002916:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800291a:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	fa93 f1a3 	rbit	r1, r3
 8002924:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002928:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 800292c:	6019      	str	r1, [r3, #0]
  return result;
 800292e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002932:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	fab3 f383 	clz	r3, r3
 800293c:	b2db      	uxtb	r3, r3
 800293e:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8002942:	b2db      	uxtb	r3, r3
 8002944:	f003 031f 	and.w	r3, r3, #31
 8002948:	2101      	movs	r1, #1
 800294a:	fa01 f303 	lsl.w	r3, r1, r3
 800294e:	4013      	ands	r3, r2
 8002950:	2b00      	cmp	r3, #0
 8002952:	d197      	bne.n	8002884 <HAL_RCC_OscConfig+0x7ac>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002954:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002958:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	f003 0304 	and.w	r3, r3, #4
 8002964:	2b00      	cmp	r3, #0
 8002966:	f000 81a1 	beq.w	8002cac <HAL_RCC_OscConfig+0xbd4>
  {
    FlagStatus       pwrclkchanged = RESET;
 800296a:	2300      	movs	r3, #0
 800296c:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002970:	4b26      	ldr	r3, [pc, #152]	; (8002a0c <HAL_RCC_OscConfig+0x934>)
 8002972:	69db      	ldr	r3, [r3, #28]
 8002974:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002978:	2b00      	cmp	r3, #0
 800297a:	d116      	bne.n	80029aa <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800297c:	4b23      	ldr	r3, [pc, #140]	; (8002a0c <HAL_RCC_OscConfig+0x934>)
 800297e:	69db      	ldr	r3, [r3, #28]
 8002980:	4a22      	ldr	r2, [pc, #136]	; (8002a0c <HAL_RCC_OscConfig+0x934>)
 8002982:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002986:	61d3      	str	r3, [r2, #28]
 8002988:	4b20      	ldr	r3, [pc, #128]	; (8002a0c <HAL_RCC_OscConfig+0x934>)
 800298a:	69db      	ldr	r3, [r3, #28]
 800298c:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 8002990:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002994:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 8002998:	601a      	str	r2, [r3, #0]
 800299a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800299e:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 80029a2:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 80029a4:	2301      	movs	r3, #1
 80029a6:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80029aa:	4b1a      	ldr	r3, [pc, #104]	; (8002a14 <HAL_RCC_OscConfig+0x93c>)
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80029b2:	2b00      	cmp	r3, #0
 80029b4:	d11a      	bne.n	80029ec <HAL_RCC_OscConfig+0x914>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80029b6:	4b17      	ldr	r3, [pc, #92]	; (8002a14 <HAL_RCC_OscConfig+0x93c>)
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	4a16      	ldr	r2, [pc, #88]	; (8002a14 <HAL_RCC_OscConfig+0x93c>)
 80029bc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80029c0:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80029c2:	f7fe f9af 	bl	8000d24 <HAL_GetTick>
 80029c6:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80029ca:	e009      	b.n	80029e0 <HAL_RCC_OscConfig+0x908>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80029cc:	f7fe f9aa 	bl	8000d24 <HAL_GetTick>
 80029d0:	4602      	mov	r2, r0
 80029d2:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80029d6:	1ad3      	subs	r3, r2, r3
 80029d8:	2b64      	cmp	r3, #100	; 0x64
 80029da:	d901      	bls.n	80029e0 <HAL_RCC_OscConfig+0x908>
        {
          return HAL_TIMEOUT;
 80029dc:	2303      	movs	r3, #3
 80029de:	e3b1      	b.n	8003144 <HAL_RCC_OscConfig+0x106c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80029e0:	4b0c      	ldr	r3, [pc, #48]	; (8002a14 <HAL_RCC_OscConfig+0x93c>)
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80029e8:	2b00      	cmp	r3, #0
 80029ea:	d0ef      	beq.n	80029cc <HAL_RCC_OscConfig+0x8f4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80029ec:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80029f0:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	68db      	ldr	r3, [r3, #12]
 80029f8:	2b01      	cmp	r3, #1
 80029fa:	d10d      	bne.n	8002a18 <HAL_RCC_OscConfig+0x940>
 80029fc:	4b03      	ldr	r3, [pc, #12]	; (8002a0c <HAL_RCC_OscConfig+0x934>)
 80029fe:	6a1b      	ldr	r3, [r3, #32]
 8002a00:	4a02      	ldr	r2, [pc, #8]	; (8002a0c <HAL_RCC_OscConfig+0x934>)
 8002a02:	f043 0301 	orr.w	r3, r3, #1
 8002a06:	6213      	str	r3, [r2, #32]
 8002a08:	e03c      	b.n	8002a84 <HAL_RCC_OscConfig+0x9ac>
 8002a0a:	bf00      	nop
 8002a0c:	40021000 	.word	0x40021000
 8002a10:	10908120 	.word	0x10908120
 8002a14:	40007000 	.word	0x40007000
 8002a18:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002a1c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	68db      	ldr	r3, [r3, #12]
 8002a24:	2b00      	cmp	r3, #0
 8002a26:	d10c      	bne.n	8002a42 <HAL_RCC_OscConfig+0x96a>
 8002a28:	4bc1      	ldr	r3, [pc, #772]	; (8002d30 <HAL_RCC_OscConfig+0xc58>)
 8002a2a:	6a1b      	ldr	r3, [r3, #32]
 8002a2c:	4ac0      	ldr	r2, [pc, #768]	; (8002d30 <HAL_RCC_OscConfig+0xc58>)
 8002a2e:	f023 0301 	bic.w	r3, r3, #1
 8002a32:	6213      	str	r3, [r2, #32]
 8002a34:	4bbe      	ldr	r3, [pc, #760]	; (8002d30 <HAL_RCC_OscConfig+0xc58>)
 8002a36:	6a1b      	ldr	r3, [r3, #32]
 8002a38:	4abd      	ldr	r2, [pc, #756]	; (8002d30 <HAL_RCC_OscConfig+0xc58>)
 8002a3a:	f023 0304 	bic.w	r3, r3, #4
 8002a3e:	6213      	str	r3, [r2, #32]
 8002a40:	e020      	b.n	8002a84 <HAL_RCC_OscConfig+0x9ac>
 8002a42:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002a46:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	68db      	ldr	r3, [r3, #12]
 8002a4e:	2b05      	cmp	r3, #5
 8002a50:	d10c      	bne.n	8002a6c <HAL_RCC_OscConfig+0x994>
 8002a52:	4bb7      	ldr	r3, [pc, #732]	; (8002d30 <HAL_RCC_OscConfig+0xc58>)
 8002a54:	6a1b      	ldr	r3, [r3, #32]
 8002a56:	4ab6      	ldr	r2, [pc, #728]	; (8002d30 <HAL_RCC_OscConfig+0xc58>)
 8002a58:	f043 0304 	orr.w	r3, r3, #4
 8002a5c:	6213      	str	r3, [r2, #32]
 8002a5e:	4bb4      	ldr	r3, [pc, #720]	; (8002d30 <HAL_RCC_OscConfig+0xc58>)
 8002a60:	6a1b      	ldr	r3, [r3, #32]
 8002a62:	4ab3      	ldr	r2, [pc, #716]	; (8002d30 <HAL_RCC_OscConfig+0xc58>)
 8002a64:	f043 0301 	orr.w	r3, r3, #1
 8002a68:	6213      	str	r3, [r2, #32]
 8002a6a:	e00b      	b.n	8002a84 <HAL_RCC_OscConfig+0x9ac>
 8002a6c:	4bb0      	ldr	r3, [pc, #704]	; (8002d30 <HAL_RCC_OscConfig+0xc58>)
 8002a6e:	6a1b      	ldr	r3, [r3, #32]
 8002a70:	4aaf      	ldr	r2, [pc, #700]	; (8002d30 <HAL_RCC_OscConfig+0xc58>)
 8002a72:	f023 0301 	bic.w	r3, r3, #1
 8002a76:	6213      	str	r3, [r2, #32]
 8002a78:	4bad      	ldr	r3, [pc, #692]	; (8002d30 <HAL_RCC_OscConfig+0xc58>)
 8002a7a:	6a1b      	ldr	r3, [r3, #32]
 8002a7c:	4aac      	ldr	r2, [pc, #688]	; (8002d30 <HAL_RCC_OscConfig+0xc58>)
 8002a7e:	f023 0304 	bic.w	r3, r3, #4
 8002a82:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002a84:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002a88:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	68db      	ldr	r3, [r3, #12]
 8002a90:	2b00      	cmp	r3, #0
 8002a92:	f000 8081 	beq.w	8002b98 <HAL_RCC_OscConfig+0xac0>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002a96:	f7fe f945 	bl	8000d24 <HAL_GetTick>
 8002a9a:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002a9e:	e00b      	b.n	8002ab8 <HAL_RCC_OscConfig+0x9e0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002aa0:	f7fe f940 	bl	8000d24 <HAL_GetTick>
 8002aa4:	4602      	mov	r2, r0
 8002aa6:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002aaa:	1ad3      	subs	r3, r2, r3
 8002aac:	f241 3288 	movw	r2, #5000	; 0x1388
 8002ab0:	4293      	cmp	r3, r2
 8002ab2:	d901      	bls.n	8002ab8 <HAL_RCC_OscConfig+0x9e0>
        {
          return HAL_TIMEOUT;
 8002ab4:	2303      	movs	r3, #3
 8002ab6:	e345      	b.n	8003144 <HAL_RCC_OscConfig+0x106c>
 8002ab8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002abc:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8002ac0:	2202      	movs	r2, #2
 8002ac2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ac4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002ac8:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	fa93 f2a3 	rbit	r2, r3
 8002ad2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002ad6:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8002ada:	601a      	str	r2, [r3, #0]
 8002adc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002ae0:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8002ae4:	2202      	movs	r2, #2
 8002ae6:	601a      	str	r2, [r3, #0]
 8002ae8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002aec:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	fa93 f2a3 	rbit	r2, r3
 8002af6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002afa:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8002afe:	601a      	str	r2, [r3, #0]
  return result;
 8002b00:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002b04:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8002b08:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002b0a:	fab3 f383 	clz	r3, r3
 8002b0e:	b2db      	uxtb	r3, r3
 8002b10:	095b      	lsrs	r3, r3, #5
 8002b12:	b2db      	uxtb	r3, r3
 8002b14:	f043 0302 	orr.w	r3, r3, #2
 8002b18:	b2db      	uxtb	r3, r3
 8002b1a:	2b02      	cmp	r3, #2
 8002b1c:	d102      	bne.n	8002b24 <HAL_RCC_OscConfig+0xa4c>
 8002b1e:	4b84      	ldr	r3, [pc, #528]	; (8002d30 <HAL_RCC_OscConfig+0xc58>)
 8002b20:	6a1b      	ldr	r3, [r3, #32]
 8002b22:	e013      	b.n	8002b4c <HAL_RCC_OscConfig+0xa74>
 8002b24:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002b28:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8002b2c:	2202      	movs	r2, #2
 8002b2e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b30:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002b34:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	fa93 f2a3 	rbit	r2, r3
 8002b3e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002b42:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 8002b46:	601a      	str	r2, [r3, #0]
 8002b48:	4b79      	ldr	r3, [pc, #484]	; (8002d30 <HAL_RCC_OscConfig+0xc58>)
 8002b4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b4c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002b50:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 8002b54:	2102      	movs	r1, #2
 8002b56:	6011      	str	r1, [r2, #0]
 8002b58:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002b5c:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 8002b60:	6812      	ldr	r2, [r2, #0]
 8002b62:	fa92 f1a2 	rbit	r1, r2
 8002b66:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002b6a:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8002b6e:	6011      	str	r1, [r2, #0]
  return result;
 8002b70:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002b74:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8002b78:	6812      	ldr	r2, [r2, #0]
 8002b7a:	fab2 f282 	clz	r2, r2
 8002b7e:	b2d2      	uxtb	r2, r2
 8002b80:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002b84:	b2d2      	uxtb	r2, r2
 8002b86:	f002 021f 	and.w	r2, r2, #31
 8002b8a:	2101      	movs	r1, #1
 8002b8c:	fa01 f202 	lsl.w	r2, r1, r2
 8002b90:	4013      	ands	r3, r2
 8002b92:	2b00      	cmp	r3, #0
 8002b94:	d084      	beq.n	8002aa0 <HAL_RCC_OscConfig+0x9c8>
 8002b96:	e07f      	b.n	8002c98 <HAL_RCC_OscConfig+0xbc0>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002b98:	f7fe f8c4 	bl	8000d24 <HAL_GetTick>
 8002b9c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002ba0:	e00b      	b.n	8002bba <HAL_RCC_OscConfig+0xae2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002ba2:	f7fe f8bf 	bl	8000d24 <HAL_GetTick>
 8002ba6:	4602      	mov	r2, r0
 8002ba8:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002bac:	1ad3      	subs	r3, r2, r3
 8002bae:	f241 3288 	movw	r2, #5000	; 0x1388
 8002bb2:	4293      	cmp	r3, r2
 8002bb4:	d901      	bls.n	8002bba <HAL_RCC_OscConfig+0xae2>
        {
          return HAL_TIMEOUT;
 8002bb6:	2303      	movs	r3, #3
 8002bb8:	e2c4      	b.n	8003144 <HAL_RCC_OscConfig+0x106c>
 8002bba:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002bbe:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 8002bc2:	2202      	movs	r2, #2
 8002bc4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002bc6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002bca:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	fa93 f2a3 	rbit	r2, r3
 8002bd4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002bd8:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 8002bdc:	601a      	str	r2, [r3, #0]
 8002bde:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002be2:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8002be6:	2202      	movs	r2, #2
 8002be8:	601a      	str	r2, [r3, #0]
 8002bea:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002bee:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	fa93 f2a3 	rbit	r2, r3
 8002bf8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002bfc:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8002c00:	601a      	str	r2, [r3, #0]
  return result;
 8002c02:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002c06:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8002c0a:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002c0c:	fab3 f383 	clz	r3, r3
 8002c10:	b2db      	uxtb	r3, r3
 8002c12:	095b      	lsrs	r3, r3, #5
 8002c14:	b2db      	uxtb	r3, r3
 8002c16:	f043 0302 	orr.w	r3, r3, #2
 8002c1a:	b2db      	uxtb	r3, r3
 8002c1c:	2b02      	cmp	r3, #2
 8002c1e:	d102      	bne.n	8002c26 <HAL_RCC_OscConfig+0xb4e>
 8002c20:	4b43      	ldr	r3, [pc, #268]	; (8002d30 <HAL_RCC_OscConfig+0xc58>)
 8002c22:	6a1b      	ldr	r3, [r3, #32]
 8002c24:	e013      	b.n	8002c4e <HAL_RCC_OscConfig+0xb76>
 8002c26:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002c2a:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8002c2e:	2202      	movs	r2, #2
 8002c30:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c32:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002c36:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	fa93 f2a3 	rbit	r2, r3
 8002c40:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002c44:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 8002c48:	601a      	str	r2, [r3, #0]
 8002c4a:	4b39      	ldr	r3, [pc, #228]	; (8002d30 <HAL_RCC_OscConfig+0xc58>)
 8002c4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c4e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002c52:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 8002c56:	2102      	movs	r1, #2
 8002c58:	6011      	str	r1, [r2, #0]
 8002c5a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002c5e:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 8002c62:	6812      	ldr	r2, [r2, #0]
 8002c64:	fa92 f1a2 	rbit	r1, r2
 8002c68:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002c6c:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8002c70:	6011      	str	r1, [r2, #0]
  return result;
 8002c72:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002c76:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8002c7a:	6812      	ldr	r2, [r2, #0]
 8002c7c:	fab2 f282 	clz	r2, r2
 8002c80:	b2d2      	uxtb	r2, r2
 8002c82:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002c86:	b2d2      	uxtb	r2, r2
 8002c88:	f002 021f 	and.w	r2, r2, #31
 8002c8c:	2101      	movs	r1, #1
 8002c8e:	fa01 f202 	lsl.w	r2, r1, r2
 8002c92:	4013      	ands	r3, r2
 8002c94:	2b00      	cmp	r3, #0
 8002c96:	d184      	bne.n	8002ba2 <HAL_RCC_OscConfig+0xaca>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002c98:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 8002c9c:	2b01      	cmp	r3, #1
 8002c9e:	d105      	bne.n	8002cac <HAL_RCC_OscConfig+0xbd4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002ca0:	4b23      	ldr	r3, [pc, #140]	; (8002d30 <HAL_RCC_OscConfig+0xc58>)
 8002ca2:	69db      	ldr	r3, [r3, #28]
 8002ca4:	4a22      	ldr	r2, [pc, #136]	; (8002d30 <HAL_RCC_OscConfig+0xc58>)
 8002ca6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002caa:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002cac:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002cb0:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	69db      	ldr	r3, [r3, #28]
 8002cb8:	2b00      	cmp	r3, #0
 8002cba:	f000 8242 	beq.w	8003142 <HAL_RCC_OscConfig+0x106a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002cbe:	4b1c      	ldr	r3, [pc, #112]	; (8002d30 <HAL_RCC_OscConfig+0xc58>)
 8002cc0:	685b      	ldr	r3, [r3, #4]
 8002cc2:	f003 030c 	and.w	r3, r3, #12
 8002cc6:	2b08      	cmp	r3, #8
 8002cc8:	f000 8213 	beq.w	80030f2 <HAL_RCC_OscConfig+0x101a>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002ccc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002cd0:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	69db      	ldr	r3, [r3, #28]
 8002cd8:	2b02      	cmp	r3, #2
 8002cda:	f040 8162 	bne.w	8002fa2 <HAL_RCC_OscConfig+0xeca>
 8002cde:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002ce2:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 8002ce6:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002cea:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002cec:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002cf0:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	fa93 f2a3 	rbit	r2, r3
 8002cfa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002cfe:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8002d02:	601a      	str	r2, [r3, #0]
  return result;
 8002d04:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002d08:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8002d0c:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002d0e:	fab3 f383 	clz	r3, r3
 8002d12:	b2db      	uxtb	r3, r3
 8002d14:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002d18:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002d1c:	009b      	lsls	r3, r3, #2
 8002d1e:	461a      	mov	r2, r3
 8002d20:	2300      	movs	r3, #0
 8002d22:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d24:	f7fd fffe 	bl	8000d24 <HAL_GetTick>
 8002d28:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002d2c:	e00c      	b.n	8002d48 <HAL_RCC_OscConfig+0xc70>
 8002d2e:	bf00      	nop
 8002d30:	40021000 	.word	0x40021000
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002d34:	f7fd fff6 	bl	8000d24 <HAL_GetTick>
 8002d38:	4602      	mov	r2, r0
 8002d3a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002d3e:	1ad3      	subs	r3, r2, r3
 8002d40:	2b02      	cmp	r3, #2
 8002d42:	d901      	bls.n	8002d48 <HAL_RCC_OscConfig+0xc70>
          {
            return HAL_TIMEOUT;
 8002d44:	2303      	movs	r3, #3
 8002d46:	e1fd      	b.n	8003144 <HAL_RCC_OscConfig+0x106c>
 8002d48:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002d4c:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8002d50:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002d54:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d56:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002d5a:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	fa93 f2a3 	rbit	r2, r3
 8002d64:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002d68:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8002d6c:	601a      	str	r2, [r3, #0]
  return result;
 8002d6e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002d72:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8002d76:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002d78:	fab3 f383 	clz	r3, r3
 8002d7c:	b2db      	uxtb	r3, r3
 8002d7e:	095b      	lsrs	r3, r3, #5
 8002d80:	b2db      	uxtb	r3, r3
 8002d82:	f043 0301 	orr.w	r3, r3, #1
 8002d86:	b2db      	uxtb	r3, r3
 8002d88:	2b01      	cmp	r3, #1
 8002d8a:	d102      	bne.n	8002d92 <HAL_RCC_OscConfig+0xcba>
 8002d8c:	4bb0      	ldr	r3, [pc, #704]	; (8003050 <HAL_RCC_OscConfig+0xf78>)
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	e027      	b.n	8002de2 <HAL_RCC_OscConfig+0xd0a>
 8002d92:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002d96:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8002d9a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002d9e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002da0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002da4:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	fa93 f2a3 	rbit	r2, r3
 8002dae:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002db2:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 8002db6:	601a      	str	r2, [r3, #0]
 8002db8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002dbc:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8002dc0:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002dc4:	601a      	str	r2, [r3, #0]
 8002dc6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002dca:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	fa93 f2a3 	rbit	r2, r3
 8002dd4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002dd8:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8002ddc:	601a      	str	r2, [r3, #0]
 8002dde:	4b9c      	ldr	r3, [pc, #624]	; (8003050 <HAL_RCC_OscConfig+0xf78>)
 8002de0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002de2:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002de6:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 8002dea:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8002dee:	6011      	str	r1, [r2, #0]
 8002df0:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002df4:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 8002df8:	6812      	ldr	r2, [r2, #0]
 8002dfa:	fa92 f1a2 	rbit	r1, r2
 8002dfe:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002e02:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8002e06:	6011      	str	r1, [r2, #0]
  return result;
 8002e08:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002e0c:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8002e10:	6812      	ldr	r2, [r2, #0]
 8002e12:	fab2 f282 	clz	r2, r2
 8002e16:	b2d2      	uxtb	r2, r2
 8002e18:	f042 0220 	orr.w	r2, r2, #32
 8002e1c:	b2d2      	uxtb	r2, r2
 8002e1e:	f002 021f 	and.w	r2, r2, #31
 8002e22:	2101      	movs	r1, #1
 8002e24:	fa01 f202 	lsl.w	r2, r1, r2
 8002e28:	4013      	ands	r3, r2
 8002e2a:	2b00      	cmp	r3, #0
 8002e2c:	d182      	bne.n	8002d34 <HAL_RCC_OscConfig+0xc5c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002e2e:	4b88      	ldr	r3, [pc, #544]	; (8003050 <HAL_RCC_OscConfig+0xf78>)
 8002e30:	685b      	ldr	r3, [r3, #4]
 8002e32:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002e36:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002e3a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8002e42:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002e46:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	6a1b      	ldr	r3, [r3, #32]
 8002e4e:	430b      	orrs	r3, r1
 8002e50:	497f      	ldr	r1, [pc, #508]	; (8003050 <HAL_RCC_OscConfig+0xf78>)
 8002e52:	4313      	orrs	r3, r2
 8002e54:	604b      	str	r3, [r1, #4]
 8002e56:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002e5a:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 8002e5e:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002e62:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e64:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002e68:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	fa93 f2a3 	rbit	r2, r3
 8002e72:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002e76:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8002e7a:	601a      	str	r2, [r3, #0]
  return result;
 8002e7c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002e80:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8002e84:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002e86:	fab3 f383 	clz	r3, r3
 8002e8a:	b2db      	uxtb	r3, r3
 8002e8c:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002e90:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002e94:	009b      	lsls	r3, r3, #2
 8002e96:	461a      	mov	r2, r3
 8002e98:	2301      	movs	r3, #1
 8002e9a:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e9c:	f7fd ff42 	bl	8000d24 <HAL_GetTick>
 8002ea0:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002ea4:	e009      	b.n	8002eba <HAL_RCC_OscConfig+0xde2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002ea6:	f7fd ff3d 	bl	8000d24 <HAL_GetTick>
 8002eaa:	4602      	mov	r2, r0
 8002eac:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002eb0:	1ad3      	subs	r3, r2, r3
 8002eb2:	2b02      	cmp	r3, #2
 8002eb4:	d901      	bls.n	8002eba <HAL_RCC_OscConfig+0xde2>
          {
            return HAL_TIMEOUT;
 8002eb6:	2303      	movs	r3, #3
 8002eb8:	e144      	b.n	8003144 <HAL_RCC_OscConfig+0x106c>
 8002eba:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002ebe:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8002ec2:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002ec6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ec8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002ecc:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	fa93 f2a3 	rbit	r2, r3
 8002ed6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002eda:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8002ede:	601a      	str	r2, [r3, #0]
  return result;
 8002ee0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002ee4:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8002ee8:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002eea:	fab3 f383 	clz	r3, r3
 8002eee:	b2db      	uxtb	r3, r3
 8002ef0:	095b      	lsrs	r3, r3, #5
 8002ef2:	b2db      	uxtb	r3, r3
 8002ef4:	f043 0301 	orr.w	r3, r3, #1
 8002ef8:	b2db      	uxtb	r3, r3
 8002efa:	2b01      	cmp	r3, #1
 8002efc:	d102      	bne.n	8002f04 <HAL_RCC_OscConfig+0xe2c>
 8002efe:	4b54      	ldr	r3, [pc, #336]	; (8003050 <HAL_RCC_OscConfig+0xf78>)
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	e027      	b.n	8002f54 <HAL_RCC_OscConfig+0xe7c>
 8002f04:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002f08:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8002f0c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002f10:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f12:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002f16:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	fa93 f2a3 	rbit	r2, r3
 8002f20:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002f24:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8002f28:	601a      	str	r2, [r3, #0]
 8002f2a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002f2e:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8002f32:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002f36:	601a      	str	r2, [r3, #0]
 8002f38:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002f3c:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	fa93 f2a3 	rbit	r2, r3
 8002f46:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002f4a:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 8002f4e:	601a      	str	r2, [r3, #0]
 8002f50:	4b3f      	ldr	r3, [pc, #252]	; (8003050 <HAL_RCC_OscConfig+0xf78>)
 8002f52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f54:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002f58:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 8002f5c:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8002f60:	6011      	str	r1, [r2, #0]
 8002f62:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002f66:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 8002f6a:	6812      	ldr	r2, [r2, #0]
 8002f6c:	fa92 f1a2 	rbit	r1, r2
 8002f70:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002f74:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8002f78:	6011      	str	r1, [r2, #0]
  return result;
 8002f7a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002f7e:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8002f82:	6812      	ldr	r2, [r2, #0]
 8002f84:	fab2 f282 	clz	r2, r2
 8002f88:	b2d2      	uxtb	r2, r2
 8002f8a:	f042 0220 	orr.w	r2, r2, #32
 8002f8e:	b2d2      	uxtb	r2, r2
 8002f90:	f002 021f 	and.w	r2, r2, #31
 8002f94:	2101      	movs	r1, #1
 8002f96:	fa01 f202 	lsl.w	r2, r1, r2
 8002f9a:	4013      	ands	r3, r2
 8002f9c:	2b00      	cmp	r3, #0
 8002f9e:	d082      	beq.n	8002ea6 <HAL_RCC_OscConfig+0xdce>
 8002fa0:	e0cf      	b.n	8003142 <HAL_RCC_OscConfig+0x106a>
 8002fa2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002fa6:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 8002faa:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002fae:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002fb0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002fb4:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	fa93 f2a3 	rbit	r2, r3
 8002fbe:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002fc2:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8002fc6:	601a      	str	r2, [r3, #0]
  return result;
 8002fc8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002fcc:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8002fd0:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002fd2:	fab3 f383 	clz	r3, r3
 8002fd6:	b2db      	uxtb	r3, r3
 8002fd8:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002fdc:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002fe0:	009b      	lsls	r3, r3, #2
 8002fe2:	461a      	mov	r2, r3
 8002fe4:	2300      	movs	r3, #0
 8002fe6:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002fe8:	f7fd fe9c 	bl	8000d24 <HAL_GetTick>
 8002fec:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002ff0:	e009      	b.n	8003006 <HAL_RCC_OscConfig+0xf2e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002ff2:	f7fd fe97 	bl	8000d24 <HAL_GetTick>
 8002ff6:	4602      	mov	r2, r0
 8002ff8:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002ffc:	1ad3      	subs	r3, r2, r3
 8002ffe:	2b02      	cmp	r3, #2
 8003000:	d901      	bls.n	8003006 <HAL_RCC_OscConfig+0xf2e>
          {
            return HAL_TIMEOUT;
 8003002:	2303      	movs	r3, #3
 8003004:	e09e      	b.n	8003144 <HAL_RCC_OscConfig+0x106c>
 8003006:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800300a:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 800300e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003012:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003014:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003018:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	fa93 f2a3 	rbit	r2, r3
 8003022:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003026:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 800302a:	601a      	str	r2, [r3, #0]
  return result;
 800302c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003030:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8003034:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003036:	fab3 f383 	clz	r3, r3
 800303a:	b2db      	uxtb	r3, r3
 800303c:	095b      	lsrs	r3, r3, #5
 800303e:	b2db      	uxtb	r3, r3
 8003040:	f043 0301 	orr.w	r3, r3, #1
 8003044:	b2db      	uxtb	r3, r3
 8003046:	2b01      	cmp	r3, #1
 8003048:	d104      	bne.n	8003054 <HAL_RCC_OscConfig+0xf7c>
 800304a:	4b01      	ldr	r3, [pc, #4]	; (8003050 <HAL_RCC_OscConfig+0xf78>)
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	e029      	b.n	80030a4 <HAL_RCC_OscConfig+0xfcc>
 8003050:	40021000 	.word	0x40021000
 8003054:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003058:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 800305c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003060:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003062:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003066:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	fa93 f2a3 	rbit	r2, r3
 8003070:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003074:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 8003078:	601a      	str	r2, [r3, #0]
 800307a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800307e:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8003082:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003086:	601a      	str	r2, [r3, #0]
 8003088:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800308c:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	fa93 f2a3 	rbit	r2, r3
 8003096:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800309a:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 800309e:	601a      	str	r2, [r3, #0]
 80030a0:	4b2b      	ldr	r3, [pc, #172]	; (8003150 <HAL_RCC_OscConfig+0x1078>)
 80030a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030a4:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80030a8:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 80030ac:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80030b0:	6011      	str	r1, [r2, #0]
 80030b2:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80030b6:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 80030ba:	6812      	ldr	r2, [r2, #0]
 80030bc:	fa92 f1a2 	rbit	r1, r2
 80030c0:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80030c4:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 80030c8:	6011      	str	r1, [r2, #0]
  return result;
 80030ca:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80030ce:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 80030d2:	6812      	ldr	r2, [r2, #0]
 80030d4:	fab2 f282 	clz	r2, r2
 80030d8:	b2d2      	uxtb	r2, r2
 80030da:	f042 0220 	orr.w	r2, r2, #32
 80030de:	b2d2      	uxtb	r2, r2
 80030e0:	f002 021f 	and.w	r2, r2, #31
 80030e4:	2101      	movs	r1, #1
 80030e6:	fa01 f202 	lsl.w	r2, r1, r2
 80030ea:	4013      	ands	r3, r2
 80030ec:	2b00      	cmp	r3, #0
 80030ee:	d180      	bne.n	8002ff2 <HAL_RCC_OscConfig+0xf1a>
 80030f0:	e027      	b.n	8003142 <HAL_RCC_OscConfig+0x106a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80030f2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80030f6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	69db      	ldr	r3, [r3, #28]
 80030fe:	2b01      	cmp	r3, #1
 8003100:	d101      	bne.n	8003106 <HAL_RCC_OscConfig+0x102e>
      {
        return HAL_ERROR;
 8003102:	2301      	movs	r3, #1
 8003104:	e01e      	b.n	8003144 <HAL_RCC_OscConfig+0x106c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003106:	4b12      	ldr	r3, [pc, #72]	; (8003150 <HAL_RCC_OscConfig+0x1078>)
 8003108:	685b      	ldr	r3, [r3, #4]
 800310a:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 800310e:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8003112:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8003116:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800311a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	6a1b      	ldr	r3, [r3, #32]
 8003122:	429a      	cmp	r2, r3
 8003124:	d10b      	bne.n	800313e <HAL_RCC_OscConfig+0x1066>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 8003126:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 800312a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800312e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003132:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 800313a:	429a      	cmp	r2, r3
 800313c:	d001      	beq.n	8003142 <HAL_RCC_OscConfig+0x106a>
#endif
        {
          return HAL_ERROR;
 800313e:	2301      	movs	r3, #1
 8003140:	e000      	b.n	8003144 <HAL_RCC_OscConfig+0x106c>
        }
      }
    }
  }

  return HAL_OK;
 8003142:	2300      	movs	r3, #0
}
 8003144:	4618      	mov	r0, r3
 8003146:	f507 7700 	add.w	r7, r7, #512	; 0x200
 800314a:	46bd      	mov	sp, r7
 800314c:	bd80      	pop	{r7, pc}
 800314e:	bf00      	nop
 8003150:	40021000 	.word	0x40021000

08003154 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003154:	b580      	push	{r7, lr}
 8003156:	b09e      	sub	sp, #120	; 0x78
 8003158:	af00      	add	r7, sp, #0
 800315a:	6078      	str	r0, [r7, #4]
 800315c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 800315e:	2300      	movs	r3, #0
 8003160:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	2b00      	cmp	r3, #0
 8003166:	d101      	bne.n	800316c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003168:	2301      	movs	r3, #1
 800316a:	e162      	b.n	8003432 <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800316c:	4b90      	ldr	r3, [pc, #576]	; (80033b0 <HAL_RCC_ClockConfig+0x25c>)
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	f003 0307 	and.w	r3, r3, #7
 8003174:	683a      	ldr	r2, [r7, #0]
 8003176:	429a      	cmp	r2, r3
 8003178:	d910      	bls.n	800319c <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800317a:	4b8d      	ldr	r3, [pc, #564]	; (80033b0 <HAL_RCC_ClockConfig+0x25c>)
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	f023 0207 	bic.w	r2, r3, #7
 8003182:	498b      	ldr	r1, [pc, #556]	; (80033b0 <HAL_RCC_ClockConfig+0x25c>)
 8003184:	683b      	ldr	r3, [r7, #0]
 8003186:	4313      	orrs	r3, r2
 8003188:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800318a:	4b89      	ldr	r3, [pc, #548]	; (80033b0 <HAL_RCC_ClockConfig+0x25c>)
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	f003 0307 	and.w	r3, r3, #7
 8003192:	683a      	ldr	r2, [r7, #0]
 8003194:	429a      	cmp	r2, r3
 8003196:	d001      	beq.n	800319c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003198:	2301      	movs	r3, #1
 800319a:	e14a      	b.n	8003432 <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	f003 0302 	and.w	r3, r3, #2
 80031a4:	2b00      	cmp	r3, #0
 80031a6:	d008      	beq.n	80031ba <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80031a8:	4b82      	ldr	r3, [pc, #520]	; (80033b4 <HAL_RCC_ClockConfig+0x260>)
 80031aa:	685b      	ldr	r3, [r3, #4]
 80031ac:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	689b      	ldr	r3, [r3, #8]
 80031b4:	497f      	ldr	r1, [pc, #508]	; (80033b4 <HAL_RCC_ClockConfig+0x260>)
 80031b6:	4313      	orrs	r3, r2
 80031b8:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	f003 0301 	and.w	r3, r3, #1
 80031c2:	2b00      	cmp	r3, #0
 80031c4:	f000 80dc 	beq.w	8003380 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	685b      	ldr	r3, [r3, #4]
 80031cc:	2b01      	cmp	r3, #1
 80031ce:	d13c      	bne.n	800324a <HAL_RCC_ClockConfig+0xf6>
 80031d0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80031d4:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80031d6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80031d8:	fa93 f3a3 	rbit	r3, r3
 80031dc:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 80031de:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80031e0:	fab3 f383 	clz	r3, r3
 80031e4:	b2db      	uxtb	r3, r3
 80031e6:	095b      	lsrs	r3, r3, #5
 80031e8:	b2db      	uxtb	r3, r3
 80031ea:	f043 0301 	orr.w	r3, r3, #1
 80031ee:	b2db      	uxtb	r3, r3
 80031f0:	2b01      	cmp	r3, #1
 80031f2:	d102      	bne.n	80031fa <HAL_RCC_ClockConfig+0xa6>
 80031f4:	4b6f      	ldr	r3, [pc, #444]	; (80033b4 <HAL_RCC_ClockConfig+0x260>)
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	e00f      	b.n	800321a <HAL_RCC_ClockConfig+0xc6>
 80031fa:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80031fe:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003200:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003202:	fa93 f3a3 	rbit	r3, r3
 8003206:	667b      	str	r3, [r7, #100]	; 0x64
 8003208:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800320c:	663b      	str	r3, [r7, #96]	; 0x60
 800320e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003210:	fa93 f3a3 	rbit	r3, r3
 8003214:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003216:	4b67      	ldr	r3, [pc, #412]	; (80033b4 <HAL_RCC_ClockConfig+0x260>)
 8003218:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800321a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800321e:	65ba      	str	r2, [r7, #88]	; 0x58
 8003220:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003222:	fa92 f2a2 	rbit	r2, r2
 8003226:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 8003228:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800322a:	fab2 f282 	clz	r2, r2
 800322e:	b2d2      	uxtb	r2, r2
 8003230:	f042 0220 	orr.w	r2, r2, #32
 8003234:	b2d2      	uxtb	r2, r2
 8003236:	f002 021f 	and.w	r2, r2, #31
 800323a:	2101      	movs	r1, #1
 800323c:	fa01 f202 	lsl.w	r2, r1, r2
 8003240:	4013      	ands	r3, r2
 8003242:	2b00      	cmp	r3, #0
 8003244:	d17b      	bne.n	800333e <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8003246:	2301      	movs	r3, #1
 8003248:	e0f3      	b.n	8003432 <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	685b      	ldr	r3, [r3, #4]
 800324e:	2b02      	cmp	r3, #2
 8003250:	d13c      	bne.n	80032cc <HAL_RCC_ClockConfig+0x178>
 8003252:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003256:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003258:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800325a:	fa93 f3a3 	rbit	r3, r3
 800325e:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8003260:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003262:	fab3 f383 	clz	r3, r3
 8003266:	b2db      	uxtb	r3, r3
 8003268:	095b      	lsrs	r3, r3, #5
 800326a:	b2db      	uxtb	r3, r3
 800326c:	f043 0301 	orr.w	r3, r3, #1
 8003270:	b2db      	uxtb	r3, r3
 8003272:	2b01      	cmp	r3, #1
 8003274:	d102      	bne.n	800327c <HAL_RCC_ClockConfig+0x128>
 8003276:	4b4f      	ldr	r3, [pc, #316]	; (80033b4 <HAL_RCC_ClockConfig+0x260>)
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	e00f      	b.n	800329c <HAL_RCC_ClockConfig+0x148>
 800327c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003280:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003282:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003284:	fa93 f3a3 	rbit	r3, r3
 8003288:	647b      	str	r3, [r7, #68]	; 0x44
 800328a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800328e:	643b      	str	r3, [r7, #64]	; 0x40
 8003290:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003292:	fa93 f3a3 	rbit	r3, r3
 8003296:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003298:	4b46      	ldr	r3, [pc, #280]	; (80033b4 <HAL_RCC_ClockConfig+0x260>)
 800329a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800329c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80032a0:	63ba      	str	r2, [r7, #56]	; 0x38
 80032a2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80032a4:	fa92 f2a2 	rbit	r2, r2
 80032a8:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 80032aa:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80032ac:	fab2 f282 	clz	r2, r2
 80032b0:	b2d2      	uxtb	r2, r2
 80032b2:	f042 0220 	orr.w	r2, r2, #32
 80032b6:	b2d2      	uxtb	r2, r2
 80032b8:	f002 021f 	and.w	r2, r2, #31
 80032bc:	2101      	movs	r1, #1
 80032be:	fa01 f202 	lsl.w	r2, r1, r2
 80032c2:	4013      	ands	r3, r2
 80032c4:	2b00      	cmp	r3, #0
 80032c6:	d13a      	bne.n	800333e <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80032c8:	2301      	movs	r3, #1
 80032ca:	e0b2      	b.n	8003432 <HAL_RCC_ClockConfig+0x2de>
 80032cc:	2302      	movs	r3, #2
 80032ce:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80032d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80032d2:	fa93 f3a3 	rbit	r3, r3
 80032d6:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 80032d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80032da:	fab3 f383 	clz	r3, r3
 80032de:	b2db      	uxtb	r3, r3
 80032e0:	095b      	lsrs	r3, r3, #5
 80032e2:	b2db      	uxtb	r3, r3
 80032e4:	f043 0301 	orr.w	r3, r3, #1
 80032e8:	b2db      	uxtb	r3, r3
 80032ea:	2b01      	cmp	r3, #1
 80032ec:	d102      	bne.n	80032f4 <HAL_RCC_ClockConfig+0x1a0>
 80032ee:	4b31      	ldr	r3, [pc, #196]	; (80033b4 <HAL_RCC_ClockConfig+0x260>)
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	e00d      	b.n	8003310 <HAL_RCC_ClockConfig+0x1bc>
 80032f4:	2302      	movs	r3, #2
 80032f6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80032f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80032fa:	fa93 f3a3 	rbit	r3, r3
 80032fe:	627b      	str	r3, [r7, #36]	; 0x24
 8003300:	2302      	movs	r3, #2
 8003302:	623b      	str	r3, [r7, #32]
 8003304:	6a3b      	ldr	r3, [r7, #32]
 8003306:	fa93 f3a3 	rbit	r3, r3
 800330a:	61fb      	str	r3, [r7, #28]
 800330c:	4b29      	ldr	r3, [pc, #164]	; (80033b4 <HAL_RCC_ClockConfig+0x260>)
 800330e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003310:	2202      	movs	r2, #2
 8003312:	61ba      	str	r2, [r7, #24]
 8003314:	69ba      	ldr	r2, [r7, #24]
 8003316:	fa92 f2a2 	rbit	r2, r2
 800331a:	617a      	str	r2, [r7, #20]
  return result;
 800331c:	697a      	ldr	r2, [r7, #20]
 800331e:	fab2 f282 	clz	r2, r2
 8003322:	b2d2      	uxtb	r2, r2
 8003324:	f042 0220 	orr.w	r2, r2, #32
 8003328:	b2d2      	uxtb	r2, r2
 800332a:	f002 021f 	and.w	r2, r2, #31
 800332e:	2101      	movs	r1, #1
 8003330:	fa01 f202 	lsl.w	r2, r1, r2
 8003334:	4013      	ands	r3, r2
 8003336:	2b00      	cmp	r3, #0
 8003338:	d101      	bne.n	800333e <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 800333a:	2301      	movs	r3, #1
 800333c:	e079      	b.n	8003432 <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800333e:	4b1d      	ldr	r3, [pc, #116]	; (80033b4 <HAL_RCC_ClockConfig+0x260>)
 8003340:	685b      	ldr	r3, [r3, #4]
 8003342:	f023 0203 	bic.w	r2, r3, #3
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	685b      	ldr	r3, [r3, #4]
 800334a:	491a      	ldr	r1, [pc, #104]	; (80033b4 <HAL_RCC_ClockConfig+0x260>)
 800334c:	4313      	orrs	r3, r2
 800334e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003350:	f7fd fce8 	bl	8000d24 <HAL_GetTick>
 8003354:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003356:	e00a      	b.n	800336e <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003358:	f7fd fce4 	bl	8000d24 <HAL_GetTick>
 800335c:	4602      	mov	r2, r0
 800335e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003360:	1ad3      	subs	r3, r2, r3
 8003362:	f241 3288 	movw	r2, #5000	; 0x1388
 8003366:	4293      	cmp	r3, r2
 8003368:	d901      	bls.n	800336e <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 800336a:	2303      	movs	r3, #3
 800336c:	e061      	b.n	8003432 <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800336e:	4b11      	ldr	r3, [pc, #68]	; (80033b4 <HAL_RCC_ClockConfig+0x260>)
 8003370:	685b      	ldr	r3, [r3, #4]
 8003372:	f003 020c 	and.w	r2, r3, #12
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	685b      	ldr	r3, [r3, #4]
 800337a:	009b      	lsls	r3, r3, #2
 800337c:	429a      	cmp	r2, r3
 800337e:	d1eb      	bne.n	8003358 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003380:	4b0b      	ldr	r3, [pc, #44]	; (80033b0 <HAL_RCC_ClockConfig+0x25c>)
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	f003 0307 	and.w	r3, r3, #7
 8003388:	683a      	ldr	r2, [r7, #0]
 800338a:	429a      	cmp	r2, r3
 800338c:	d214      	bcs.n	80033b8 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800338e:	4b08      	ldr	r3, [pc, #32]	; (80033b0 <HAL_RCC_ClockConfig+0x25c>)
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	f023 0207 	bic.w	r2, r3, #7
 8003396:	4906      	ldr	r1, [pc, #24]	; (80033b0 <HAL_RCC_ClockConfig+0x25c>)
 8003398:	683b      	ldr	r3, [r7, #0]
 800339a:	4313      	orrs	r3, r2
 800339c:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800339e:	4b04      	ldr	r3, [pc, #16]	; (80033b0 <HAL_RCC_ClockConfig+0x25c>)
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	f003 0307 	and.w	r3, r3, #7
 80033a6:	683a      	ldr	r2, [r7, #0]
 80033a8:	429a      	cmp	r2, r3
 80033aa:	d005      	beq.n	80033b8 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 80033ac:	2301      	movs	r3, #1
 80033ae:	e040      	b.n	8003432 <HAL_RCC_ClockConfig+0x2de>
 80033b0:	40022000 	.word	0x40022000
 80033b4:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	f003 0304 	and.w	r3, r3, #4
 80033c0:	2b00      	cmp	r3, #0
 80033c2:	d008      	beq.n	80033d6 <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80033c4:	4b1d      	ldr	r3, [pc, #116]	; (800343c <HAL_RCC_ClockConfig+0x2e8>)
 80033c6:	685b      	ldr	r3, [r3, #4]
 80033c8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	68db      	ldr	r3, [r3, #12]
 80033d0:	491a      	ldr	r1, [pc, #104]	; (800343c <HAL_RCC_ClockConfig+0x2e8>)
 80033d2:	4313      	orrs	r3, r2
 80033d4:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	f003 0308 	and.w	r3, r3, #8
 80033de:	2b00      	cmp	r3, #0
 80033e0:	d009      	beq.n	80033f6 <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80033e2:	4b16      	ldr	r3, [pc, #88]	; (800343c <HAL_RCC_ClockConfig+0x2e8>)
 80033e4:	685b      	ldr	r3, [r3, #4]
 80033e6:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	691b      	ldr	r3, [r3, #16]
 80033ee:	00db      	lsls	r3, r3, #3
 80033f0:	4912      	ldr	r1, [pc, #72]	; (800343c <HAL_RCC_ClockConfig+0x2e8>)
 80033f2:	4313      	orrs	r3, r2
 80033f4:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 80033f6:	f000 f829 	bl	800344c <HAL_RCC_GetSysClockFreq>
 80033fa:	4601      	mov	r1, r0
 80033fc:	4b0f      	ldr	r3, [pc, #60]	; (800343c <HAL_RCC_ClockConfig+0x2e8>)
 80033fe:	685b      	ldr	r3, [r3, #4]
 8003400:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003404:	22f0      	movs	r2, #240	; 0xf0
 8003406:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003408:	693a      	ldr	r2, [r7, #16]
 800340a:	fa92 f2a2 	rbit	r2, r2
 800340e:	60fa      	str	r2, [r7, #12]
  return result;
 8003410:	68fa      	ldr	r2, [r7, #12]
 8003412:	fab2 f282 	clz	r2, r2
 8003416:	b2d2      	uxtb	r2, r2
 8003418:	40d3      	lsrs	r3, r2
 800341a:	4a09      	ldr	r2, [pc, #36]	; (8003440 <HAL_RCC_ClockConfig+0x2ec>)
 800341c:	5cd3      	ldrb	r3, [r2, r3]
 800341e:	fa21 f303 	lsr.w	r3, r1, r3
 8003422:	4a08      	ldr	r2, [pc, #32]	; (8003444 <HAL_RCC_ClockConfig+0x2f0>)
 8003424:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8003426:	4b08      	ldr	r3, [pc, #32]	; (8003448 <HAL_RCC_ClockConfig+0x2f4>)
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	4618      	mov	r0, r3
 800342c:	f7fd fc36 	bl	8000c9c <HAL_InitTick>
  
  return HAL_OK;
 8003430:	2300      	movs	r3, #0
}
 8003432:	4618      	mov	r0, r3
 8003434:	3778      	adds	r7, #120	; 0x78
 8003436:	46bd      	mov	sp, r7
 8003438:	bd80      	pop	{r7, pc}
 800343a:	bf00      	nop
 800343c:	40021000 	.word	0x40021000
 8003440:	08004d8c 	.word	0x08004d8c
 8003444:	20000004 	.word	0x20000004
 8003448:	20000008 	.word	0x20000008

0800344c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800344c:	b480      	push	{r7}
 800344e:	b08b      	sub	sp, #44	; 0x2c
 8003450:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003452:	2300      	movs	r3, #0
 8003454:	61fb      	str	r3, [r7, #28]
 8003456:	2300      	movs	r3, #0
 8003458:	61bb      	str	r3, [r7, #24]
 800345a:	2300      	movs	r3, #0
 800345c:	627b      	str	r3, [r7, #36]	; 0x24
 800345e:	2300      	movs	r3, #0
 8003460:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8003462:	2300      	movs	r3, #0
 8003464:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 8003466:	4b29      	ldr	r3, [pc, #164]	; (800350c <HAL_RCC_GetSysClockFreq+0xc0>)
 8003468:	685b      	ldr	r3, [r3, #4]
 800346a:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800346c:	69fb      	ldr	r3, [r7, #28]
 800346e:	f003 030c 	and.w	r3, r3, #12
 8003472:	2b04      	cmp	r3, #4
 8003474:	d002      	beq.n	800347c <HAL_RCC_GetSysClockFreq+0x30>
 8003476:	2b08      	cmp	r3, #8
 8003478:	d003      	beq.n	8003482 <HAL_RCC_GetSysClockFreq+0x36>
 800347a:	e03c      	b.n	80034f6 <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800347c:	4b24      	ldr	r3, [pc, #144]	; (8003510 <HAL_RCC_GetSysClockFreq+0xc4>)
 800347e:	623b      	str	r3, [r7, #32]
      break;
 8003480:	e03c      	b.n	80034fc <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8003482:	69fb      	ldr	r3, [r7, #28]
 8003484:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8003488:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 800348c:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800348e:	68ba      	ldr	r2, [r7, #8]
 8003490:	fa92 f2a2 	rbit	r2, r2
 8003494:	607a      	str	r2, [r7, #4]
  return result;
 8003496:	687a      	ldr	r2, [r7, #4]
 8003498:	fab2 f282 	clz	r2, r2
 800349c:	b2d2      	uxtb	r2, r2
 800349e:	40d3      	lsrs	r3, r2
 80034a0:	4a1c      	ldr	r2, [pc, #112]	; (8003514 <HAL_RCC_GetSysClockFreq+0xc8>)
 80034a2:	5cd3      	ldrb	r3, [r2, r3]
 80034a4:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 80034a6:	4b19      	ldr	r3, [pc, #100]	; (800350c <HAL_RCC_GetSysClockFreq+0xc0>)
 80034a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034aa:	f003 030f 	and.w	r3, r3, #15
 80034ae:	220f      	movs	r2, #15
 80034b0:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80034b2:	693a      	ldr	r2, [r7, #16]
 80034b4:	fa92 f2a2 	rbit	r2, r2
 80034b8:	60fa      	str	r2, [r7, #12]
  return result;
 80034ba:	68fa      	ldr	r2, [r7, #12]
 80034bc:	fab2 f282 	clz	r2, r2
 80034c0:	b2d2      	uxtb	r2, r2
 80034c2:	40d3      	lsrs	r3, r2
 80034c4:	4a14      	ldr	r2, [pc, #80]	; (8003518 <HAL_RCC_GetSysClockFreq+0xcc>)
 80034c6:	5cd3      	ldrb	r3, [r2, r3]
 80034c8:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 80034ca:	69fb      	ldr	r3, [r7, #28]
 80034cc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80034d0:	2b00      	cmp	r3, #0
 80034d2:	d008      	beq.n	80034e6 <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80034d4:	4a0e      	ldr	r2, [pc, #56]	; (8003510 <HAL_RCC_GetSysClockFreq+0xc4>)
 80034d6:	69bb      	ldr	r3, [r7, #24]
 80034d8:	fbb2 f2f3 	udiv	r2, r2, r3
 80034dc:	697b      	ldr	r3, [r7, #20]
 80034de:	fb02 f303 	mul.w	r3, r2, r3
 80034e2:	627b      	str	r3, [r7, #36]	; 0x24
 80034e4:	e004      	b.n	80034f0 <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 80034e6:	697b      	ldr	r3, [r7, #20]
 80034e8:	4a0c      	ldr	r2, [pc, #48]	; (800351c <HAL_RCC_GetSysClockFreq+0xd0>)
 80034ea:	fb02 f303 	mul.w	r3, r2, r3
 80034ee:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 80034f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034f2:	623b      	str	r3, [r7, #32]
      break;
 80034f4:	e002      	b.n	80034fc <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80034f6:	4b06      	ldr	r3, [pc, #24]	; (8003510 <HAL_RCC_GetSysClockFreq+0xc4>)
 80034f8:	623b      	str	r3, [r7, #32]
      break;
 80034fa:	bf00      	nop
    }
  }
  return sysclockfreq;
 80034fc:	6a3b      	ldr	r3, [r7, #32]
}
 80034fe:	4618      	mov	r0, r3
 8003500:	372c      	adds	r7, #44	; 0x2c
 8003502:	46bd      	mov	sp, r7
 8003504:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003508:	4770      	bx	lr
 800350a:	bf00      	nop
 800350c:	40021000 	.word	0x40021000
 8003510:	007a1200 	.word	0x007a1200
 8003514:	08004d9c 	.word	0x08004d9c
 8003518:	08004dac 	.word	0x08004dac
 800351c:	003d0900 	.word	0x003d0900

08003520 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003520:	b580      	push	{r7, lr}
 8003522:	b092      	sub	sp, #72	; 0x48
 8003524:	af00      	add	r7, sp, #0
 8003526:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003528:	2300      	movs	r3, #0
 800352a:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 800352c:	2300      	movs	r3, #0
 800352e:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 8003530:	2300      	movs	r3, #0
 8003532:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800353e:	2b00      	cmp	r3, #0
 8003540:	f000 80cd 	beq.w	80036de <HAL_RCCEx_PeriphCLKConfig+0x1be>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003544:	4b86      	ldr	r3, [pc, #536]	; (8003760 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003546:	69db      	ldr	r3, [r3, #28]
 8003548:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800354c:	2b00      	cmp	r3, #0
 800354e:	d10e      	bne.n	800356e <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003550:	4b83      	ldr	r3, [pc, #524]	; (8003760 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003552:	69db      	ldr	r3, [r3, #28]
 8003554:	4a82      	ldr	r2, [pc, #520]	; (8003760 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003556:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800355a:	61d3      	str	r3, [r2, #28]
 800355c:	4b80      	ldr	r3, [pc, #512]	; (8003760 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800355e:	69db      	ldr	r3, [r3, #28]
 8003560:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003564:	60bb      	str	r3, [r7, #8]
 8003566:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003568:	2301      	movs	r3, #1
 800356a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800356e:	4b7d      	ldr	r3, [pc, #500]	; (8003764 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003576:	2b00      	cmp	r3, #0
 8003578:	d118      	bne.n	80035ac <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800357a:	4b7a      	ldr	r3, [pc, #488]	; (8003764 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	4a79      	ldr	r2, [pc, #484]	; (8003764 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8003580:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003584:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003586:	f7fd fbcd 	bl	8000d24 <HAL_GetTick>
 800358a:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800358c:	e008      	b.n	80035a0 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800358e:	f7fd fbc9 	bl	8000d24 <HAL_GetTick>
 8003592:	4602      	mov	r2, r0
 8003594:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003596:	1ad3      	subs	r3, r2, r3
 8003598:	2b64      	cmp	r3, #100	; 0x64
 800359a:	d901      	bls.n	80035a0 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 800359c:	2303      	movs	r3, #3
 800359e:	e0db      	b.n	8003758 <HAL_RCCEx_PeriphCLKConfig+0x238>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80035a0:	4b70      	ldr	r3, [pc, #448]	; (8003764 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80035a8:	2b00      	cmp	r3, #0
 80035aa:	d0f0      	beq.n	800358e <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80035ac:	4b6c      	ldr	r3, [pc, #432]	; (8003760 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80035ae:	6a1b      	ldr	r3, [r3, #32]
 80035b0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80035b4:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80035b6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80035b8:	2b00      	cmp	r3, #0
 80035ba:	d07d      	beq.n	80036b8 <HAL_RCCEx_PeriphCLKConfig+0x198>
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	685b      	ldr	r3, [r3, #4]
 80035c0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80035c4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80035c6:	429a      	cmp	r2, r3
 80035c8:	d076      	beq.n	80036b8 <HAL_RCCEx_PeriphCLKConfig+0x198>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80035ca:	4b65      	ldr	r3, [pc, #404]	; (8003760 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80035cc:	6a1b      	ldr	r3, [r3, #32]
 80035ce:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80035d2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80035d4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80035d8:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80035da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80035dc:	fa93 f3a3 	rbit	r3, r3
 80035e0:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 80035e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80035e4:	fab3 f383 	clz	r3, r3
 80035e8:	b2db      	uxtb	r3, r3
 80035ea:	461a      	mov	r2, r3
 80035ec:	4b5e      	ldr	r3, [pc, #376]	; (8003768 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80035ee:	4413      	add	r3, r2
 80035f0:	009b      	lsls	r3, r3, #2
 80035f2:	461a      	mov	r2, r3
 80035f4:	2301      	movs	r3, #1
 80035f6:	6013      	str	r3, [r2, #0]
 80035f8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80035fc:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80035fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003600:	fa93 f3a3 	rbit	r3, r3
 8003604:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8003606:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003608:	fab3 f383 	clz	r3, r3
 800360c:	b2db      	uxtb	r3, r3
 800360e:	461a      	mov	r2, r3
 8003610:	4b55      	ldr	r3, [pc, #340]	; (8003768 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8003612:	4413      	add	r3, r2
 8003614:	009b      	lsls	r3, r3, #2
 8003616:	461a      	mov	r2, r3
 8003618:	2300      	movs	r3, #0
 800361a:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 800361c:	4a50      	ldr	r2, [pc, #320]	; (8003760 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800361e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003620:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8003622:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003624:	f003 0301 	and.w	r3, r3, #1
 8003628:	2b00      	cmp	r3, #0
 800362a:	d045      	beq.n	80036b8 <HAL_RCCEx_PeriphCLKConfig+0x198>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800362c:	f7fd fb7a 	bl	8000d24 <HAL_GetTick>
 8003630:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003632:	e00a      	b.n	800364a <HAL_RCCEx_PeriphCLKConfig+0x12a>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003634:	f7fd fb76 	bl	8000d24 <HAL_GetTick>
 8003638:	4602      	mov	r2, r0
 800363a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800363c:	1ad3      	subs	r3, r2, r3
 800363e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003642:	4293      	cmp	r3, r2
 8003644:	d901      	bls.n	800364a <HAL_RCCEx_PeriphCLKConfig+0x12a>
          {
            return HAL_TIMEOUT;
 8003646:	2303      	movs	r3, #3
 8003648:	e086      	b.n	8003758 <HAL_RCCEx_PeriphCLKConfig+0x238>
 800364a:	2302      	movs	r3, #2
 800364c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800364e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003650:	fa93 f3a3 	rbit	r3, r3
 8003654:	627b      	str	r3, [r7, #36]	; 0x24
 8003656:	2302      	movs	r3, #2
 8003658:	623b      	str	r3, [r7, #32]
 800365a:	6a3b      	ldr	r3, [r7, #32]
 800365c:	fa93 f3a3 	rbit	r3, r3
 8003660:	61fb      	str	r3, [r7, #28]
  return result;
 8003662:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003664:	fab3 f383 	clz	r3, r3
 8003668:	b2db      	uxtb	r3, r3
 800366a:	095b      	lsrs	r3, r3, #5
 800366c:	b2db      	uxtb	r3, r3
 800366e:	f043 0302 	orr.w	r3, r3, #2
 8003672:	b2db      	uxtb	r3, r3
 8003674:	2b02      	cmp	r3, #2
 8003676:	d102      	bne.n	800367e <HAL_RCCEx_PeriphCLKConfig+0x15e>
 8003678:	4b39      	ldr	r3, [pc, #228]	; (8003760 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800367a:	6a1b      	ldr	r3, [r3, #32]
 800367c:	e007      	b.n	800368e <HAL_RCCEx_PeriphCLKConfig+0x16e>
 800367e:	2302      	movs	r3, #2
 8003680:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003682:	69bb      	ldr	r3, [r7, #24]
 8003684:	fa93 f3a3 	rbit	r3, r3
 8003688:	617b      	str	r3, [r7, #20]
 800368a:	4b35      	ldr	r3, [pc, #212]	; (8003760 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800368c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800368e:	2202      	movs	r2, #2
 8003690:	613a      	str	r2, [r7, #16]
 8003692:	693a      	ldr	r2, [r7, #16]
 8003694:	fa92 f2a2 	rbit	r2, r2
 8003698:	60fa      	str	r2, [r7, #12]
  return result;
 800369a:	68fa      	ldr	r2, [r7, #12]
 800369c:	fab2 f282 	clz	r2, r2
 80036a0:	b2d2      	uxtb	r2, r2
 80036a2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80036a6:	b2d2      	uxtb	r2, r2
 80036a8:	f002 021f 	and.w	r2, r2, #31
 80036ac:	2101      	movs	r1, #1
 80036ae:	fa01 f202 	lsl.w	r2, r1, r2
 80036b2:	4013      	ands	r3, r2
 80036b4:	2b00      	cmp	r3, #0
 80036b6:	d0bd      	beq.n	8003634 <HAL_RCCEx_PeriphCLKConfig+0x114>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 80036b8:	4b29      	ldr	r3, [pc, #164]	; (8003760 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80036ba:	6a1b      	ldr	r3, [r3, #32]
 80036bc:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	685b      	ldr	r3, [r3, #4]
 80036c4:	4926      	ldr	r1, [pc, #152]	; (8003760 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80036c6:	4313      	orrs	r3, r2
 80036c8:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80036ca:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80036ce:	2b01      	cmp	r3, #1
 80036d0:	d105      	bne.n	80036de <HAL_RCCEx_PeriphCLKConfig+0x1be>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80036d2:	4b23      	ldr	r3, [pc, #140]	; (8003760 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80036d4:	69db      	ldr	r3, [r3, #28]
 80036d6:	4a22      	ldr	r2, [pc, #136]	; (8003760 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80036d8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80036dc:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	f003 0301 	and.w	r3, r3, #1
 80036e6:	2b00      	cmp	r3, #0
 80036e8:	d008      	beq.n	80036fc <HAL_RCCEx_PeriphCLKConfig+0x1dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80036ea:	4b1d      	ldr	r3, [pc, #116]	; (8003760 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80036ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036ee:	f023 0203 	bic.w	r2, r3, #3
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	689b      	ldr	r3, [r3, #8]
 80036f6:	491a      	ldr	r1, [pc, #104]	; (8003760 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80036f8:	4313      	orrs	r3, r2
 80036fa:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	f003 0320 	and.w	r3, r3, #32
 8003704:	2b00      	cmp	r3, #0
 8003706:	d008      	beq.n	800371a <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003708:	4b15      	ldr	r3, [pc, #84]	; (8003760 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800370a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800370c:	f023 0210 	bic.w	r2, r3, #16
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	68db      	ldr	r3, [r3, #12]
 8003714:	4912      	ldr	r1, [pc, #72]	; (8003760 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003716:	4313      	orrs	r3, r2
 8003718:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003722:	2b00      	cmp	r3, #0
 8003724:	d008      	beq.n	8003738 <HAL_RCCEx_PeriphCLKConfig+0x218>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8003726:	4b0e      	ldr	r3, [pc, #56]	; (8003760 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003728:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800372a:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	691b      	ldr	r3, [r3, #16]
 8003732:	490b      	ldr	r1, [pc, #44]	; (8003760 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003734:	4313      	orrs	r3, r2
 8003736:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003740:	2b00      	cmp	r3, #0
 8003742:	d008      	beq.n	8003756 <HAL_RCCEx_PeriphCLKConfig+0x236>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8003744:	4b06      	ldr	r3, [pc, #24]	; (8003760 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003746:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003748:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	695b      	ldr	r3, [r3, #20]
 8003750:	4903      	ldr	r1, [pc, #12]	; (8003760 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003752:	4313      	orrs	r3, r2
 8003754:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8003756:	2300      	movs	r3, #0
}
 8003758:	4618      	mov	r0, r3
 800375a:	3748      	adds	r7, #72	; 0x48
 800375c:	46bd      	mov	sp, r7
 800375e:	bd80      	pop	{r7, pc}
 8003760:	40021000 	.word	0x40021000
 8003764:	40007000 	.word	0x40007000
 8003768:	10908100 	.word	0x10908100

0800376c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800376c:	b580      	push	{r7, lr}
 800376e:	b082      	sub	sp, #8
 8003770:	af00      	add	r7, sp, #0
 8003772:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	2b00      	cmp	r3, #0
 8003778:	d101      	bne.n	800377e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800377a:	2301      	movs	r3, #1
 800377c:	e049      	b.n	8003812 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003784:	b2db      	uxtb	r3, r3
 8003786:	2b00      	cmp	r3, #0
 8003788:	d106      	bne.n	8003798 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	2200      	movs	r2, #0
 800378e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003792:	6878      	ldr	r0, [r7, #4]
 8003794:	f7fd f920 	bl	80009d8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	2202      	movs	r2, #2
 800379c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	681a      	ldr	r2, [r3, #0]
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	3304      	adds	r3, #4
 80037a8:	4619      	mov	r1, r3
 80037aa:	4610      	mov	r0, r2
 80037ac:	f000 f9da 	bl	8003b64 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	2201      	movs	r2, #1
 80037b4:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	2201      	movs	r2, #1
 80037bc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	2201      	movs	r2, #1
 80037c4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	2201      	movs	r2, #1
 80037cc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	2201      	movs	r2, #1
 80037d4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	2201      	movs	r2, #1
 80037dc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	2201      	movs	r2, #1
 80037e4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	2201      	movs	r2, #1
 80037ec:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	2201      	movs	r2, #1
 80037f4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	2201      	movs	r2, #1
 80037fc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	2201      	movs	r2, #1
 8003804:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	2201      	movs	r2, #1
 800380c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003810:	2300      	movs	r3, #0
}
 8003812:	4618      	mov	r0, r3
 8003814:	3708      	adds	r7, #8
 8003816:	46bd      	mov	sp, r7
 8003818:	bd80      	pop	{r7, pc}
	...

0800381c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800381c:	b480      	push	{r7}
 800381e:	b085      	sub	sp, #20
 8003820:	af00      	add	r7, sp, #0
 8003822:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800382a:	b2db      	uxtb	r3, r3
 800382c:	2b01      	cmp	r3, #1
 800382e:	d001      	beq.n	8003834 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003830:	2301      	movs	r3, #1
 8003832:	e040      	b.n	80038b6 <HAL_TIM_Base_Start_IT+0x9a>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	2202      	movs	r2, #2
 8003838:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	68da      	ldr	r2, [r3, #12]
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	f042 0201 	orr.w	r2, r2, #1
 800384a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	4a1c      	ldr	r2, [pc, #112]	; (80038c4 <HAL_TIM_Base_Start_IT+0xa8>)
 8003852:	4293      	cmp	r3, r2
 8003854:	d00e      	beq.n	8003874 <HAL_TIM_Base_Start_IT+0x58>
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800385e:	d009      	beq.n	8003874 <HAL_TIM_Base_Start_IT+0x58>
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	4a18      	ldr	r2, [pc, #96]	; (80038c8 <HAL_TIM_Base_Start_IT+0xac>)
 8003866:	4293      	cmp	r3, r2
 8003868:	d004      	beq.n	8003874 <HAL_TIM_Base_Start_IT+0x58>
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	4a17      	ldr	r2, [pc, #92]	; (80038cc <HAL_TIM_Base_Start_IT+0xb0>)
 8003870:	4293      	cmp	r3, r2
 8003872:	d115      	bne.n	80038a0 <HAL_TIM_Base_Start_IT+0x84>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	689a      	ldr	r2, [r3, #8]
 800387a:	4b15      	ldr	r3, [pc, #84]	; (80038d0 <HAL_TIM_Base_Start_IT+0xb4>)
 800387c:	4013      	ands	r3, r2
 800387e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003880:	68fb      	ldr	r3, [r7, #12]
 8003882:	2b06      	cmp	r3, #6
 8003884:	d015      	beq.n	80038b2 <HAL_TIM_Base_Start_IT+0x96>
 8003886:	68fb      	ldr	r3, [r7, #12]
 8003888:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800388c:	d011      	beq.n	80038b2 <HAL_TIM_Base_Start_IT+0x96>
    {
      __HAL_TIM_ENABLE(htim);
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	681a      	ldr	r2, [r3, #0]
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	f042 0201 	orr.w	r2, r2, #1
 800389c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800389e:	e008      	b.n	80038b2 <HAL_TIM_Base_Start_IT+0x96>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	681a      	ldr	r2, [r3, #0]
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	f042 0201 	orr.w	r2, r2, #1
 80038ae:	601a      	str	r2, [r3, #0]
 80038b0:	e000      	b.n	80038b4 <HAL_TIM_Base_Start_IT+0x98>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80038b2:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80038b4:	2300      	movs	r3, #0
}
 80038b6:	4618      	mov	r0, r3
 80038b8:	3714      	adds	r7, #20
 80038ba:	46bd      	mov	sp, r7
 80038bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038c0:	4770      	bx	lr
 80038c2:	bf00      	nop
 80038c4:	40012c00 	.word	0x40012c00
 80038c8:	40000400 	.word	0x40000400
 80038cc:	40014000 	.word	0x40014000
 80038d0:	00010007 	.word	0x00010007

080038d4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80038d4:	b580      	push	{r7, lr}
 80038d6:	b082      	sub	sp, #8
 80038d8:	af00      	add	r7, sp, #0
 80038da:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	691b      	ldr	r3, [r3, #16]
 80038e2:	f003 0302 	and.w	r3, r3, #2
 80038e6:	2b02      	cmp	r3, #2
 80038e8:	d122      	bne.n	8003930 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	68db      	ldr	r3, [r3, #12]
 80038f0:	f003 0302 	and.w	r3, r3, #2
 80038f4:	2b02      	cmp	r3, #2
 80038f6:	d11b      	bne.n	8003930 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	f06f 0202 	mvn.w	r2, #2
 8003900:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	2201      	movs	r2, #1
 8003906:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	699b      	ldr	r3, [r3, #24]
 800390e:	f003 0303 	and.w	r3, r3, #3
 8003912:	2b00      	cmp	r3, #0
 8003914:	d003      	beq.n	800391e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003916:	6878      	ldr	r0, [r7, #4]
 8003918:	f000 f905 	bl	8003b26 <HAL_TIM_IC_CaptureCallback>
 800391c:	e005      	b.n	800392a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800391e:	6878      	ldr	r0, [r7, #4]
 8003920:	f000 f8f7 	bl	8003b12 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003924:	6878      	ldr	r0, [r7, #4]
 8003926:	f000 f908 	bl	8003b3a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	2200      	movs	r2, #0
 800392e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	691b      	ldr	r3, [r3, #16]
 8003936:	f003 0304 	and.w	r3, r3, #4
 800393a:	2b04      	cmp	r3, #4
 800393c:	d122      	bne.n	8003984 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	68db      	ldr	r3, [r3, #12]
 8003944:	f003 0304 	and.w	r3, r3, #4
 8003948:	2b04      	cmp	r3, #4
 800394a:	d11b      	bne.n	8003984 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	f06f 0204 	mvn.w	r2, #4
 8003954:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	2202      	movs	r2, #2
 800395a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	699b      	ldr	r3, [r3, #24]
 8003962:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003966:	2b00      	cmp	r3, #0
 8003968:	d003      	beq.n	8003972 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800396a:	6878      	ldr	r0, [r7, #4]
 800396c:	f000 f8db 	bl	8003b26 <HAL_TIM_IC_CaptureCallback>
 8003970:	e005      	b.n	800397e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003972:	6878      	ldr	r0, [r7, #4]
 8003974:	f000 f8cd 	bl	8003b12 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003978:	6878      	ldr	r0, [r7, #4]
 800397a:	f000 f8de 	bl	8003b3a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	2200      	movs	r2, #0
 8003982:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	691b      	ldr	r3, [r3, #16]
 800398a:	f003 0308 	and.w	r3, r3, #8
 800398e:	2b08      	cmp	r3, #8
 8003990:	d122      	bne.n	80039d8 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	68db      	ldr	r3, [r3, #12]
 8003998:	f003 0308 	and.w	r3, r3, #8
 800399c:	2b08      	cmp	r3, #8
 800399e:	d11b      	bne.n	80039d8 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	f06f 0208 	mvn.w	r2, #8
 80039a8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	2204      	movs	r2, #4
 80039ae:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	69db      	ldr	r3, [r3, #28]
 80039b6:	f003 0303 	and.w	r3, r3, #3
 80039ba:	2b00      	cmp	r3, #0
 80039bc:	d003      	beq.n	80039c6 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80039be:	6878      	ldr	r0, [r7, #4]
 80039c0:	f000 f8b1 	bl	8003b26 <HAL_TIM_IC_CaptureCallback>
 80039c4:	e005      	b.n	80039d2 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80039c6:	6878      	ldr	r0, [r7, #4]
 80039c8:	f000 f8a3 	bl	8003b12 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80039cc:	6878      	ldr	r0, [r7, #4]
 80039ce:	f000 f8b4 	bl	8003b3a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	2200      	movs	r2, #0
 80039d6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	691b      	ldr	r3, [r3, #16]
 80039de:	f003 0310 	and.w	r3, r3, #16
 80039e2:	2b10      	cmp	r3, #16
 80039e4:	d122      	bne.n	8003a2c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	68db      	ldr	r3, [r3, #12]
 80039ec:	f003 0310 	and.w	r3, r3, #16
 80039f0:	2b10      	cmp	r3, #16
 80039f2:	d11b      	bne.n	8003a2c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	f06f 0210 	mvn.w	r2, #16
 80039fc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	2208      	movs	r2, #8
 8003a02:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	69db      	ldr	r3, [r3, #28]
 8003a0a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003a0e:	2b00      	cmp	r3, #0
 8003a10:	d003      	beq.n	8003a1a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003a12:	6878      	ldr	r0, [r7, #4]
 8003a14:	f000 f887 	bl	8003b26 <HAL_TIM_IC_CaptureCallback>
 8003a18:	e005      	b.n	8003a26 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003a1a:	6878      	ldr	r0, [r7, #4]
 8003a1c:	f000 f879 	bl	8003b12 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003a20:	6878      	ldr	r0, [r7, #4]
 8003a22:	f000 f88a 	bl	8003b3a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	2200      	movs	r2, #0
 8003a2a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	691b      	ldr	r3, [r3, #16]
 8003a32:	f003 0301 	and.w	r3, r3, #1
 8003a36:	2b01      	cmp	r3, #1
 8003a38:	d10e      	bne.n	8003a58 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	68db      	ldr	r3, [r3, #12]
 8003a40:	f003 0301 	and.w	r3, r3, #1
 8003a44:	2b01      	cmp	r3, #1
 8003a46:	d107      	bne.n	8003a58 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	f06f 0201 	mvn.w	r2, #1
 8003a50:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003a52:	6878      	ldr	r0, [r7, #4]
 8003a54:	f7fc fc0c 	bl	8000270 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	691b      	ldr	r3, [r3, #16]
 8003a5e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003a62:	2b80      	cmp	r3, #128	; 0x80
 8003a64:	d10e      	bne.n	8003a84 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	68db      	ldr	r3, [r3, #12]
 8003a6c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003a70:	2b80      	cmp	r3, #128	; 0x80
 8003a72:	d107      	bne.n	8003a84 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003a7c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003a7e:	6878      	ldr	r0, [r7, #4]
 8003a80:	f000 f8f2 	bl	8003c68 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#if defined(TIM_BDTR_BK2E)
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	691b      	ldr	r3, [r3, #16]
 8003a8a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a8e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003a92:	d10e      	bne.n	8003ab2 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	68db      	ldr	r3, [r3, #12]
 8003a9a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003a9e:	2b80      	cmp	r3, #128	; 0x80
 8003aa0:	d107      	bne.n	8003ab2 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8003aaa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8003aac:	6878      	ldr	r0, [r7, #4]
 8003aae:	f000 f8e5 	bl	8003c7c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#endif /* TIM_BDTR_BK2E */
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	691b      	ldr	r3, [r3, #16]
 8003ab8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003abc:	2b40      	cmp	r3, #64	; 0x40
 8003abe:	d10e      	bne.n	8003ade <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	68db      	ldr	r3, [r3, #12]
 8003ac6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003aca:	2b40      	cmp	r3, #64	; 0x40
 8003acc:	d107      	bne.n	8003ade <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003ad6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003ad8:	6878      	ldr	r0, [r7, #4]
 8003ada:	f000 f838 	bl	8003b4e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	691b      	ldr	r3, [r3, #16]
 8003ae4:	f003 0320 	and.w	r3, r3, #32
 8003ae8:	2b20      	cmp	r3, #32
 8003aea:	d10e      	bne.n	8003b0a <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	68db      	ldr	r3, [r3, #12]
 8003af2:	f003 0320 	and.w	r3, r3, #32
 8003af6:	2b20      	cmp	r3, #32
 8003af8:	d107      	bne.n	8003b0a <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	f06f 0220 	mvn.w	r2, #32
 8003b02:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003b04:	6878      	ldr	r0, [r7, #4]
 8003b06:	f000 f8a5 	bl	8003c54 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003b0a:	bf00      	nop
 8003b0c:	3708      	adds	r7, #8
 8003b0e:	46bd      	mov	sp, r7
 8003b10:	bd80      	pop	{r7, pc}

08003b12 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003b12:	b480      	push	{r7}
 8003b14:	b083      	sub	sp, #12
 8003b16:	af00      	add	r7, sp, #0
 8003b18:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003b1a:	bf00      	nop
 8003b1c:	370c      	adds	r7, #12
 8003b1e:	46bd      	mov	sp, r7
 8003b20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b24:	4770      	bx	lr

08003b26 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003b26:	b480      	push	{r7}
 8003b28:	b083      	sub	sp, #12
 8003b2a:	af00      	add	r7, sp, #0
 8003b2c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003b2e:	bf00      	nop
 8003b30:	370c      	adds	r7, #12
 8003b32:	46bd      	mov	sp, r7
 8003b34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b38:	4770      	bx	lr

08003b3a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003b3a:	b480      	push	{r7}
 8003b3c:	b083      	sub	sp, #12
 8003b3e:	af00      	add	r7, sp, #0
 8003b40:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003b42:	bf00      	nop
 8003b44:	370c      	adds	r7, #12
 8003b46:	46bd      	mov	sp, r7
 8003b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b4c:	4770      	bx	lr

08003b4e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003b4e:	b480      	push	{r7}
 8003b50:	b083      	sub	sp, #12
 8003b52:	af00      	add	r7, sp, #0
 8003b54:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003b56:	bf00      	nop
 8003b58:	370c      	adds	r7, #12
 8003b5a:	46bd      	mov	sp, r7
 8003b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b60:	4770      	bx	lr
	...

08003b64 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003b64:	b480      	push	{r7}
 8003b66:	b085      	sub	sp, #20
 8003b68:	af00      	add	r7, sp, #0
 8003b6a:	6078      	str	r0, [r7, #4]
 8003b6c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	4a32      	ldr	r2, [pc, #200]	; (8003c40 <TIM_Base_SetConfig+0xdc>)
 8003b78:	4293      	cmp	r3, r2
 8003b7a:	d007      	beq.n	8003b8c <TIM_Base_SetConfig+0x28>
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003b82:	d003      	beq.n	8003b8c <TIM_Base_SetConfig+0x28>
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	4a2f      	ldr	r2, [pc, #188]	; (8003c44 <TIM_Base_SetConfig+0xe0>)
 8003b88:	4293      	cmp	r3, r2
 8003b8a:	d108      	bne.n	8003b9e <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003b8c:	68fb      	ldr	r3, [r7, #12]
 8003b8e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003b92:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003b94:	683b      	ldr	r3, [r7, #0]
 8003b96:	685b      	ldr	r3, [r3, #4]
 8003b98:	68fa      	ldr	r2, [r7, #12]
 8003b9a:	4313      	orrs	r3, r2
 8003b9c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	4a27      	ldr	r2, [pc, #156]	; (8003c40 <TIM_Base_SetConfig+0xdc>)
 8003ba2:	4293      	cmp	r3, r2
 8003ba4:	d013      	beq.n	8003bce <TIM_Base_SetConfig+0x6a>
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003bac:	d00f      	beq.n	8003bce <TIM_Base_SetConfig+0x6a>
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	4a24      	ldr	r2, [pc, #144]	; (8003c44 <TIM_Base_SetConfig+0xe0>)
 8003bb2:	4293      	cmp	r3, r2
 8003bb4:	d00b      	beq.n	8003bce <TIM_Base_SetConfig+0x6a>
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	4a23      	ldr	r2, [pc, #140]	; (8003c48 <TIM_Base_SetConfig+0xe4>)
 8003bba:	4293      	cmp	r3, r2
 8003bbc:	d007      	beq.n	8003bce <TIM_Base_SetConfig+0x6a>
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	4a22      	ldr	r2, [pc, #136]	; (8003c4c <TIM_Base_SetConfig+0xe8>)
 8003bc2:	4293      	cmp	r3, r2
 8003bc4:	d003      	beq.n	8003bce <TIM_Base_SetConfig+0x6a>
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	4a21      	ldr	r2, [pc, #132]	; (8003c50 <TIM_Base_SetConfig+0xec>)
 8003bca:	4293      	cmp	r3, r2
 8003bcc:	d108      	bne.n	8003be0 <TIM_Base_SetConfig+0x7c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003bce:	68fb      	ldr	r3, [r7, #12]
 8003bd0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003bd4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003bd6:	683b      	ldr	r3, [r7, #0]
 8003bd8:	68db      	ldr	r3, [r3, #12]
 8003bda:	68fa      	ldr	r2, [r7, #12]
 8003bdc:	4313      	orrs	r3, r2
 8003bde:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003be0:	68fb      	ldr	r3, [r7, #12]
 8003be2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003be6:	683b      	ldr	r3, [r7, #0]
 8003be8:	695b      	ldr	r3, [r3, #20]
 8003bea:	4313      	orrs	r3, r2
 8003bec:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	68fa      	ldr	r2, [r7, #12]
 8003bf2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003bf4:	683b      	ldr	r3, [r7, #0]
 8003bf6:	689a      	ldr	r2, [r3, #8]
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003bfc:	683b      	ldr	r3, [r7, #0]
 8003bfe:	681a      	ldr	r2, [r3, #0]
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	4a0e      	ldr	r2, [pc, #56]	; (8003c40 <TIM_Base_SetConfig+0xdc>)
 8003c08:	4293      	cmp	r3, r2
 8003c0a:	d00b      	beq.n	8003c24 <TIM_Base_SetConfig+0xc0>
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	4a0e      	ldr	r2, [pc, #56]	; (8003c48 <TIM_Base_SetConfig+0xe4>)
 8003c10:	4293      	cmp	r3, r2
 8003c12:	d007      	beq.n	8003c24 <TIM_Base_SetConfig+0xc0>
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	4a0d      	ldr	r2, [pc, #52]	; (8003c4c <TIM_Base_SetConfig+0xe8>)
 8003c18:	4293      	cmp	r3, r2
 8003c1a:	d003      	beq.n	8003c24 <TIM_Base_SetConfig+0xc0>
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	4a0c      	ldr	r2, [pc, #48]	; (8003c50 <TIM_Base_SetConfig+0xec>)
 8003c20:	4293      	cmp	r3, r2
 8003c22:	d103      	bne.n	8003c2c <TIM_Base_SetConfig+0xc8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003c24:	683b      	ldr	r3, [r7, #0]
 8003c26:	691a      	ldr	r2, [r3, #16]
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	2201      	movs	r2, #1
 8003c30:	615a      	str	r2, [r3, #20]
}
 8003c32:	bf00      	nop
 8003c34:	3714      	adds	r7, #20
 8003c36:	46bd      	mov	sp, r7
 8003c38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c3c:	4770      	bx	lr
 8003c3e:	bf00      	nop
 8003c40:	40012c00 	.word	0x40012c00
 8003c44:	40000400 	.word	0x40000400
 8003c48:	40014000 	.word	0x40014000
 8003c4c:	40014400 	.word	0x40014400
 8003c50:	40014800 	.word	0x40014800

08003c54 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003c54:	b480      	push	{r7}
 8003c56:	b083      	sub	sp, #12
 8003c58:	af00      	add	r7, sp, #0
 8003c5a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003c5c:	bf00      	nop
 8003c5e:	370c      	adds	r7, #12
 8003c60:	46bd      	mov	sp, r7
 8003c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c66:	4770      	bx	lr

08003c68 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003c68:	b480      	push	{r7}
 8003c6a:	b083      	sub	sp, #12
 8003c6c:	af00      	add	r7, sp, #0
 8003c6e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003c70:	bf00      	nop
 8003c72:	370c      	adds	r7, #12
 8003c74:	46bd      	mov	sp, r7
 8003c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c7a:	4770      	bx	lr

08003c7c <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8003c7c:	b480      	push	{r7}
 8003c7e:	b083      	sub	sp, #12
 8003c80:	af00      	add	r7, sp, #0
 8003c82:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8003c84:	bf00      	nop
 8003c86:	370c      	adds	r7, #12
 8003c88:	46bd      	mov	sp, r7
 8003c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c8e:	4770      	bx	lr

08003c90 <std>:
 8003c90:	2300      	movs	r3, #0
 8003c92:	b510      	push	{r4, lr}
 8003c94:	4604      	mov	r4, r0
 8003c96:	e9c0 3300 	strd	r3, r3, [r0]
 8003c9a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8003c9e:	6083      	str	r3, [r0, #8]
 8003ca0:	8181      	strh	r1, [r0, #12]
 8003ca2:	6643      	str	r3, [r0, #100]	; 0x64
 8003ca4:	81c2      	strh	r2, [r0, #14]
 8003ca6:	6183      	str	r3, [r0, #24]
 8003ca8:	4619      	mov	r1, r3
 8003caa:	2208      	movs	r2, #8
 8003cac:	305c      	adds	r0, #92	; 0x5c
 8003cae:	f000 f9f7 	bl	80040a0 <memset>
 8003cb2:	4b0d      	ldr	r3, [pc, #52]	; (8003ce8 <std+0x58>)
 8003cb4:	6263      	str	r3, [r4, #36]	; 0x24
 8003cb6:	4b0d      	ldr	r3, [pc, #52]	; (8003cec <std+0x5c>)
 8003cb8:	62a3      	str	r3, [r4, #40]	; 0x28
 8003cba:	4b0d      	ldr	r3, [pc, #52]	; (8003cf0 <std+0x60>)
 8003cbc:	62e3      	str	r3, [r4, #44]	; 0x2c
 8003cbe:	4b0d      	ldr	r3, [pc, #52]	; (8003cf4 <std+0x64>)
 8003cc0:	6323      	str	r3, [r4, #48]	; 0x30
 8003cc2:	4b0d      	ldr	r3, [pc, #52]	; (8003cf8 <std+0x68>)
 8003cc4:	6224      	str	r4, [r4, #32]
 8003cc6:	429c      	cmp	r4, r3
 8003cc8:	d006      	beq.n	8003cd8 <std+0x48>
 8003cca:	f103 0268 	add.w	r2, r3, #104	; 0x68
 8003cce:	4294      	cmp	r4, r2
 8003cd0:	d002      	beq.n	8003cd8 <std+0x48>
 8003cd2:	33d0      	adds	r3, #208	; 0xd0
 8003cd4:	429c      	cmp	r4, r3
 8003cd6:	d105      	bne.n	8003ce4 <std+0x54>
 8003cd8:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8003cdc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003ce0:	f000 ba56 	b.w	8004190 <__retarget_lock_init_recursive>
 8003ce4:	bd10      	pop	{r4, pc}
 8003ce6:	bf00      	nop
 8003ce8:	08003ef1 	.word	0x08003ef1
 8003cec:	08003f13 	.word	0x08003f13
 8003cf0:	08003f4b 	.word	0x08003f4b
 8003cf4:	08003f6f 	.word	0x08003f6f
 8003cf8:	20000158 	.word	0x20000158

08003cfc <stdio_exit_handler>:
 8003cfc:	4a02      	ldr	r2, [pc, #8]	; (8003d08 <stdio_exit_handler+0xc>)
 8003cfe:	4903      	ldr	r1, [pc, #12]	; (8003d0c <stdio_exit_handler+0x10>)
 8003d00:	4803      	ldr	r0, [pc, #12]	; (8003d10 <stdio_exit_handler+0x14>)
 8003d02:	f000 b869 	b.w	8003dd8 <_fwalk_sglue>
 8003d06:	bf00      	nop
 8003d08:	20000010 	.word	0x20000010
 8003d0c:	08004a3d 	.word	0x08004a3d
 8003d10:	2000001c 	.word	0x2000001c

08003d14 <cleanup_stdio>:
 8003d14:	6841      	ldr	r1, [r0, #4]
 8003d16:	4b0c      	ldr	r3, [pc, #48]	; (8003d48 <cleanup_stdio+0x34>)
 8003d18:	4299      	cmp	r1, r3
 8003d1a:	b510      	push	{r4, lr}
 8003d1c:	4604      	mov	r4, r0
 8003d1e:	d001      	beq.n	8003d24 <cleanup_stdio+0x10>
 8003d20:	f000 fe8c 	bl	8004a3c <_fflush_r>
 8003d24:	68a1      	ldr	r1, [r4, #8]
 8003d26:	4b09      	ldr	r3, [pc, #36]	; (8003d4c <cleanup_stdio+0x38>)
 8003d28:	4299      	cmp	r1, r3
 8003d2a:	d002      	beq.n	8003d32 <cleanup_stdio+0x1e>
 8003d2c:	4620      	mov	r0, r4
 8003d2e:	f000 fe85 	bl	8004a3c <_fflush_r>
 8003d32:	68e1      	ldr	r1, [r4, #12]
 8003d34:	4b06      	ldr	r3, [pc, #24]	; (8003d50 <cleanup_stdio+0x3c>)
 8003d36:	4299      	cmp	r1, r3
 8003d38:	d004      	beq.n	8003d44 <cleanup_stdio+0x30>
 8003d3a:	4620      	mov	r0, r4
 8003d3c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003d40:	f000 be7c 	b.w	8004a3c <_fflush_r>
 8003d44:	bd10      	pop	{r4, pc}
 8003d46:	bf00      	nop
 8003d48:	20000158 	.word	0x20000158
 8003d4c:	200001c0 	.word	0x200001c0
 8003d50:	20000228 	.word	0x20000228

08003d54 <global_stdio_init.part.0>:
 8003d54:	b510      	push	{r4, lr}
 8003d56:	4b0b      	ldr	r3, [pc, #44]	; (8003d84 <global_stdio_init.part.0+0x30>)
 8003d58:	4c0b      	ldr	r4, [pc, #44]	; (8003d88 <global_stdio_init.part.0+0x34>)
 8003d5a:	4a0c      	ldr	r2, [pc, #48]	; (8003d8c <global_stdio_init.part.0+0x38>)
 8003d5c:	601a      	str	r2, [r3, #0]
 8003d5e:	4620      	mov	r0, r4
 8003d60:	2200      	movs	r2, #0
 8003d62:	2104      	movs	r1, #4
 8003d64:	f7ff ff94 	bl	8003c90 <std>
 8003d68:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8003d6c:	2201      	movs	r2, #1
 8003d6e:	2109      	movs	r1, #9
 8003d70:	f7ff ff8e 	bl	8003c90 <std>
 8003d74:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8003d78:	2202      	movs	r2, #2
 8003d7a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003d7e:	2112      	movs	r1, #18
 8003d80:	f7ff bf86 	b.w	8003c90 <std>
 8003d84:	20000290 	.word	0x20000290
 8003d88:	20000158 	.word	0x20000158
 8003d8c:	08003cfd 	.word	0x08003cfd

08003d90 <__sfp_lock_acquire>:
 8003d90:	4801      	ldr	r0, [pc, #4]	; (8003d98 <__sfp_lock_acquire+0x8>)
 8003d92:	f000 b9fe 	b.w	8004192 <__retarget_lock_acquire_recursive>
 8003d96:	bf00      	nop
 8003d98:	20000299 	.word	0x20000299

08003d9c <__sfp_lock_release>:
 8003d9c:	4801      	ldr	r0, [pc, #4]	; (8003da4 <__sfp_lock_release+0x8>)
 8003d9e:	f000 b9f9 	b.w	8004194 <__retarget_lock_release_recursive>
 8003da2:	bf00      	nop
 8003da4:	20000299 	.word	0x20000299

08003da8 <__sinit>:
 8003da8:	b510      	push	{r4, lr}
 8003daa:	4604      	mov	r4, r0
 8003dac:	f7ff fff0 	bl	8003d90 <__sfp_lock_acquire>
 8003db0:	6a23      	ldr	r3, [r4, #32]
 8003db2:	b11b      	cbz	r3, 8003dbc <__sinit+0x14>
 8003db4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003db8:	f7ff bff0 	b.w	8003d9c <__sfp_lock_release>
 8003dbc:	4b04      	ldr	r3, [pc, #16]	; (8003dd0 <__sinit+0x28>)
 8003dbe:	6223      	str	r3, [r4, #32]
 8003dc0:	4b04      	ldr	r3, [pc, #16]	; (8003dd4 <__sinit+0x2c>)
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	2b00      	cmp	r3, #0
 8003dc6:	d1f5      	bne.n	8003db4 <__sinit+0xc>
 8003dc8:	f7ff ffc4 	bl	8003d54 <global_stdio_init.part.0>
 8003dcc:	e7f2      	b.n	8003db4 <__sinit+0xc>
 8003dce:	bf00      	nop
 8003dd0:	08003d15 	.word	0x08003d15
 8003dd4:	20000290 	.word	0x20000290

08003dd8 <_fwalk_sglue>:
 8003dd8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003ddc:	4607      	mov	r7, r0
 8003dde:	4688      	mov	r8, r1
 8003de0:	4614      	mov	r4, r2
 8003de2:	2600      	movs	r6, #0
 8003de4:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8003de8:	f1b9 0901 	subs.w	r9, r9, #1
 8003dec:	d505      	bpl.n	8003dfa <_fwalk_sglue+0x22>
 8003dee:	6824      	ldr	r4, [r4, #0]
 8003df0:	2c00      	cmp	r4, #0
 8003df2:	d1f7      	bne.n	8003de4 <_fwalk_sglue+0xc>
 8003df4:	4630      	mov	r0, r6
 8003df6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003dfa:	89ab      	ldrh	r3, [r5, #12]
 8003dfc:	2b01      	cmp	r3, #1
 8003dfe:	d907      	bls.n	8003e10 <_fwalk_sglue+0x38>
 8003e00:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8003e04:	3301      	adds	r3, #1
 8003e06:	d003      	beq.n	8003e10 <_fwalk_sglue+0x38>
 8003e08:	4629      	mov	r1, r5
 8003e0a:	4638      	mov	r0, r7
 8003e0c:	47c0      	blx	r8
 8003e0e:	4306      	orrs	r6, r0
 8003e10:	3568      	adds	r5, #104	; 0x68
 8003e12:	e7e9      	b.n	8003de8 <_fwalk_sglue+0x10>

08003e14 <iprintf>:
 8003e14:	b40f      	push	{r0, r1, r2, r3}
 8003e16:	b507      	push	{r0, r1, r2, lr}
 8003e18:	4906      	ldr	r1, [pc, #24]	; (8003e34 <iprintf+0x20>)
 8003e1a:	ab04      	add	r3, sp, #16
 8003e1c:	6808      	ldr	r0, [r1, #0]
 8003e1e:	f853 2b04 	ldr.w	r2, [r3], #4
 8003e22:	6881      	ldr	r1, [r0, #8]
 8003e24:	9301      	str	r3, [sp, #4]
 8003e26:	f000 fad9 	bl	80043dc <_vfiprintf_r>
 8003e2a:	b003      	add	sp, #12
 8003e2c:	f85d eb04 	ldr.w	lr, [sp], #4
 8003e30:	b004      	add	sp, #16
 8003e32:	4770      	bx	lr
 8003e34:	20000068 	.word	0x20000068

08003e38 <_puts_r>:
 8003e38:	6a03      	ldr	r3, [r0, #32]
 8003e3a:	b570      	push	{r4, r5, r6, lr}
 8003e3c:	6884      	ldr	r4, [r0, #8]
 8003e3e:	4605      	mov	r5, r0
 8003e40:	460e      	mov	r6, r1
 8003e42:	b90b      	cbnz	r3, 8003e48 <_puts_r+0x10>
 8003e44:	f7ff ffb0 	bl	8003da8 <__sinit>
 8003e48:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8003e4a:	07db      	lsls	r3, r3, #31
 8003e4c:	d405      	bmi.n	8003e5a <_puts_r+0x22>
 8003e4e:	89a3      	ldrh	r3, [r4, #12]
 8003e50:	0598      	lsls	r0, r3, #22
 8003e52:	d402      	bmi.n	8003e5a <_puts_r+0x22>
 8003e54:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003e56:	f000 f99c 	bl	8004192 <__retarget_lock_acquire_recursive>
 8003e5a:	89a3      	ldrh	r3, [r4, #12]
 8003e5c:	0719      	lsls	r1, r3, #28
 8003e5e:	d513      	bpl.n	8003e88 <_puts_r+0x50>
 8003e60:	6923      	ldr	r3, [r4, #16]
 8003e62:	b18b      	cbz	r3, 8003e88 <_puts_r+0x50>
 8003e64:	3e01      	subs	r6, #1
 8003e66:	68a3      	ldr	r3, [r4, #8]
 8003e68:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8003e6c:	3b01      	subs	r3, #1
 8003e6e:	60a3      	str	r3, [r4, #8]
 8003e70:	b9e9      	cbnz	r1, 8003eae <_puts_r+0x76>
 8003e72:	2b00      	cmp	r3, #0
 8003e74:	da2e      	bge.n	8003ed4 <_puts_r+0x9c>
 8003e76:	4622      	mov	r2, r4
 8003e78:	210a      	movs	r1, #10
 8003e7a:	4628      	mov	r0, r5
 8003e7c:	f000 f87b 	bl	8003f76 <__swbuf_r>
 8003e80:	3001      	adds	r0, #1
 8003e82:	d007      	beq.n	8003e94 <_puts_r+0x5c>
 8003e84:	250a      	movs	r5, #10
 8003e86:	e007      	b.n	8003e98 <_puts_r+0x60>
 8003e88:	4621      	mov	r1, r4
 8003e8a:	4628      	mov	r0, r5
 8003e8c:	f000 f8b0 	bl	8003ff0 <__swsetup_r>
 8003e90:	2800      	cmp	r0, #0
 8003e92:	d0e7      	beq.n	8003e64 <_puts_r+0x2c>
 8003e94:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8003e98:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8003e9a:	07da      	lsls	r2, r3, #31
 8003e9c:	d405      	bmi.n	8003eaa <_puts_r+0x72>
 8003e9e:	89a3      	ldrh	r3, [r4, #12]
 8003ea0:	059b      	lsls	r3, r3, #22
 8003ea2:	d402      	bmi.n	8003eaa <_puts_r+0x72>
 8003ea4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003ea6:	f000 f975 	bl	8004194 <__retarget_lock_release_recursive>
 8003eaa:	4628      	mov	r0, r5
 8003eac:	bd70      	pop	{r4, r5, r6, pc}
 8003eae:	2b00      	cmp	r3, #0
 8003eb0:	da04      	bge.n	8003ebc <_puts_r+0x84>
 8003eb2:	69a2      	ldr	r2, [r4, #24]
 8003eb4:	429a      	cmp	r2, r3
 8003eb6:	dc06      	bgt.n	8003ec6 <_puts_r+0x8e>
 8003eb8:	290a      	cmp	r1, #10
 8003eba:	d004      	beq.n	8003ec6 <_puts_r+0x8e>
 8003ebc:	6823      	ldr	r3, [r4, #0]
 8003ebe:	1c5a      	adds	r2, r3, #1
 8003ec0:	6022      	str	r2, [r4, #0]
 8003ec2:	7019      	strb	r1, [r3, #0]
 8003ec4:	e7cf      	b.n	8003e66 <_puts_r+0x2e>
 8003ec6:	4622      	mov	r2, r4
 8003ec8:	4628      	mov	r0, r5
 8003eca:	f000 f854 	bl	8003f76 <__swbuf_r>
 8003ece:	3001      	adds	r0, #1
 8003ed0:	d1c9      	bne.n	8003e66 <_puts_r+0x2e>
 8003ed2:	e7df      	b.n	8003e94 <_puts_r+0x5c>
 8003ed4:	6823      	ldr	r3, [r4, #0]
 8003ed6:	250a      	movs	r5, #10
 8003ed8:	1c5a      	adds	r2, r3, #1
 8003eda:	6022      	str	r2, [r4, #0]
 8003edc:	701d      	strb	r5, [r3, #0]
 8003ede:	e7db      	b.n	8003e98 <_puts_r+0x60>

08003ee0 <puts>:
 8003ee0:	4b02      	ldr	r3, [pc, #8]	; (8003eec <puts+0xc>)
 8003ee2:	4601      	mov	r1, r0
 8003ee4:	6818      	ldr	r0, [r3, #0]
 8003ee6:	f7ff bfa7 	b.w	8003e38 <_puts_r>
 8003eea:	bf00      	nop
 8003eec:	20000068 	.word	0x20000068

08003ef0 <__sread>:
 8003ef0:	b510      	push	{r4, lr}
 8003ef2:	460c      	mov	r4, r1
 8003ef4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003ef8:	f000 f8fc 	bl	80040f4 <_read_r>
 8003efc:	2800      	cmp	r0, #0
 8003efe:	bfab      	itete	ge
 8003f00:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8003f02:	89a3      	ldrhlt	r3, [r4, #12]
 8003f04:	181b      	addge	r3, r3, r0
 8003f06:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8003f0a:	bfac      	ite	ge
 8003f0c:	6563      	strge	r3, [r4, #84]	; 0x54
 8003f0e:	81a3      	strhlt	r3, [r4, #12]
 8003f10:	bd10      	pop	{r4, pc}

08003f12 <__swrite>:
 8003f12:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003f16:	461f      	mov	r7, r3
 8003f18:	898b      	ldrh	r3, [r1, #12]
 8003f1a:	05db      	lsls	r3, r3, #23
 8003f1c:	4605      	mov	r5, r0
 8003f1e:	460c      	mov	r4, r1
 8003f20:	4616      	mov	r6, r2
 8003f22:	d505      	bpl.n	8003f30 <__swrite+0x1e>
 8003f24:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003f28:	2302      	movs	r3, #2
 8003f2a:	2200      	movs	r2, #0
 8003f2c:	f000 f8d0 	bl	80040d0 <_lseek_r>
 8003f30:	89a3      	ldrh	r3, [r4, #12]
 8003f32:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003f36:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003f3a:	81a3      	strh	r3, [r4, #12]
 8003f3c:	4632      	mov	r2, r6
 8003f3e:	463b      	mov	r3, r7
 8003f40:	4628      	mov	r0, r5
 8003f42:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003f46:	f000 b8e7 	b.w	8004118 <_write_r>

08003f4a <__sseek>:
 8003f4a:	b510      	push	{r4, lr}
 8003f4c:	460c      	mov	r4, r1
 8003f4e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003f52:	f000 f8bd 	bl	80040d0 <_lseek_r>
 8003f56:	1c43      	adds	r3, r0, #1
 8003f58:	89a3      	ldrh	r3, [r4, #12]
 8003f5a:	bf15      	itete	ne
 8003f5c:	6560      	strne	r0, [r4, #84]	; 0x54
 8003f5e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8003f62:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8003f66:	81a3      	strheq	r3, [r4, #12]
 8003f68:	bf18      	it	ne
 8003f6a:	81a3      	strhne	r3, [r4, #12]
 8003f6c:	bd10      	pop	{r4, pc}

08003f6e <__sclose>:
 8003f6e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003f72:	f000 b89d 	b.w	80040b0 <_close_r>

08003f76 <__swbuf_r>:
 8003f76:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003f78:	460e      	mov	r6, r1
 8003f7a:	4614      	mov	r4, r2
 8003f7c:	4605      	mov	r5, r0
 8003f7e:	b118      	cbz	r0, 8003f88 <__swbuf_r+0x12>
 8003f80:	6a03      	ldr	r3, [r0, #32]
 8003f82:	b90b      	cbnz	r3, 8003f88 <__swbuf_r+0x12>
 8003f84:	f7ff ff10 	bl	8003da8 <__sinit>
 8003f88:	69a3      	ldr	r3, [r4, #24]
 8003f8a:	60a3      	str	r3, [r4, #8]
 8003f8c:	89a3      	ldrh	r3, [r4, #12]
 8003f8e:	071a      	lsls	r2, r3, #28
 8003f90:	d525      	bpl.n	8003fde <__swbuf_r+0x68>
 8003f92:	6923      	ldr	r3, [r4, #16]
 8003f94:	b31b      	cbz	r3, 8003fde <__swbuf_r+0x68>
 8003f96:	6823      	ldr	r3, [r4, #0]
 8003f98:	6922      	ldr	r2, [r4, #16]
 8003f9a:	1a98      	subs	r0, r3, r2
 8003f9c:	6963      	ldr	r3, [r4, #20]
 8003f9e:	b2f6      	uxtb	r6, r6
 8003fa0:	4283      	cmp	r3, r0
 8003fa2:	4637      	mov	r7, r6
 8003fa4:	dc04      	bgt.n	8003fb0 <__swbuf_r+0x3a>
 8003fa6:	4621      	mov	r1, r4
 8003fa8:	4628      	mov	r0, r5
 8003faa:	f000 fd47 	bl	8004a3c <_fflush_r>
 8003fae:	b9e0      	cbnz	r0, 8003fea <__swbuf_r+0x74>
 8003fb0:	68a3      	ldr	r3, [r4, #8]
 8003fb2:	3b01      	subs	r3, #1
 8003fb4:	60a3      	str	r3, [r4, #8]
 8003fb6:	6823      	ldr	r3, [r4, #0]
 8003fb8:	1c5a      	adds	r2, r3, #1
 8003fba:	6022      	str	r2, [r4, #0]
 8003fbc:	701e      	strb	r6, [r3, #0]
 8003fbe:	6962      	ldr	r2, [r4, #20]
 8003fc0:	1c43      	adds	r3, r0, #1
 8003fc2:	429a      	cmp	r2, r3
 8003fc4:	d004      	beq.n	8003fd0 <__swbuf_r+0x5a>
 8003fc6:	89a3      	ldrh	r3, [r4, #12]
 8003fc8:	07db      	lsls	r3, r3, #31
 8003fca:	d506      	bpl.n	8003fda <__swbuf_r+0x64>
 8003fcc:	2e0a      	cmp	r6, #10
 8003fce:	d104      	bne.n	8003fda <__swbuf_r+0x64>
 8003fd0:	4621      	mov	r1, r4
 8003fd2:	4628      	mov	r0, r5
 8003fd4:	f000 fd32 	bl	8004a3c <_fflush_r>
 8003fd8:	b938      	cbnz	r0, 8003fea <__swbuf_r+0x74>
 8003fda:	4638      	mov	r0, r7
 8003fdc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003fde:	4621      	mov	r1, r4
 8003fe0:	4628      	mov	r0, r5
 8003fe2:	f000 f805 	bl	8003ff0 <__swsetup_r>
 8003fe6:	2800      	cmp	r0, #0
 8003fe8:	d0d5      	beq.n	8003f96 <__swbuf_r+0x20>
 8003fea:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8003fee:	e7f4      	b.n	8003fda <__swbuf_r+0x64>

08003ff0 <__swsetup_r>:
 8003ff0:	b538      	push	{r3, r4, r5, lr}
 8003ff2:	4b2a      	ldr	r3, [pc, #168]	; (800409c <__swsetup_r+0xac>)
 8003ff4:	4605      	mov	r5, r0
 8003ff6:	6818      	ldr	r0, [r3, #0]
 8003ff8:	460c      	mov	r4, r1
 8003ffa:	b118      	cbz	r0, 8004004 <__swsetup_r+0x14>
 8003ffc:	6a03      	ldr	r3, [r0, #32]
 8003ffe:	b90b      	cbnz	r3, 8004004 <__swsetup_r+0x14>
 8004000:	f7ff fed2 	bl	8003da8 <__sinit>
 8004004:	89a3      	ldrh	r3, [r4, #12]
 8004006:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800400a:	0718      	lsls	r0, r3, #28
 800400c:	d422      	bmi.n	8004054 <__swsetup_r+0x64>
 800400e:	06d9      	lsls	r1, r3, #27
 8004010:	d407      	bmi.n	8004022 <__swsetup_r+0x32>
 8004012:	2309      	movs	r3, #9
 8004014:	602b      	str	r3, [r5, #0]
 8004016:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800401a:	81a3      	strh	r3, [r4, #12]
 800401c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004020:	e034      	b.n	800408c <__swsetup_r+0x9c>
 8004022:	0758      	lsls	r0, r3, #29
 8004024:	d512      	bpl.n	800404c <__swsetup_r+0x5c>
 8004026:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004028:	b141      	cbz	r1, 800403c <__swsetup_r+0x4c>
 800402a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800402e:	4299      	cmp	r1, r3
 8004030:	d002      	beq.n	8004038 <__swsetup_r+0x48>
 8004032:	4628      	mov	r0, r5
 8004034:	f000 f8b0 	bl	8004198 <_free_r>
 8004038:	2300      	movs	r3, #0
 800403a:	6363      	str	r3, [r4, #52]	; 0x34
 800403c:	89a3      	ldrh	r3, [r4, #12]
 800403e:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8004042:	81a3      	strh	r3, [r4, #12]
 8004044:	2300      	movs	r3, #0
 8004046:	6063      	str	r3, [r4, #4]
 8004048:	6923      	ldr	r3, [r4, #16]
 800404a:	6023      	str	r3, [r4, #0]
 800404c:	89a3      	ldrh	r3, [r4, #12]
 800404e:	f043 0308 	orr.w	r3, r3, #8
 8004052:	81a3      	strh	r3, [r4, #12]
 8004054:	6923      	ldr	r3, [r4, #16]
 8004056:	b94b      	cbnz	r3, 800406c <__swsetup_r+0x7c>
 8004058:	89a3      	ldrh	r3, [r4, #12]
 800405a:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800405e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004062:	d003      	beq.n	800406c <__swsetup_r+0x7c>
 8004064:	4621      	mov	r1, r4
 8004066:	4628      	mov	r0, r5
 8004068:	f000 fd36 	bl	8004ad8 <__smakebuf_r>
 800406c:	89a0      	ldrh	r0, [r4, #12]
 800406e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8004072:	f010 0301 	ands.w	r3, r0, #1
 8004076:	d00a      	beq.n	800408e <__swsetup_r+0x9e>
 8004078:	2300      	movs	r3, #0
 800407a:	60a3      	str	r3, [r4, #8]
 800407c:	6963      	ldr	r3, [r4, #20]
 800407e:	425b      	negs	r3, r3
 8004080:	61a3      	str	r3, [r4, #24]
 8004082:	6923      	ldr	r3, [r4, #16]
 8004084:	b943      	cbnz	r3, 8004098 <__swsetup_r+0xa8>
 8004086:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800408a:	d1c4      	bne.n	8004016 <__swsetup_r+0x26>
 800408c:	bd38      	pop	{r3, r4, r5, pc}
 800408e:	0781      	lsls	r1, r0, #30
 8004090:	bf58      	it	pl
 8004092:	6963      	ldrpl	r3, [r4, #20]
 8004094:	60a3      	str	r3, [r4, #8]
 8004096:	e7f4      	b.n	8004082 <__swsetup_r+0x92>
 8004098:	2000      	movs	r0, #0
 800409a:	e7f7      	b.n	800408c <__swsetup_r+0x9c>
 800409c:	20000068 	.word	0x20000068

080040a0 <memset>:
 80040a0:	4402      	add	r2, r0
 80040a2:	4603      	mov	r3, r0
 80040a4:	4293      	cmp	r3, r2
 80040a6:	d100      	bne.n	80040aa <memset+0xa>
 80040a8:	4770      	bx	lr
 80040aa:	f803 1b01 	strb.w	r1, [r3], #1
 80040ae:	e7f9      	b.n	80040a4 <memset+0x4>

080040b0 <_close_r>:
 80040b0:	b538      	push	{r3, r4, r5, lr}
 80040b2:	4d06      	ldr	r5, [pc, #24]	; (80040cc <_close_r+0x1c>)
 80040b4:	2300      	movs	r3, #0
 80040b6:	4604      	mov	r4, r0
 80040b8:	4608      	mov	r0, r1
 80040ba:	602b      	str	r3, [r5, #0]
 80040bc:	f7fc fd31 	bl	8000b22 <_close>
 80040c0:	1c43      	adds	r3, r0, #1
 80040c2:	d102      	bne.n	80040ca <_close_r+0x1a>
 80040c4:	682b      	ldr	r3, [r5, #0]
 80040c6:	b103      	cbz	r3, 80040ca <_close_r+0x1a>
 80040c8:	6023      	str	r3, [r4, #0]
 80040ca:	bd38      	pop	{r3, r4, r5, pc}
 80040cc:	20000294 	.word	0x20000294

080040d0 <_lseek_r>:
 80040d0:	b538      	push	{r3, r4, r5, lr}
 80040d2:	4d07      	ldr	r5, [pc, #28]	; (80040f0 <_lseek_r+0x20>)
 80040d4:	4604      	mov	r4, r0
 80040d6:	4608      	mov	r0, r1
 80040d8:	4611      	mov	r1, r2
 80040da:	2200      	movs	r2, #0
 80040dc:	602a      	str	r2, [r5, #0]
 80040de:	461a      	mov	r2, r3
 80040e0:	f7fc fd46 	bl	8000b70 <_lseek>
 80040e4:	1c43      	adds	r3, r0, #1
 80040e6:	d102      	bne.n	80040ee <_lseek_r+0x1e>
 80040e8:	682b      	ldr	r3, [r5, #0]
 80040ea:	b103      	cbz	r3, 80040ee <_lseek_r+0x1e>
 80040ec:	6023      	str	r3, [r4, #0]
 80040ee:	bd38      	pop	{r3, r4, r5, pc}
 80040f0:	20000294 	.word	0x20000294

080040f4 <_read_r>:
 80040f4:	b538      	push	{r3, r4, r5, lr}
 80040f6:	4d07      	ldr	r5, [pc, #28]	; (8004114 <_read_r+0x20>)
 80040f8:	4604      	mov	r4, r0
 80040fa:	4608      	mov	r0, r1
 80040fc:	4611      	mov	r1, r2
 80040fe:	2200      	movs	r2, #0
 8004100:	602a      	str	r2, [r5, #0]
 8004102:	461a      	mov	r2, r3
 8004104:	f7fc fcd4 	bl	8000ab0 <_read>
 8004108:	1c43      	adds	r3, r0, #1
 800410a:	d102      	bne.n	8004112 <_read_r+0x1e>
 800410c:	682b      	ldr	r3, [r5, #0]
 800410e:	b103      	cbz	r3, 8004112 <_read_r+0x1e>
 8004110:	6023      	str	r3, [r4, #0]
 8004112:	bd38      	pop	{r3, r4, r5, pc}
 8004114:	20000294 	.word	0x20000294

08004118 <_write_r>:
 8004118:	b538      	push	{r3, r4, r5, lr}
 800411a:	4d07      	ldr	r5, [pc, #28]	; (8004138 <_write_r+0x20>)
 800411c:	4604      	mov	r4, r0
 800411e:	4608      	mov	r0, r1
 8004120:	4611      	mov	r1, r2
 8004122:	2200      	movs	r2, #0
 8004124:	602a      	str	r2, [r5, #0]
 8004126:	461a      	mov	r2, r3
 8004128:	f7fc fcdf 	bl	8000aea <_write>
 800412c:	1c43      	adds	r3, r0, #1
 800412e:	d102      	bne.n	8004136 <_write_r+0x1e>
 8004130:	682b      	ldr	r3, [r5, #0]
 8004132:	b103      	cbz	r3, 8004136 <_write_r+0x1e>
 8004134:	6023      	str	r3, [r4, #0]
 8004136:	bd38      	pop	{r3, r4, r5, pc}
 8004138:	20000294 	.word	0x20000294

0800413c <__errno>:
 800413c:	4b01      	ldr	r3, [pc, #4]	; (8004144 <__errno+0x8>)
 800413e:	6818      	ldr	r0, [r3, #0]
 8004140:	4770      	bx	lr
 8004142:	bf00      	nop
 8004144:	20000068 	.word	0x20000068

08004148 <__libc_init_array>:
 8004148:	b570      	push	{r4, r5, r6, lr}
 800414a:	4d0d      	ldr	r5, [pc, #52]	; (8004180 <__libc_init_array+0x38>)
 800414c:	4c0d      	ldr	r4, [pc, #52]	; (8004184 <__libc_init_array+0x3c>)
 800414e:	1b64      	subs	r4, r4, r5
 8004150:	10a4      	asrs	r4, r4, #2
 8004152:	2600      	movs	r6, #0
 8004154:	42a6      	cmp	r6, r4
 8004156:	d109      	bne.n	800416c <__libc_init_array+0x24>
 8004158:	4d0b      	ldr	r5, [pc, #44]	; (8004188 <__libc_init_array+0x40>)
 800415a:	4c0c      	ldr	r4, [pc, #48]	; (800418c <__libc_init_array+0x44>)
 800415c:	f000 fd2a 	bl	8004bb4 <_init>
 8004160:	1b64      	subs	r4, r4, r5
 8004162:	10a4      	asrs	r4, r4, #2
 8004164:	2600      	movs	r6, #0
 8004166:	42a6      	cmp	r6, r4
 8004168:	d105      	bne.n	8004176 <__libc_init_array+0x2e>
 800416a:	bd70      	pop	{r4, r5, r6, pc}
 800416c:	f855 3b04 	ldr.w	r3, [r5], #4
 8004170:	4798      	blx	r3
 8004172:	3601      	adds	r6, #1
 8004174:	e7ee      	b.n	8004154 <__libc_init_array+0xc>
 8004176:	f855 3b04 	ldr.w	r3, [r5], #4
 800417a:	4798      	blx	r3
 800417c:	3601      	adds	r6, #1
 800417e:	e7f2      	b.n	8004166 <__libc_init_array+0x1e>
 8004180:	08004df0 	.word	0x08004df0
 8004184:	08004df0 	.word	0x08004df0
 8004188:	08004df0 	.word	0x08004df0
 800418c:	08004df4 	.word	0x08004df4

08004190 <__retarget_lock_init_recursive>:
 8004190:	4770      	bx	lr

08004192 <__retarget_lock_acquire_recursive>:
 8004192:	4770      	bx	lr

08004194 <__retarget_lock_release_recursive>:
 8004194:	4770      	bx	lr
	...

08004198 <_free_r>:
 8004198:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800419a:	2900      	cmp	r1, #0
 800419c:	d044      	beq.n	8004228 <_free_r+0x90>
 800419e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80041a2:	9001      	str	r0, [sp, #4]
 80041a4:	2b00      	cmp	r3, #0
 80041a6:	f1a1 0404 	sub.w	r4, r1, #4
 80041aa:	bfb8      	it	lt
 80041ac:	18e4      	addlt	r4, r4, r3
 80041ae:	f000 f8df 	bl	8004370 <__malloc_lock>
 80041b2:	4a1e      	ldr	r2, [pc, #120]	; (800422c <_free_r+0x94>)
 80041b4:	9801      	ldr	r0, [sp, #4]
 80041b6:	6813      	ldr	r3, [r2, #0]
 80041b8:	b933      	cbnz	r3, 80041c8 <_free_r+0x30>
 80041ba:	6063      	str	r3, [r4, #4]
 80041bc:	6014      	str	r4, [r2, #0]
 80041be:	b003      	add	sp, #12
 80041c0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80041c4:	f000 b8da 	b.w	800437c <__malloc_unlock>
 80041c8:	42a3      	cmp	r3, r4
 80041ca:	d908      	bls.n	80041de <_free_r+0x46>
 80041cc:	6825      	ldr	r5, [r4, #0]
 80041ce:	1961      	adds	r1, r4, r5
 80041d0:	428b      	cmp	r3, r1
 80041d2:	bf01      	itttt	eq
 80041d4:	6819      	ldreq	r1, [r3, #0]
 80041d6:	685b      	ldreq	r3, [r3, #4]
 80041d8:	1949      	addeq	r1, r1, r5
 80041da:	6021      	streq	r1, [r4, #0]
 80041dc:	e7ed      	b.n	80041ba <_free_r+0x22>
 80041de:	461a      	mov	r2, r3
 80041e0:	685b      	ldr	r3, [r3, #4]
 80041e2:	b10b      	cbz	r3, 80041e8 <_free_r+0x50>
 80041e4:	42a3      	cmp	r3, r4
 80041e6:	d9fa      	bls.n	80041de <_free_r+0x46>
 80041e8:	6811      	ldr	r1, [r2, #0]
 80041ea:	1855      	adds	r5, r2, r1
 80041ec:	42a5      	cmp	r5, r4
 80041ee:	d10b      	bne.n	8004208 <_free_r+0x70>
 80041f0:	6824      	ldr	r4, [r4, #0]
 80041f2:	4421      	add	r1, r4
 80041f4:	1854      	adds	r4, r2, r1
 80041f6:	42a3      	cmp	r3, r4
 80041f8:	6011      	str	r1, [r2, #0]
 80041fa:	d1e0      	bne.n	80041be <_free_r+0x26>
 80041fc:	681c      	ldr	r4, [r3, #0]
 80041fe:	685b      	ldr	r3, [r3, #4]
 8004200:	6053      	str	r3, [r2, #4]
 8004202:	440c      	add	r4, r1
 8004204:	6014      	str	r4, [r2, #0]
 8004206:	e7da      	b.n	80041be <_free_r+0x26>
 8004208:	d902      	bls.n	8004210 <_free_r+0x78>
 800420a:	230c      	movs	r3, #12
 800420c:	6003      	str	r3, [r0, #0]
 800420e:	e7d6      	b.n	80041be <_free_r+0x26>
 8004210:	6825      	ldr	r5, [r4, #0]
 8004212:	1961      	adds	r1, r4, r5
 8004214:	428b      	cmp	r3, r1
 8004216:	bf04      	itt	eq
 8004218:	6819      	ldreq	r1, [r3, #0]
 800421a:	685b      	ldreq	r3, [r3, #4]
 800421c:	6063      	str	r3, [r4, #4]
 800421e:	bf04      	itt	eq
 8004220:	1949      	addeq	r1, r1, r5
 8004222:	6021      	streq	r1, [r4, #0]
 8004224:	6054      	str	r4, [r2, #4]
 8004226:	e7ca      	b.n	80041be <_free_r+0x26>
 8004228:	b003      	add	sp, #12
 800422a:	bd30      	pop	{r4, r5, pc}
 800422c:	2000029c 	.word	0x2000029c

08004230 <sbrk_aligned>:
 8004230:	b570      	push	{r4, r5, r6, lr}
 8004232:	4e0e      	ldr	r6, [pc, #56]	; (800426c <sbrk_aligned+0x3c>)
 8004234:	460c      	mov	r4, r1
 8004236:	6831      	ldr	r1, [r6, #0]
 8004238:	4605      	mov	r5, r0
 800423a:	b911      	cbnz	r1, 8004242 <sbrk_aligned+0x12>
 800423c:	f000 fcaa 	bl	8004b94 <_sbrk_r>
 8004240:	6030      	str	r0, [r6, #0]
 8004242:	4621      	mov	r1, r4
 8004244:	4628      	mov	r0, r5
 8004246:	f000 fca5 	bl	8004b94 <_sbrk_r>
 800424a:	1c43      	adds	r3, r0, #1
 800424c:	d00a      	beq.n	8004264 <sbrk_aligned+0x34>
 800424e:	1cc4      	adds	r4, r0, #3
 8004250:	f024 0403 	bic.w	r4, r4, #3
 8004254:	42a0      	cmp	r0, r4
 8004256:	d007      	beq.n	8004268 <sbrk_aligned+0x38>
 8004258:	1a21      	subs	r1, r4, r0
 800425a:	4628      	mov	r0, r5
 800425c:	f000 fc9a 	bl	8004b94 <_sbrk_r>
 8004260:	3001      	adds	r0, #1
 8004262:	d101      	bne.n	8004268 <sbrk_aligned+0x38>
 8004264:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8004268:	4620      	mov	r0, r4
 800426a:	bd70      	pop	{r4, r5, r6, pc}
 800426c:	200002a0 	.word	0x200002a0

08004270 <_malloc_r>:
 8004270:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004274:	1ccd      	adds	r5, r1, #3
 8004276:	f025 0503 	bic.w	r5, r5, #3
 800427a:	3508      	adds	r5, #8
 800427c:	2d0c      	cmp	r5, #12
 800427e:	bf38      	it	cc
 8004280:	250c      	movcc	r5, #12
 8004282:	2d00      	cmp	r5, #0
 8004284:	4607      	mov	r7, r0
 8004286:	db01      	blt.n	800428c <_malloc_r+0x1c>
 8004288:	42a9      	cmp	r1, r5
 800428a:	d905      	bls.n	8004298 <_malloc_r+0x28>
 800428c:	230c      	movs	r3, #12
 800428e:	603b      	str	r3, [r7, #0]
 8004290:	2600      	movs	r6, #0
 8004292:	4630      	mov	r0, r6
 8004294:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004298:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800436c <_malloc_r+0xfc>
 800429c:	f000 f868 	bl	8004370 <__malloc_lock>
 80042a0:	f8d8 3000 	ldr.w	r3, [r8]
 80042a4:	461c      	mov	r4, r3
 80042a6:	bb5c      	cbnz	r4, 8004300 <_malloc_r+0x90>
 80042a8:	4629      	mov	r1, r5
 80042aa:	4638      	mov	r0, r7
 80042ac:	f7ff ffc0 	bl	8004230 <sbrk_aligned>
 80042b0:	1c43      	adds	r3, r0, #1
 80042b2:	4604      	mov	r4, r0
 80042b4:	d155      	bne.n	8004362 <_malloc_r+0xf2>
 80042b6:	f8d8 4000 	ldr.w	r4, [r8]
 80042ba:	4626      	mov	r6, r4
 80042bc:	2e00      	cmp	r6, #0
 80042be:	d145      	bne.n	800434c <_malloc_r+0xdc>
 80042c0:	2c00      	cmp	r4, #0
 80042c2:	d048      	beq.n	8004356 <_malloc_r+0xe6>
 80042c4:	6823      	ldr	r3, [r4, #0]
 80042c6:	4631      	mov	r1, r6
 80042c8:	4638      	mov	r0, r7
 80042ca:	eb04 0903 	add.w	r9, r4, r3
 80042ce:	f000 fc61 	bl	8004b94 <_sbrk_r>
 80042d2:	4581      	cmp	r9, r0
 80042d4:	d13f      	bne.n	8004356 <_malloc_r+0xe6>
 80042d6:	6821      	ldr	r1, [r4, #0]
 80042d8:	1a6d      	subs	r5, r5, r1
 80042da:	4629      	mov	r1, r5
 80042dc:	4638      	mov	r0, r7
 80042de:	f7ff ffa7 	bl	8004230 <sbrk_aligned>
 80042e2:	3001      	adds	r0, #1
 80042e4:	d037      	beq.n	8004356 <_malloc_r+0xe6>
 80042e6:	6823      	ldr	r3, [r4, #0]
 80042e8:	442b      	add	r3, r5
 80042ea:	6023      	str	r3, [r4, #0]
 80042ec:	f8d8 3000 	ldr.w	r3, [r8]
 80042f0:	2b00      	cmp	r3, #0
 80042f2:	d038      	beq.n	8004366 <_malloc_r+0xf6>
 80042f4:	685a      	ldr	r2, [r3, #4]
 80042f6:	42a2      	cmp	r2, r4
 80042f8:	d12b      	bne.n	8004352 <_malloc_r+0xe2>
 80042fa:	2200      	movs	r2, #0
 80042fc:	605a      	str	r2, [r3, #4]
 80042fe:	e00f      	b.n	8004320 <_malloc_r+0xb0>
 8004300:	6822      	ldr	r2, [r4, #0]
 8004302:	1b52      	subs	r2, r2, r5
 8004304:	d41f      	bmi.n	8004346 <_malloc_r+0xd6>
 8004306:	2a0b      	cmp	r2, #11
 8004308:	d917      	bls.n	800433a <_malloc_r+0xca>
 800430a:	1961      	adds	r1, r4, r5
 800430c:	42a3      	cmp	r3, r4
 800430e:	6025      	str	r5, [r4, #0]
 8004310:	bf18      	it	ne
 8004312:	6059      	strne	r1, [r3, #4]
 8004314:	6863      	ldr	r3, [r4, #4]
 8004316:	bf08      	it	eq
 8004318:	f8c8 1000 	streq.w	r1, [r8]
 800431c:	5162      	str	r2, [r4, r5]
 800431e:	604b      	str	r3, [r1, #4]
 8004320:	4638      	mov	r0, r7
 8004322:	f104 060b 	add.w	r6, r4, #11
 8004326:	f000 f829 	bl	800437c <__malloc_unlock>
 800432a:	f026 0607 	bic.w	r6, r6, #7
 800432e:	1d23      	adds	r3, r4, #4
 8004330:	1af2      	subs	r2, r6, r3
 8004332:	d0ae      	beq.n	8004292 <_malloc_r+0x22>
 8004334:	1b9b      	subs	r3, r3, r6
 8004336:	50a3      	str	r3, [r4, r2]
 8004338:	e7ab      	b.n	8004292 <_malloc_r+0x22>
 800433a:	42a3      	cmp	r3, r4
 800433c:	6862      	ldr	r2, [r4, #4]
 800433e:	d1dd      	bne.n	80042fc <_malloc_r+0x8c>
 8004340:	f8c8 2000 	str.w	r2, [r8]
 8004344:	e7ec      	b.n	8004320 <_malloc_r+0xb0>
 8004346:	4623      	mov	r3, r4
 8004348:	6864      	ldr	r4, [r4, #4]
 800434a:	e7ac      	b.n	80042a6 <_malloc_r+0x36>
 800434c:	4634      	mov	r4, r6
 800434e:	6876      	ldr	r6, [r6, #4]
 8004350:	e7b4      	b.n	80042bc <_malloc_r+0x4c>
 8004352:	4613      	mov	r3, r2
 8004354:	e7cc      	b.n	80042f0 <_malloc_r+0x80>
 8004356:	230c      	movs	r3, #12
 8004358:	603b      	str	r3, [r7, #0]
 800435a:	4638      	mov	r0, r7
 800435c:	f000 f80e 	bl	800437c <__malloc_unlock>
 8004360:	e797      	b.n	8004292 <_malloc_r+0x22>
 8004362:	6025      	str	r5, [r4, #0]
 8004364:	e7dc      	b.n	8004320 <_malloc_r+0xb0>
 8004366:	605b      	str	r3, [r3, #4]
 8004368:	deff      	udf	#255	; 0xff
 800436a:	bf00      	nop
 800436c:	2000029c 	.word	0x2000029c

08004370 <__malloc_lock>:
 8004370:	4801      	ldr	r0, [pc, #4]	; (8004378 <__malloc_lock+0x8>)
 8004372:	f7ff bf0e 	b.w	8004192 <__retarget_lock_acquire_recursive>
 8004376:	bf00      	nop
 8004378:	20000298 	.word	0x20000298

0800437c <__malloc_unlock>:
 800437c:	4801      	ldr	r0, [pc, #4]	; (8004384 <__malloc_unlock+0x8>)
 800437e:	f7ff bf09 	b.w	8004194 <__retarget_lock_release_recursive>
 8004382:	bf00      	nop
 8004384:	20000298 	.word	0x20000298

08004388 <__sfputc_r>:
 8004388:	6893      	ldr	r3, [r2, #8]
 800438a:	3b01      	subs	r3, #1
 800438c:	2b00      	cmp	r3, #0
 800438e:	b410      	push	{r4}
 8004390:	6093      	str	r3, [r2, #8]
 8004392:	da08      	bge.n	80043a6 <__sfputc_r+0x1e>
 8004394:	6994      	ldr	r4, [r2, #24]
 8004396:	42a3      	cmp	r3, r4
 8004398:	db01      	blt.n	800439e <__sfputc_r+0x16>
 800439a:	290a      	cmp	r1, #10
 800439c:	d103      	bne.n	80043a6 <__sfputc_r+0x1e>
 800439e:	f85d 4b04 	ldr.w	r4, [sp], #4
 80043a2:	f7ff bde8 	b.w	8003f76 <__swbuf_r>
 80043a6:	6813      	ldr	r3, [r2, #0]
 80043a8:	1c58      	adds	r0, r3, #1
 80043aa:	6010      	str	r0, [r2, #0]
 80043ac:	7019      	strb	r1, [r3, #0]
 80043ae:	4608      	mov	r0, r1
 80043b0:	f85d 4b04 	ldr.w	r4, [sp], #4
 80043b4:	4770      	bx	lr

080043b6 <__sfputs_r>:
 80043b6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80043b8:	4606      	mov	r6, r0
 80043ba:	460f      	mov	r7, r1
 80043bc:	4614      	mov	r4, r2
 80043be:	18d5      	adds	r5, r2, r3
 80043c0:	42ac      	cmp	r4, r5
 80043c2:	d101      	bne.n	80043c8 <__sfputs_r+0x12>
 80043c4:	2000      	movs	r0, #0
 80043c6:	e007      	b.n	80043d8 <__sfputs_r+0x22>
 80043c8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80043cc:	463a      	mov	r2, r7
 80043ce:	4630      	mov	r0, r6
 80043d0:	f7ff ffda 	bl	8004388 <__sfputc_r>
 80043d4:	1c43      	adds	r3, r0, #1
 80043d6:	d1f3      	bne.n	80043c0 <__sfputs_r+0xa>
 80043d8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080043dc <_vfiprintf_r>:
 80043dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80043e0:	460d      	mov	r5, r1
 80043e2:	b09d      	sub	sp, #116	; 0x74
 80043e4:	4614      	mov	r4, r2
 80043e6:	4698      	mov	r8, r3
 80043e8:	4606      	mov	r6, r0
 80043ea:	b118      	cbz	r0, 80043f4 <_vfiprintf_r+0x18>
 80043ec:	6a03      	ldr	r3, [r0, #32]
 80043ee:	b90b      	cbnz	r3, 80043f4 <_vfiprintf_r+0x18>
 80043f0:	f7ff fcda 	bl	8003da8 <__sinit>
 80043f4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80043f6:	07d9      	lsls	r1, r3, #31
 80043f8:	d405      	bmi.n	8004406 <_vfiprintf_r+0x2a>
 80043fa:	89ab      	ldrh	r3, [r5, #12]
 80043fc:	059a      	lsls	r2, r3, #22
 80043fe:	d402      	bmi.n	8004406 <_vfiprintf_r+0x2a>
 8004400:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8004402:	f7ff fec6 	bl	8004192 <__retarget_lock_acquire_recursive>
 8004406:	89ab      	ldrh	r3, [r5, #12]
 8004408:	071b      	lsls	r3, r3, #28
 800440a:	d501      	bpl.n	8004410 <_vfiprintf_r+0x34>
 800440c:	692b      	ldr	r3, [r5, #16]
 800440e:	b99b      	cbnz	r3, 8004438 <_vfiprintf_r+0x5c>
 8004410:	4629      	mov	r1, r5
 8004412:	4630      	mov	r0, r6
 8004414:	f7ff fdec 	bl	8003ff0 <__swsetup_r>
 8004418:	b170      	cbz	r0, 8004438 <_vfiprintf_r+0x5c>
 800441a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800441c:	07dc      	lsls	r4, r3, #31
 800441e:	d504      	bpl.n	800442a <_vfiprintf_r+0x4e>
 8004420:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004424:	b01d      	add	sp, #116	; 0x74
 8004426:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800442a:	89ab      	ldrh	r3, [r5, #12]
 800442c:	0598      	lsls	r0, r3, #22
 800442e:	d4f7      	bmi.n	8004420 <_vfiprintf_r+0x44>
 8004430:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8004432:	f7ff feaf 	bl	8004194 <__retarget_lock_release_recursive>
 8004436:	e7f3      	b.n	8004420 <_vfiprintf_r+0x44>
 8004438:	2300      	movs	r3, #0
 800443a:	9309      	str	r3, [sp, #36]	; 0x24
 800443c:	2320      	movs	r3, #32
 800443e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8004442:	f8cd 800c 	str.w	r8, [sp, #12]
 8004446:	2330      	movs	r3, #48	; 0x30
 8004448:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 80045fc <_vfiprintf_r+0x220>
 800444c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8004450:	f04f 0901 	mov.w	r9, #1
 8004454:	4623      	mov	r3, r4
 8004456:	469a      	mov	sl, r3
 8004458:	f813 2b01 	ldrb.w	r2, [r3], #1
 800445c:	b10a      	cbz	r2, 8004462 <_vfiprintf_r+0x86>
 800445e:	2a25      	cmp	r2, #37	; 0x25
 8004460:	d1f9      	bne.n	8004456 <_vfiprintf_r+0x7a>
 8004462:	ebba 0b04 	subs.w	fp, sl, r4
 8004466:	d00b      	beq.n	8004480 <_vfiprintf_r+0xa4>
 8004468:	465b      	mov	r3, fp
 800446a:	4622      	mov	r2, r4
 800446c:	4629      	mov	r1, r5
 800446e:	4630      	mov	r0, r6
 8004470:	f7ff ffa1 	bl	80043b6 <__sfputs_r>
 8004474:	3001      	adds	r0, #1
 8004476:	f000 80a9 	beq.w	80045cc <_vfiprintf_r+0x1f0>
 800447a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800447c:	445a      	add	r2, fp
 800447e:	9209      	str	r2, [sp, #36]	; 0x24
 8004480:	f89a 3000 	ldrb.w	r3, [sl]
 8004484:	2b00      	cmp	r3, #0
 8004486:	f000 80a1 	beq.w	80045cc <_vfiprintf_r+0x1f0>
 800448a:	2300      	movs	r3, #0
 800448c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004490:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004494:	f10a 0a01 	add.w	sl, sl, #1
 8004498:	9304      	str	r3, [sp, #16]
 800449a:	9307      	str	r3, [sp, #28]
 800449c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80044a0:	931a      	str	r3, [sp, #104]	; 0x68
 80044a2:	4654      	mov	r4, sl
 80044a4:	2205      	movs	r2, #5
 80044a6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80044aa:	4854      	ldr	r0, [pc, #336]	; (80045fc <_vfiprintf_r+0x220>)
 80044ac:	f7fb fe90 	bl	80001d0 <memchr>
 80044b0:	9a04      	ldr	r2, [sp, #16]
 80044b2:	b9d8      	cbnz	r0, 80044ec <_vfiprintf_r+0x110>
 80044b4:	06d1      	lsls	r1, r2, #27
 80044b6:	bf44      	itt	mi
 80044b8:	2320      	movmi	r3, #32
 80044ba:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80044be:	0713      	lsls	r3, r2, #28
 80044c0:	bf44      	itt	mi
 80044c2:	232b      	movmi	r3, #43	; 0x2b
 80044c4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80044c8:	f89a 3000 	ldrb.w	r3, [sl]
 80044cc:	2b2a      	cmp	r3, #42	; 0x2a
 80044ce:	d015      	beq.n	80044fc <_vfiprintf_r+0x120>
 80044d0:	9a07      	ldr	r2, [sp, #28]
 80044d2:	4654      	mov	r4, sl
 80044d4:	2000      	movs	r0, #0
 80044d6:	f04f 0c0a 	mov.w	ip, #10
 80044da:	4621      	mov	r1, r4
 80044dc:	f811 3b01 	ldrb.w	r3, [r1], #1
 80044e0:	3b30      	subs	r3, #48	; 0x30
 80044e2:	2b09      	cmp	r3, #9
 80044e4:	d94d      	bls.n	8004582 <_vfiprintf_r+0x1a6>
 80044e6:	b1b0      	cbz	r0, 8004516 <_vfiprintf_r+0x13a>
 80044e8:	9207      	str	r2, [sp, #28]
 80044ea:	e014      	b.n	8004516 <_vfiprintf_r+0x13a>
 80044ec:	eba0 0308 	sub.w	r3, r0, r8
 80044f0:	fa09 f303 	lsl.w	r3, r9, r3
 80044f4:	4313      	orrs	r3, r2
 80044f6:	9304      	str	r3, [sp, #16]
 80044f8:	46a2      	mov	sl, r4
 80044fa:	e7d2      	b.n	80044a2 <_vfiprintf_r+0xc6>
 80044fc:	9b03      	ldr	r3, [sp, #12]
 80044fe:	1d19      	adds	r1, r3, #4
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	9103      	str	r1, [sp, #12]
 8004504:	2b00      	cmp	r3, #0
 8004506:	bfbb      	ittet	lt
 8004508:	425b      	neglt	r3, r3
 800450a:	f042 0202 	orrlt.w	r2, r2, #2
 800450e:	9307      	strge	r3, [sp, #28]
 8004510:	9307      	strlt	r3, [sp, #28]
 8004512:	bfb8      	it	lt
 8004514:	9204      	strlt	r2, [sp, #16]
 8004516:	7823      	ldrb	r3, [r4, #0]
 8004518:	2b2e      	cmp	r3, #46	; 0x2e
 800451a:	d10c      	bne.n	8004536 <_vfiprintf_r+0x15a>
 800451c:	7863      	ldrb	r3, [r4, #1]
 800451e:	2b2a      	cmp	r3, #42	; 0x2a
 8004520:	d134      	bne.n	800458c <_vfiprintf_r+0x1b0>
 8004522:	9b03      	ldr	r3, [sp, #12]
 8004524:	1d1a      	adds	r2, r3, #4
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	9203      	str	r2, [sp, #12]
 800452a:	2b00      	cmp	r3, #0
 800452c:	bfb8      	it	lt
 800452e:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8004532:	3402      	adds	r4, #2
 8004534:	9305      	str	r3, [sp, #20]
 8004536:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 800460c <_vfiprintf_r+0x230>
 800453a:	7821      	ldrb	r1, [r4, #0]
 800453c:	2203      	movs	r2, #3
 800453e:	4650      	mov	r0, sl
 8004540:	f7fb fe46 	bl	80001d0 <memchr>
 8004544:	b138      	cbz	r0, 8004556 <_vfiprintf_r+0x17a>
 8004546:	9b04      	ldr	r3, [sp, #16]
 8004548:	eba0 000a 	sub.w	r0, r0, sl
 800454c:	2240      	movs	r2, #64	; 0x40
 800454e:	4082      	lsls	r2, r0
 8004550:	4313      	orrs	r3, r2
 8004552:	3401      	adds	r4, #1
 8004554:	9304      	str	r3, [sp, #16]
 8004556:	f814 1b01 	ldrb.w	r1, [r4], #1
 800455a:	4829      	ldr	r0, [pc, #164]	; (8004600 <_vfiprintf_r+0x224>)
 800455c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8004560:	2206      	movs	r2, #6
 8004562:	f7fb fe35 	bl	80001d0 <memchr>
 8004566:	2800      	cmp	r0, #0
 8004568:	d03f      	beq.n	80045ea <_vfiprintf_r+0x20e>
 800456a:	4b26      	ldr	r3, [pc, #152]	; (8004604 <_vfiprintf_r+0x228>)
 800456c:	bb1b      	cbnz	r3, 80045b6 <_vfiprintf_r+0x1da>
 800456e:	9b03      	ldr	r3, [sp, #12]
 8004570:	3307      	adds	r3, #7
 8004572:	f023 0307 	bic.w	r3, r3, #7
 8004576:	3308      	adds	r3, #8
 8004578:	9303      	str	r3, [sp, #12]
 800457a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800457c:	443b      	add	r3, r7
 800457e:	9309      	str	r3, [sp, #36]	; 0x24
 8004580:	e768      	b.n	8004454 <_vfiprintf_r+0x78>
 8004582:	fb0c 3202 	mla	r2, ip, r2, r3
 8004586:	460c      	mov	r4, r1
 8004588:	2001      	movs	r0, #1
 800458a:	e7a6      	b.n	80044da <_vfiprintf_r+0xfe>
 800458c:	2300      	movs	r3, #0
 800458e:	3401      	adds	r4, #1
 8004590:	9305      	str	r3, [sp, #20]
 8004592:	4619      	mov	r1, r3
 8004594:	f04f 0c0a 	mov.w	ip, #10
 8004598:	4620      	mov	r0, r4
 800459a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800459e:	3a30      	subs	r2, #48	; 0x30
 80045a0:	2a09      	cmp	r2, #9
 80045a2:	d903      	bls.n	80045ac <_vfiprintf_r+0x1d0>
 80045a4:	2b00      	cmp	r3, #0
 80045a6:	d0c6      	beq.n	8004536 <_vfiprintf_r+0x15a>
 80045a8:	9105      	str	r1, [sp, #20]
 80045aa:	e7c4      	b.n	8004536 <_vfiprintf_r+0x15a>
 80045ac:	fb0c 2101 	mla	r1, ip, r1, r2
 80045b0:	4604      	mov	r4, r0
 80045b2:	2301      	movs	r3, #1
 80045b4:	e7f0      	b.n	8004598 <_vfiprintf_r+0x1bc>
 80045b6:	ab03      	add	r3, sp, #12
 80045b8:	9300      	str	r3, [sp, #0]
 80045ba:	462a      	mov	r2, r5
 80045bc:	4b12      	ldr	r3, [pc, #72]	; (8004608 <_vfiprintf_r+0x22c>)
 80045be:	a904      	add	r1, sp, #16
 80045c0:	4630      	mov	r0, r6
 80045c2:	f3af 8000 	nop.w
 80045c6:	4607      	mov	r7, r0
 80045c8:	1c78      	adds	r0, r7, #1
 80045ca:	d1d6      	bne.n	800457a <_vfiprintf_r+0x19e>
 80045cc:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80045ce:	07d9      	lsls	r1, r3, #31
 80045d0:	d405      	bmi.n	80045de <_vfiprintf_r+0x202>
 80045d2:	89ab      	ldrh	r3, [r5, #12]
 80045d4:	059a      	lsls	r2, r3, #22
 80045d6:	d402      	bmi.n	80045de <_vfiprintf_r+0x202>
 80045d8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80045da:	f7ff fddb 	bl	8004194 <__retarget_lock_release_recursive>
 80045de:	89ab      	ldrh	r3, [r5, #12]
 80045e0:	065b      	lsls	r3, r3, #25
 80045e2:	f53f af1d 	bmi.w	8004420 <_vfiprintf_r+0x44>
 80045e6:	9809      	ldr	r0, [sp, #36]	; 0x24
 80045e8:	e71c      	b.n	8004424 <_vfiprintf_r+0x48>
 80045ea:	ab03      	add	r3, sp, #12
 80045ec:	9300      	str	r3, [sp, #0]
 80045ee:	462a      	mov	r2, r5
 80045f0:	4b05      	ldr	r3, [pc, #20]	; (8004608 <_vfiprintf_r+0x22c>)
 80045f2:	a904      	add	r1, sp, #16
 80045f4:	4630      	mov	r0, r6
 80045f6:	f000 f879 	bl	80046ec <_printf_i>
 80045fa:	e7e4      	b.n	80045c6 <_vfiprintf_r+0x1ea>
 80045fc:	08004dbc 	.word	0x08004dbc
 8004600:	08004dc6 	.word	0x08004dc6
 8004604:	00000000 	.word	0x00000000
 8004608:	080043b7 	.word	0x080043b7
 800460c:	08004dc2 	.word	0x08004dc2

08004610 <_printf_common>:
 8004610:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004614:	4616      	mov	r6, r2
 8004616:	4699      	mov	r9, r3
 8004618:	688a      	ldr	r2, [r1, #8]
 800461a:	690b      	ldr	r3, [r1, #16]
 800461c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004620:	4293      	cmp	r3, r2
 8004622:	bfb8      	it	lt
 8004624:	4613      	movlt	r3, r2
 8004626:	6033      	str	r3, [r6, #0]
 8004628:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800462c:	4607      	mov	r7, r0
 800462e:	460c      	mov	r4, r1
 8004630:	b10a      	cbz	r2, 8004636 <_printf_common+0x26>
 8004632:	3301      	adds	r3, #1
 8004634:	6033      	str	r3, [r6, #0]
 8004636:	6823      	ldr	r3, [r4, #0]
 8004638:	0699      	lsls	r1, r3, #26
 800463a:	bf42      	ittt	mi
 800463c:	6833      	ldrmi	r3, [r6, #0]
 800463e:	3302      	addmi	r3, #2
 8004640:	6033      	strmi	r3, [r6, #0]
 8004642:	6825      	ldr	r5, [r4, #0]
 8004644:	f015 0506 	ands.w	r5, r5, #6
 8004648:	d106      	bne.n	8004658 <_printf_common+0x48>
 800464a:	f104 0a19 	add.w	sl, r4, #25
 800464e:	68e3      	ldr	r3, [r4, #12]
 8004650:	6832      	ldr	r2, [r6, #0]
 8004652:	1a9b      	subs	r3, r3, r2
 8004654:	42ab      	cmp	r3, r5
 8004656:	dc26      	bgt.n	80046a6 <_printf_common+0x96>
 8004658:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800465c:	1e13      	subs	r3, r2, #0
 800465e:	6822      	ldr	r2, [r4, #0]
 8004660:	bf18      	it	ne
 8004662:	2301      	movne	r3, #1
 8004664:	0692      	lsls	r2, r2, #26
 8004666:	d42b      	bmi.n	80046c0 <_printf_common+0xb0>
 8004668:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800466c:	4649      	mov	r1, r9
 800466e:	4638      	mov	r0, r7
 8004670:	47c0      	blx	r8
 8004672:	3001      	adds	r0, #1
 8004674:	d01e      	beq.n	80046b4 <_printf_common+0xa4>
 8004676:	6823      	ldr	r3, [r4, #0]
 8004678:	6922      	ldr	r2, [r4, #16]
 800467a:	f003 0306 	and.w	r3, r3, #6
 800467e:	2b04      	cmp	r3, #4
 8004680:	bf02      	ittt	eq
 8004682:	68e5      	ldreq	r5, [r4, #12]
 8004684:	6833      	ldreq	r3, [r6, #0]
 8004686:	1aed      	subeq	r5, r5, r3
 8004688:	68a3      	ldr	r3, [r4, #8]
 800468a:	bf0c      	ite	eq
 800468c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004690:	2500      	movne	r5, #0
 8004692:	4293      	cmp	r3, r2
 8004694:	bfc4      	itt	gt
 8004696:	1a9b      	subgt	r3, r3, r2
 8004698:	18ed      	addgt	r5, r5, r3
 800469a:	2600      	movs	r6, #0
 800469c:	341a      	adds	r4, #26
 800469e:	42b5      	cmp	r5, r6
 80046a0:	d11a      	bne.n	80046d8 <_printf_common+0xc8>
 80046a2:	2000      	movs	r0, #0
 80046a4:	e008      	b.n	80046b8 <_printf_common+0xa8>
 80046a6:	2301      	movs	r3, #1
 80046a8:	4652      	mov	r2, sl
 80046aa:	4649      	mov	r1, r9
 80046ac:	4638      	mov	r0, r7
 80046ae:	47c0      	blx	r8
 80046b0:	3001      	adds	r0, #1
 80046b2:	d103      	bne.n	80046bc <_printf_common+0xac>
 80046b4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80046b8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80046bc:	3501      	adds	r5, #1
 80046be:	e7c6      	b.n	800464e <_printf_common+0x3e>
 80046c0:	18e1      	adds	r1, r4, r3
 80046c2:	1c5a      	adds	r2, r3, #1
 80046c4:	2030      	movs	r0, #48	; 0x30
 80046c6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80046ca:	4422      	add	r2, r4
 80046cc:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80046d0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80046d4:	3302      	adds	r3, #2
 80046d6:	e7c7      	b.n	8004668 <_printf_common+0x58>
 80046d8:	2301      	movs	r3, #1
 80046da:	4622      	mov	r2, r4
 80046dc:	4649      	mov	r1, r9
 80046de:	4638      	mov	r0, r7
 80046e0:	47c0      	blx	r8
 80046e2:	3001      	adds	r0, #1
 80046e4:	d0e6      	beq.n	80046b4 <_printf_common+0xa4>
 80046e6:	3601      	adds	r6, #1
 80046e8:	e7d9      	b.n	800469e <_printf_common+0x8e>
	...

080046ec <_printf_i>:
 80046ec:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80046f0:	7e0f      	ldrb	r7, [r1, #24]
 80046f2:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80046f4:	2f78      	cmp	r7, #120	; 0x78
 80046f6:	4691      	mov	r9, r2
 80046f8:	4680      	mov	r8, r0
 80046fa:	460c      	mov	r4, r1
 80046fc:	469a      	mov	sl, r3
 80046fe:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8004702:	d807      	bhi.n	8004714 <_printf_i+0x28>
 8004704:	2f62      	cmp	r7, #98	; 0x62
 8004706:	d80a      	bhi.n	800471e <_printf_i+0x32>
 8004708:	2f00      	cmp	r7, #0
 800470a:	f000 80d4 	beq.w	80048b6 <_printf_i+0x1ca>
 800470e:	2f58      	cmp	r7, #88	; 0x58
 8004710:	f000 80c0 	beq.w	8004894 <_printf_i+0x1a8>
 8004714:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004718:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800471c:	e03a      	b.n	8004794 <_printf_i+0xa8>
 800471e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8004722:	2b15      	cmp	r3, #21
 8004724:	d8f6      	bhi.n	8004714 <_printf_i+0x28>
 8004726:	a101      	add	r1, pc, #4	; (adr r1, 800472c <_printf_i+0x40>)
 8004728:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800472c:	08004785 	.word	0x08004785
 8004730:	08004799 	.word	0x08004799
 8004734:	08004715 	.word	0x08004715
 8004738:	08004715 	.word	0x08004715
 800473c:	08004715 	.word	0x08004715
 8004740:	08004715 	.word	0x08004715
 8004744:	08004799 	.word	0x08004799
 8004748:	08004715 	.word	0x08004715
 800474c:	08004715 	.word	0x08004715
 8004750:	08004715 	.word	0x08004715
 8004754:	08004715 	.word	0x08004715
 8004758:	0800489d 	.word	0x0800489d
 800475c:	080047c5 	.word	0x080047c5
 8004760:	08004857 	.word	0x08004857
 8004764:	08004715 	.word	0x08004715
 8004768:	08004715 	.word	0x08004715
 800476c:	080048bf 	.word	0x080048bf
 8004770:	08004715 	.word	0x08004715
 8004774:	080047c5 	.word	0x080047c5
 8004778:	08004715 	.word	0x08004715
 800477c:	08004715 	.word	0x08004715
 8004780:	0800485f 	.word	0x0800485f
 8004784:	682b      	ldr	r3, [r5, #0]
 8004786:	1d1a      	adds	r2, r3, #4
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	602a      	str	r2, [r5, #0]
 800478c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004790:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004794:	2301      	movs	r3, #1
 8004796:	e09f      	b.n	80048d8 <_printf_i+0x1ec>
 8004798:	6820      	ldr	r0, [r4, #0]
 800479a:	682b      	ldr	r3, [r5, #0]
 800479c:	0607      	lsls	r7, r0, #24
 800479e:	f103 0104 	add.w	r1, r3, #4
 80047a2:	6029      	str	r1, [r5, #0]
 80047a4:	d501      	bpl.n	80047aa <_printf_i+0xbe>
 80047a6:	681e      	ldr	r6, [r3, #0]
 80047a8:	e003      	b.n	80047b2 <_printf_i+0xc6>
 80047aa:	0646      	lsls	r6, r0, #25
 80047ac:	d5fb      	bpl.n	80047a6 <_printf_i+0xba>
 80047ae:	f9b3 6000 	ldrsh.w	r6, [r3]
 80047b2:	2e00      	cmp	r6, #0
 80047b4:	da03      	bge.n	80047be <_printf_i+0xd2>
 80047b6:	232d      	movs	r3, #45	; 0x2d
 80047b8:	4276      	negs	r6, r6
 80047ba:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80047be:	485a      	ldr	r0, [pc, #360]	; (8004928 <_printf_i+0x23c>)
 80047c0:	230a      	movs	r3, #10
 80047c2:	e012      	b.n	80047ea <_printf_i+0xfe>
 80047c4:	682b      	ldr	r3, [r5, #0]
 80047c6:	6820      	ldr	r0, [r4, #0]
 80047c8:	1d19      	adds	r1, r3, #4
 80047ca:	6029      	str	r1, [r5, #0]
 80047cc:	0605      	lsls	r5, r0, #24
 80047ce:	d501      	bpl.n	80047d4 <_printf_i+0xe8>
 80047d0:	681e      	ldr	r6, [r3, #0]
 80047d2:	e002      	b.n	80047da <_printf_i+0xee>
 80047d4:	0641      	lsls	r1, r0, #25
 80047d6:	d5fb      	bpl.n	80047d0 <_printf_i+0xe4>
 80047d8:	881e      	ldrh	r6, [r3, #0]
 80047da:	4853      	ldr	r0, [pc, #332]	; (8004928 <_printf_i+0x23c>)
 80047dc:	2f6f      	cmp	r7, #111	; 0x6f
 80047de:	bf0c      	ite	eq
 80047e0:	2308      	moveq	r3, #8
 80047e2:	230a      	movne	r3, #10
 80047e4:	2100      	movs	r1, #0
 80047e6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80047ea:	6865      	ldr	r5, [r4, #4]
 80047ec:	60a5      	str	r5, [r4, #8]
 80047ee:	2d00      	cmp	r5, #0
 80047f0:	bfa2      	ittt	ge
 80047f2:	6821      	ldrge	r1, [r4, #0]
 80047f4:	f021 0104 	bicge.w	r1, r1, #4
 80047f8:	6021      	strge	r1, [r4, #0]
 80047fa:	b90e      	cbnz	r6, 8004800 <_printf_i+0x114>
 80047fc:	2d00      	cmp	r5, #0
 80047fe:	d04b      	beq.n	8004898 <_printf_i+0x1ac>
 8004800:	4615      	mov	r5, r2
 8004802:	fbb6 f1f3 	udiv	r1, r6, r3
 8004806:	fb03 6711 	mls	r7, r3, r1, r6
 800480a:	5dc7      	ldrb	r7, [r0, r7]
 800480c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8004810:	4637      	mov	r7, r6
 8004812:	42bb      	cmp	r3, r7
 8004814:	460e      	mov	r6, r1
 8004816:	d9f4      	bls.n	8004802 <_printf_i+0x116>
 8004818:	2b08      	cmp	r3, #8
 800481a:	d10b      	bne.n	8004834 <_printf_i+0x148>
 800481c:	6823      	ldr	r3, [r4, #0]
 800481e:	07de      	lsls	r6, r3, #31
 8004820:	d508      	bpl.n	8004834 <_printf_i+0x148>
 8004822:	6923      	ldr	r3, [r4, #16]
 8004824:	6861      	ldr	r1, [r4, #4]
 8004826:	4299      	cmp	r1, r3
 8004828:	bfde      	ittt	le
 800482a:	2330      	movle	r3, #48	; 0x30
 800482c:	f805 3c01 	strble.w	r3, [r5, #-1]
 8004830:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8004834:	1b52      	subs	r2, r2, r5
 8004836:	6122      	str	r2, [r4, #16]
 8004838:	f8cd a000 	str.w	sl, [sp]
 800483c:	464b      	mov	r3, r9
 800483e:	aa03      	add	r2, sp, #12
 8004840:	4621      	mov	r1, r4
 8004842:	4640      	mov	r0, r8
 8004844:	f7ff fee4 	bl	8004610 <_printf_common>
 8004848:	3001      	adds	r0, #1
 800484a:	d14a      	bne.n	80048e2 <_printf_i+0x1f6>
 800484c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004850:	b004      	add	sp, #16
 8004852:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004856:	6823      	ldr	r3, [r4, #0]
 8004858:	f043 0320 	orr.w	r3, r3, #32
 800485c:	6023      	str	r3, [r4, #0]
 800485e:	4833      	ldr	r0, [pc, #204]	; (800492c <_printf_i+0x240>)
 8004860:	2778      	movs	r7, #120	; 0x78
 8004862:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8004866:	6823      	ldr	r3, [r4, #0]
 8004868:	6829      	ldr	r1, [r5, #0]
 800486a:	061f      	lsls	r7, r3, #24
 800486c:	f851 6b04 	ldr.w	r6, [r1], #4
 8004870:	d402      	bmi.n	8004878 <_printf_i+0x18c>
 8004872:	065f      	lsls	r7, r3, #25
 8004874:	bf48      	it	mi
 8004876:	b2b6      	uxthmi	r6, r6
 8004878:	07df      	lsls	r7, r3, #31
 800487a:	bf48      	it	mi
 800487c:	f043 0320 	orrmi.w	r3, r3, #32
 8004880:	6029      	str	r1, [r5, #0]
 8004882:	bf48      	it	mi
 8004884:	6023      	strmi	r3, [r4, #0]
 8004886:	b91e      	cbnz	r6, 8004890 <_printf_i+0x1a4>
 8004888:	6823      	ldr	r3, [r4, #0]
 800488a:	f023 0320 	bic.w	r3, r3, #32
 800488e:	6023      	str	r3, [r4, #0]
 8004890:	2310      	movs	r3, #16
 8004892:	e7a7      	b.n	80047e4 <_printf_i+0xf8>
 8004894:	4824      	ldr	r0, [pc, #144]	; (8004928 <_printf_i+0x23c>)
 8004896:	e7e4      	b.n	8004862 <_printf_i+0x176>
 8004898:	4615      	mov	r5, r2
 800489a:	e7bd      	b.n	8004818 <_printf_i+0x12c>
 800489c:	682b      	ldr	r3, [r5, #0]
 800489e:	6826      	ldr	r6, [r4, #0]
 80048a0:	6961      	ldr	r1, [r4, #20]
 80048a2:	1d18      	adds	r0, r3, #4
 80048a4:	6028      	str	r0, [r5, #0]
 80048a6:	0635      	lsls	r5, r6, #24
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	d501      	bpl.n	80048b0 <_printf_i+0x1c4>
 80048ac:	6019      	str	r1, [r3, #0]
 80048ae:	e002      	b.n	80048b6 <_printf_i+0x1ca>
 80048b0:	0670      	lsls	r0, r6, #25
 80048b2:	d5fb      	bpl.n	80048ac <_printf_i+0x1c0>
 80048b4:	8019      	strh	r1, [r3, #0]
 80048b6:	2300      	movs	r3, #0
 80048b8:	6123      	str	r3, [r4, #16]
 80048ba:	4615      	mov	r5, r2
 80048bc:	e7bc      	b.n	8004838 <_printf_i+0x14c>
 80048be:	682b      	ldr	r3, [r5, #0]
 80048c0:	1d1a      	adds	r2, r3, #4
 80048c2:	602a      	str	r2, [r5, #0]
 80048c4:	681d      	ldr	r5, [r3, #0]
 80048c6:	6862      	ldr	r2, [r4, #4]
 80048c8:	2100      	movs	r1, #0
 80048ca:	4628      	mov	r0, r5
 80048cc:	f7fb fc80 	bl	80001d0 <memchr>
 80048d0:	b108      	cbz	r0, 80048d6 <_printf_i+0x1ea>
 80048d2:	1b40      	subs	r0, r0, r5
 80048d4:	6060      	str	r0, [r4, #4]
 80048d6:	6863      	ldr	r3, [r4, #4]
 80048d8:	6123      	str	r3, [r4, #16]
 80048da:	2300      	movs	r3, #0
 80048dc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80048e0:	e7aa      	b.n	8004838 <_printf_i+0x14c>
 80048e2:	6923      	ldr	r3, [r4, #16]
 80048e4:	462a      	mov	r2, r5
 80048e6:	4649      	mov	r1, r9
 80048e8:	4640      	mov	r0, r8
 80048ea:	47d0      	blx	sl
 80048ec:	3001      	adds	r0, #1
 80048ee:	d0ad      	beq.n	800484c <_printf_i+0x160>
 80048f0:	6823      	ldr	r3, [r4, #0]
 80048f2:	079b      	lsls	r3, r3, #30
 80048f4:	d413      	bmi.n	800491e <_printf_i+0x232>
 80048f6:	68e0      	ldr	r0, [r4, #12]
 80048f8:	9b03      	ldr	r3, [sp, #12]
 80048fa:	4298      	cmp	r0, r3
 80048fc:	bfb8      	it	lt
 80048fe:	4618      	movlt	r0, r3
 8004900:	e7a6      	b.n	8004850 <_printf_i+0x164>
 8004902:	2301      	movs	r3, #1
 8004904:	4632      	mov	r2, r6
 8004906:	4649      	mov	r1, r9
 8004908:	4640      	mov	r0, r8
 800490a:	47d0      	blx	sl
 800490c:	3001      	adds	r0, #1
 800490e:	d09d      	beq.n	800484c <_printf_i+0x160>
 8004910:	3501      	adds	r5, #1
 8004912:	68e3      	ldr	r3, [r4, #12]
 8004914:	9903      	ldr	r1, [sp, #12]
 8004916:	1a5b      	subs	r3, r3, r1
 8004918:	42ab      	cmp	r3, r5
 800491a:	dcf2      	bgt.n	8004902 <_printf_i+0x216>
 800491c:	e7eb      	b.n	80048f6 <_printf_i+0x20a>
 800491e:	2500      	movs	r5, #0
 8004920:	f104 0619 	add.w	r6, r4, #25
 8004924:	e7f5      	b.n	8004912 <_printf_i+0x226>
 8004926:	bf00      	nop
 8004928:	08004dcd 	.word	0x08004dcd
 800492c:	08004dde 	.word	0x08004dde

08004930 <__sflush_r>:
 8004930:	898a      	ldrh	r2, [r1, #12]
 8004932:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004936:	4605      	mov	r5, r0
 8004938:	0710      	lsls	r0, r2, #28
 800493a:	460c      	mov	r4, r1
 800493c:	d458      	bmi.n	80049f0 <__sflush_r+0xc0>
 800493e:	684b      	ldr	r3, [r1, #4]
 8004940:	2b00      	cmp	r3, #0
 8004942:	dc05      	bgt.n	8004950 <__sflush_r+0x20>
 8004944:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8004946:	2b00      	cmp	r3, #0
 8004948:	dc02      	bgt.n	8004950 <__sflush_r+0x20>
 800494a:	2000      	movs	r0, #0
 800494c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004950:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8004952:	2e00      	cmp	r6, #0
 8004954:	d0f9      	beq.n	800494a <__sflush_r+0x1a>
 8004956:	2300      	movs	r3, #0
 8004958:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800495c:	682f      	ldr	r7, [r5, #0]
 800495e:	6a21      	ldr	r1, [r4, #32]
 8004960:	602b      	str	r3, [r5, #0]
 8004962:	d032      	beq.n	80049ca <__sflush_r+0x9a>
 8004964:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8004966:	89a3      	ldrh	r3, [r4, #12]
 8004968:	075a      	lsls	r2, r3, #29
 800496a:	d505      	bpl.n	8004978 <__sflush_r+0x48>
 800496c:	6863      	ldr	r3, [r4, #4]
 800496e:	1ac0      	subs	r0, r0, r3
 8004970:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8004972:	b10b      	cbz	r3, 8004978 <__sflush_r+0x48>
 8004974:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8004976:	1ac0      	subs	r0, r0, r3
 8004978:	2300      	movs	r3, #0
 800497a:	4602      	mov	r2, r0
 800497c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800497e:	6a21      	ldr	r1, [r4, #32]
 8004980:	4628      	mov	r0, r5
 8004982:	47b0      	blx	r6
 8004984:	1c43      	adds	r3, r0, #1
 8004986:	89a3      	ldrh	r3, [r4, #12]
 8004988:	d106      	bne.n	8004998 <__sflush_r+0x68>
 800498a:	6829      	ldr	r1, [r5, #0]
 800498c:	291d      	cmp	r1, #29
 800498e:	d82b      	bhi.n	80049e8 <__sflush_r+0xb8>
 8004990:	4a29      	ldr	r2, [pc, #164]	; (8004a38 <__sflush_r+0x108>)
 8004992:	410a      	asrs	r2, r1
 8004994:	07d6      	lsls	r6, r2, #31
 8004996:	d427      	bmi.n	80049e8 <__sflush_r+0xb8>
 8004998:	2200      	movs	r2, #0
 800499a:	6062      	str	r2, [r4, #4]
 800499c:	04d9      	lsls	r1, r3, #19
 800499e:	6922      	ldr	r2, [r4, #16]
 80049a0:	6022      	str	r2, [r4, #0]
 80049a2:	d504      	bpl.n	80049ae <__sflush_r+0x7e>
 80049a4:	1c42      	adds	r2, r0, #1
 80049a6:	d101      	bne.n	80049ac <__sflush_r+0x7c>
 80049a8:	682b      	ldr	r3, [r5, #0]
 80049aa:	b903      	cbnz	r3, 80049ae <__sflush_r+0x7e>
 80049ac:	6560      	str	r0, [r4, #84]	; 0x54
 80049ae:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80049b0:	602f      	str	r7, [r5, #0]
 80049b2:	2900      	cmp	r1, #0
 80049b4:	d0c9      	beq.n	800494a <__sflush_r+0x1a>
 80049b6:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80049ba:	4299      	cmp	r1, r3
 80049bc:	d002      	beq.n	80049c4 <__sflush_r+0x94>
 80049be:	4628      	mov	r0, r5
 80049c0:	f7ff fbea 	bl	8004198 <_free_r>
 80049c4:	2000      	movs	r0, #0
 80049c6:	6360      	str	r0, [r4, #52]	; 0x34
 80049c8:	e7c0      	b.n	800494c <__sflush_r+0x1c>
 80049ca:	2301      	movs	r3, #1
 80049cc:	4628      	mov	r0, r5
 80049ce:	47b0      	blx	r6
 80049d0:	1c41      	adds	r1, r0, #1
 80049d2:	d1c8      	bne.n	8004966 <__sflush_r+0x36>
 80049d4:	682b      	ldr	r3, [r5, #0]
 80049d6:	2b00      	cmp	r3, #0
 80049d8:	d0c5      	beq.n	8004966 <__sflush_r+0x36>
 80049da:	2b1d      	cmp	r3, #29
 80049dc:	d001      	beq.n	80049e2 <__sflush_r+0xb2>
 80049de:	2b16      	cmp	r3, #22
 80049e0:	d101      	bne.n	80049e6 <__sflush_r+0xb6>
 80049e2:	602f      	str	r7, [r5, #0]
 80049e4:	e7b1      	b.n	800494a <__sflush_r+0x1a>
 80049e6:	89a3      	ldrh	r3, [r4, #12]
 80049e8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80049ec:	81a3      	strh	r3, [r4, #12]
 80049ee:	e7ad      	b.n	800494c <__sflush_r+0x1c>
 80049f0:	690f      	ldr	r7, [r1, #16]
 80049f2:	2f00      	cmp	r7, #0
 80049f4:	d0a9      	beq.n	800494a <__sflush_r+0x1a>
 80049f6:	0793      	lsls	r3, r2, #30
 80049f8:	680e      	ldr	r6, [r1, #0]
 80049fa:	bf08      	it	eq
 80049fc:	694b      	ldreq	r3, [r1, #20]
 80049fe:	600f      	str	r7, [r1, #0]
 8004a00:	bf18      	it	ne
 8004a02:	2300      	movne	r3, #0
 8004a04:	eba6 0807 	sub.w	r8, r6, r7
 8004a08:	608b      	str	r3, [r1, #8]
 8004a0a:	f1b8 0f00 	cmp.w	r8, #0
 8004a0e:	dd9c      	ble.n	800494a <__sflush_r+0x1a>
 8004a10:	6a21      	ldr	r1, [r4, #32]
 8004a12:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8004a14:	4643      	mov	r3, r8
 8004a16:	463a      	mov	r2, r7
 8004a18:	4628      	mov	r0, r5
 8004a1a:	47b0      	blx	r6
 8004a1c:	2800      	cmp	r0, #0
 8004a1e:	dc06      	bgt.n	8004a2e <__sflush_r+0xfe>
 8004a20:	89a3      	ldrh	r3, [r4, #12]
 8004a22:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004a26:	81a3      	strh	r3, [r4, #12]
 8004a28:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004a2c:	e78e      	b.n	800494c <__sflush_r+0x1c>
 8004a2e:	4407      	add	r7, r0
 8004a30:	eba8 0800 	sub.w	r8, r8, r0
 8004a34:	e7e9      	b.n	8004a0a <__sflush_r+0xda>
 8004a36:	bf00      	nop
 8004a38:	dfbffffe 	.word	0xdfbffffe

08004a3c <_fflush_r>:
 8004a3c:	b538      	push	{r3, r4, r5, lr}
 8004a3e:	690b      	ldr	r3, [r1, #16]
 8004a40:	4605      	mov	r5, r0
 8004a42:	460c      	mov	r4, r1
 8004a44:	b913      	cbnz	r3, 8004a4c <_fflush_r+0x10>
 8004a46:	2500      	movs	r5, #0
 8004a48:	4628      	mov	r0, r5
 8004a4a:	bd38      	pop	{r3, r4, r5, pc}
 8004a4c:	b118      	cbz	r0, 8004a56 <_fflush_r+0x1a>
 8004a4e:	6a03      	ldr	r3, [r0, #32]
 8004a50:	b90b      	cbnz	r3, 8004a56 <_fflush_r+0x1a>
 8004a52:	f7ff f9a9 	bl	8003da8 <__sinit>
 8004a56:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004a5a:	2b00      	cmp	r3, #0
 8004a5c:	d0f3      	beq.n	8004a46 <_fflush_r+0xa>
 8004a5e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8004a60:	07d0      	lsls	r0, r2, #31
 8004a62:	d404      	bmi.n	8004a6e <_fflush_r+0x32>
 8004a64:	0599      	lsls	r1, r3, #22
 8004a66:	d402      	bmi.n	8004a6e <_fflush_r+0x32>
 8004a68:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004a6a:	f7ff fb92 	bl	8004192 <__retarget_lock_acquire_recursive>
 8004a6e:	4628      	mov	r0, r5
 8004a70:	4621      	mov	r1, r4
 8004a72:	f7ff ff5d 	bl	8004930 <__sflush_r>
 8004a76:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004a78:	07da      	lsls	r2, r3, #31
 8004a7a:	4605      	mov	r5, r0
 8004a7c:	d4e4      	bmi.n	8004a48 <_fflush_r+0xc>
 8004a7e:	89a3      	ldrh	r3, [r4, #12]
 8004a80:	059b      	lsls	r3, r3, #22
 8004a82:	d4e1      	bmi.n	8004a48 <_fflush_r+0xc>
 8004a84:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004a86:	f7ff fb85 	bl	8004194 <__retarget_lock_release_recursive>
 8004a8a:	e7dd      	b.n	8004a48 <_fflush_r+0xc>

08004a8c <__swhatbuf_r>:
 8004a8c:	b570      	push	{r4, r5, r6, lr}
 8004a8e:	460c      	mov	r4, r1
 8004a90:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004a94:	2900      	cmp	r1, #0
 8004a96:	b096      	sub	sp, #88	; 0x58
 8004a98:	4615      	mov	r5, r2
 8004a9a:	461e      	mov	r6, r3
 8004a9c:	da0d      	bge.n	8004aba <__swhatbuf_r+0x2e>
 8004a9e:	89a3      	ldrh	r3, [r4, #12]
 8004aa0:	f013 0f80 	tst.w	r3, #128	; 0x80
 8004aa4:	f04f 0100 	mov.w	r1, #0
 8004aa8:	bf0c      	ite	eq
 8004aaa:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8004aae:	2340      	movne	r3, #64	; 0x40
 8004ab0:	2000      	movs	r0, #0
 8004ab2:	6031      	str	r1, [r6, #0]
 8004ab4:	602b      	str	r3, [r5, #0]
 8004ab6:	b016      	add	sp, #88	; 0x58
 8004ab8:	bd70      	pop	{r4, r5, r6, pc}
 8004aba:	466a      	mov	r2, sp
 8004abc:	f000 f848 	bl	8004b50 <_fstat_r>
 8004ac0:	2800      	cmp	r0, #0
 8004ac2:	dbec      	blt.n	8004a9e <__swhatbuf_r+0x12>
 8004ac4:	9901      	ldr	r1, [sp, #4]
 8004ac6:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8004aca:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8004ace:	4259      	negs	r1, r3
 8004ad0:	4159      	adcs	r1, r3
 8004ad2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004ad6:	e7eb      	b.n	8004ab0 <__swhatbuf_r+0x24>

08004ad8 <__smakebuf_r>:
 8004ad8:	898b      	ldrh	r3, [r1, #12]
 8004ada:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8004adc:	079d      	lsls	r5, r3, #30
 8004ade:	4606      	mov	r6, r0
 8004ae0:	460c      	mov	r4, r1
 8004ae2:	d507      	bpl.n	8004af4 <__smakebuf_r+0x1c>
 8004ae4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8004ae8:	6023      	str	r3, [r4, #0]
 8004aea:	6123      	str	r3, [r4, #16]
 8004aec:	2301      	movs	r3, #1
 8004aee:	6163      	str	r3, [r4, #20]
 8004af0:	b002      	add	sp, #8
 8004af2:	bd70      	pop	{r4, r5, r6, pc}
 8004af4:	ab01      	add	r3, sp, #4
 8004af6:	466a      	mov	r2, sp
 8004af8:	f7ff ffc8 	bl	8004a8c <__swhatbuf_r>
 8004afc:	9900      	ldr	r1, [sp, #0]
 8004afe:	4605      	mov	r5, r0
 8004b00:	4630      	mov	r0, r6
 8004b02:	f7ff fbb5 	bl	8004270 <_malloc_r>
 8004b06:	b948      	cbnz	r0, 8004b1c <__smakebuf_r+0x44>
 8004b08:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004b0c:	059a      	lsls	r2, r3, #22
 8004b0e:	d4ef      	bmi.n	8004af0 <__smakebuf_r+0x18>
 8004b10:	f023 0303 	bic.w	r3, r3, #3
 8004b14:	f043 0302 	orr.w	r3, r3, #2
 8004b18:	81a3      	strh	r3, [r4, #12]
 8004b1a:	e7e3      	b.n	8004ae4 <__smakebuf_r+0xc>
 8004b1c:	89a3      	ldrh	r3, [r4, #12]
 8004b1e:	6020      	str	r0, [r4, #0]
 8004b20:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004b24:	81a3      	strh	r3, [r4, #12]
 8004b26:	9b00      	ldr	r3, [sp, #0]
 8004b28:	6163      	str	r3, [r4, #20]
 8004b2a:	9b01      	ldr	r3, [sp, #4]
 8004b2c:	6120      	str	r0, [r4, #16]
 8004b2e:	b15b      	cbz	r3, 8004b48 <__smakebuf_r+0x70>
 8004b30:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004b34:	4630      	mov	r0, r6
 8004b36:	f000 f81d 	bl	8004b74 <_isatty_r>
 8004b3a:	b128      	cbz	r0, 8004b48 <__smakebuf_r+0x70>
 8004b3c:	89a3      	ldrh	r3, [r4, #12]
 8004b3e:	f023 0303 	bic.w	r3, r3, #3
 8004b42:	f043 0301 	orr.w	r3, r3, #1
 8004b46:	81a3      	strh	r3, [r4, #12]
 8004b48:	89a3      	ldrh	r3, [r4, #12]
 8004b4a:	431d      	orrs	r5, r3
 8004b4c:	81a5      	strh	r5, [r4, #12]
 8004b4e:	e7cf      	b.n	8004af0 <__smakebuf_r+0x18>

08004b50 <_fstat_r>:
 8004b50:	b538      	push	{r3, r4, r5, lr}
 8004b52:	4d07      	ldr	r5, [pc, #28]	; (8004b70 <_fstat_r+0x20>)
 8004b54:	2300      	movs	r3, #0
 8004b56:	4604      	mov	r4, r0
 8004b58:	4608      	mov	r0, r1
 8004b5a:	4611      	mov	r1, r2
 8004b5c:	602b      	str	r3, [r5, #0]
 8004b5e:	f7fb ffec 	bl	8000b3a <_fstat>
 8004b62:	1c43      	adds	r3, r0, #1
 8004b64:	d102      	bne.n	8004b6c <_fstat_r+0x1c>
 8004b66:	682b      	ldr	r3, [r5, #0]
 8004b68:	b103      	cbz	r3, 8004b6c <_fstat_r+0x1c>
 8004b6a:	6023      	str	r3, [r4, #0]
 8004b6c:	bd38      	pop	{r3, r4, r5, pc}
 8004b6e:	bf00      	nop
 8004b70:	20000294 	.word	0x20000294

08004b74 <_isatty_r>:
 8004b74:	b538      	push	{r3, r4, r5, lr}
 8004b76:	4d06      	ldr	r5, [pc, #24]	; (8004b90 <_isatty_r+0x1c>)
 8004b78:	2300      	movs	r3, #0
 8004b7a:	4604      	mov	r4, r0
 8004b7c:	4608      	mov	r0, r1
 8004b7e:	602b      	str	r3, [r5, #0]
 8004b80:	f7fb ffeb 	bl	8000b5a <_isatty>
 8004b84:	1c43      	adds	r3, r0, #1
 8004b86:	d102      	bne.n	8004b8e <_isatty_r+0x1a>
 8004b88:	682b      	ldr	r3, [r5, #0]
 8004b8a:	b103      	cbz	r3, 8004b8e <_isatty_r+0x1a>
 8004b8c:	6023      	str	r3, [r4, #0]
 8004b8e:	bd38      	pop	{r3, r4, r5, pc}
 8004b90:	20000294 	.word	0x20000294

08004b94 <_sbrk_r>:
 8004b94:	b538      	push	{r3, r4, r5, lr}
 8004b96:	4d06      	ldr	r5, [pc, #24]	; (8004bb0 <_sbrk_r+0x1c>)
 8004b98:	2300      	movs	r3, #0
 8004b9a:	4604      	mov	r4, r0
 8004b9c:	4608      	mov	r0, r1
 8004b9e:	602b      	str	r3, [r5, #0]
 8004ba0:	f7fb fff4 	bl	8000b8c <_sbrk>
 8004ba4:	1c43      	adds	r3, r0, #1
 8004ba6:	d102      	bne.n	8004bae <_sbrk_r+0x1a>
 8004ba8:	682b      	ldr	r3, [r5, #0]
 8004baa:	b103      	cbz	r3, 8004bae <_sbrk_r+0x1a>
 8004bac:	6023      	str	r3, [r4, #0]
 8004bae:	bd38      	pop	{r3, r4, r5, pc}
 8004bb0:	20000294 	.word	0x20000294

08004bb4 <_init>:
 8004bb4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004bb6:	bf00      	nop
 8004bb8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004bba:	bc08      	pop	{r3}
 8004bbc:	469e      	mov	lr, r3
 8004bbe:	4770      	bx	lr

08004bc0 <_fini>:
 8004bc0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004bc2:	bf00      	nop
 8004bc4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004bc6:	bc08      	pop	{r3}
 8004bc8:	469e      	mov	lr, r3
 8004bca:	4770      	bx	lr
